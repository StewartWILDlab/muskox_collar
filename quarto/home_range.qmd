---
title: "Home Range"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
execute:
  echo: true
  warning: false
  error: false
---

```{r}
#| label: load-packages
#| include: false

library(tidyverse)
library(sf)
library(here)
```

In this document, we will estimate home range size for collared muskoxen and look to compare range overlap and size across years and seasons.

## Estimating Movement Model

Before we can estimate home ranges for the collared muskoxen, we need to determine an appropriate movement model. To do this, we will use variograms. Our data has been updated to conform to Movebank naming conventions so that we can use the **ctmm** package.

```{r}
#| label: load-data

library(ctmm)
musk_move <- read.csv(here("data/raw/muskox_data/musk_collar_filt_movebank.csv"))
musk_tel <- as.telemetry(musk_move)[c(-2,-4,-5)]

```

First we will plot empirical variograms for each collared muskoxen. Variograms are used to quantify spatial dependence between locations at different points in time. In general, as the time between locations increases, spatial dependence decreases. Variograms plot the semi-variance of distances between pairs of points separated by different time lags. At short time lags, these distances are very similar and the semi-variance is low. At large time lags, there is greater variability in the distances between points, so the semi-variance is high. Usually variograms will reach an asymptote in semi-variance that represents the time lag at which the animal is able to traverse their home range. For now we will leave out the muskoxen that had collar failures as they do not have enough data to estimate home ranges.

```{r}
#| label: musk_var
#| dependson: "load-data"
#| output: FALSE

musk_var <- lapply(musk_tel, variogram, CI="Gauss", fast = TRUE)
xlim <- c(0,5 %#% "day")
```

```{r, fig.height=4}
#| dependson: "musk_var"
map(musk_var, function(x) x %>% as_tibble() %>% mutate(id = x@info$identity)) %>% 
  list_rbind() %>%
  mutate(level = 0.95,
         ci.lower = SVF*qchisq((1-level)/2,DOF,lower.tail=TRUE)/DOF,
         ci.upper = SVF*qchisq((1-level)/2,DOF,lower.tail=FALSE)/DOF) %>%
  ggplot(aes(x = lag, y = SVF)) +
  geom_linerange(aes(ymin = ci.lower, ymax = ci.upper), colour = "grey") +
  geom_line() +
  facet_wrap(~id, scales = "free_y") +
  theme_bw()
```

Most of these look fine, however for two of the longer time series (7011 and 7012) the semi-variance appears to reach an asymptote by the first year, but starts increasing again part way through the second year. If this behaviour is common, home range estimates may be biased even after a year's worth of data. If muskoxen truly are nomadic and lack site fidelty, kernel density methods may not be appropriate (Silva et al., 2022).

It is also clear there are some issues with collars 708 and 7010. Closer inspection of the data reveals that, every 7 fixes, there is a longer 24 hour delay until the next fix. Currently, the model uses the median sampling interval (8 hours) to estimate the variogram. The **variogram** function allows is to specify more than one time interval (in our case, 8 and 24 hours) to progressively coarsen the variogram. We can also specify an interval-weighted algorithm to further improve the appearance of the variogram.

```{r}
#| label: musk_var2
#| dependson: "musk_var"
#| output: FALSE

dt <- c(8,24) %#% "hour"
musk_var[[2]] <- variogram(musk_tel[[2]], dt = dt, CI="Gauss", fast = FALSE)
musk_var[[3]] <- variogram(musk_tel[[3]], dt = dt, CI="Gauss", fast = FALSE)
```

```{r, fig.height=4}
#| dependson: "musk_var2"
map(musk_var, function(x) x %>% as_tibble() %>% mutate(id = x@info$identity)) %>% 
  list_rbind() %>%
  mutate(level = 0.95,
         ci.lower = SVF*qchisq((1-level)/2,DOF,lower.tail=TRUE)/DOF,
         ci.upper = SVF*qchisq((1-level)/2,DOF,lower.tail=FALSE)/DOF) %>%
  ggplot(aes(x = lag, y = SVF)) +
  geom_linerange(aes(ymin = ci.lower, ymax = ci.upper), colour = "grey") +
  geom_line() +
  facet_wrap(~id, scales = "free_y") +
  theme_bw()
```

These look better. Collars 7011 and 7012 do not appear to reach an asymptote in semi-variance as lag increases, suggesting that these individuals are not range resident. 7010 has a somewhat bell-shaped curve. This can be indicative of distinct winter and summer grounds. However, given that muskoxen appear to have limited movement in the winter and the \~1-year time series for 7010 starts and ends in winter, it seems more likely that the wintering grounds from one year to the next happened to be close together.

We can diagnose these issues further by fitting a variety of custom variogram functions to our data using the **ctmm.select** function.

```{r, fig.height=4}
#| label: musk_var_mod
#| dependson: "musk_var2"

### fist create a best guess set of parameters for the model
musk_var_mod <- lapply(musk_var, variogram.fit, interactive = FALSE)
#fit <- mapply(function(x,y){ctmm.select(x,y,verbose = TRUE,cores = 3)},musk_tel,musk_var_mod)
#saveRDS(fit, here("output/musk_var_fit.rds"))
fit <- readRDS(here("output/musk_var_fit.rds"))
for (i in 1:length(musk_var)){print(musk_var[[i]]@info$identity);print(summary(fit[,i])); plot(musk_var[[i]], CTMM = fit[,i], col.CTMM=c("red","purple","blue", "green"),fraction=0.5,level=0.5);plot(musk_var[[i]], CTMM = fit[,i], col.CTMM=c("red","purple","blue", "green"),xlim = xlim,,level=0.5)}

```

These look okay, but they aren't capturing the short timescales well in all instances. This could be an issue with these individuals not being range resident, but it could also be related to telemetry error. To try to rectify this, we can attempt to fit models that account for potential error in the telemetry data.

## Incorporating Error

We will use location information for the collar 707, which had its release mechanism triggered early. Since this collar was stationary once it was released from the animal, we can use deviations from its average position to estimate telemetry error. This will partially account for instances where the muskox appeared to have moved between successive time stamps, but really didn't or instances where the muskox appeared to move between successive time stamps, but really didn't.

```{r}
#| label: musk_err
#| dependson: "musk_var2"
#| echo: TRUE

musk_collar_cal <- read.csv(here("data/raw/muskox_data/musk_collar_cal_movebank.csv"))
musk_cal <- as.telemetry(musk_collar_cal)

UERE <- uere.fit(musk_cal)
uere(musk_tel) <- UERE
musk_var_mod_err <- lapply(musk_tel, ctmm.guess, interactive = FALSE, CTMM=ctmm(error=TRUE))
musk_var_mod_err[[2]] <- ctmm.guess(musk_tel[[2]], interactive = FALSE, CTMM=ctmm(error=TRUE, dt = dt))

plot(musk_cal[[1]])

```

We can now rerun our original movement model selection process while incorporating the error model estimated above. Let's plot the model results again, this time comparing the top models with those that did not have telemetry errors accounted for.

```{r}
#| label: musk_mod_err
#| dependson: "musk_err"
#| echo: FALSE

# fit706 <- ctmm.select(musk_tel[[1]],musk_var_mod_err[[1]],verbose = TRUE,cores = 3, trace = 3)
# saveRDS(fit706, here("output/musk_var_fit_err706.rds"))
# fit708 <- ctmm.select(musk_tel[[2]],musk_var_mod_err[[2]],verbose = TRUE,cores = 3, trace = 3)
# saveRDS(fit708, here("output/musk_var_fit_err708.rds"))
# fit7010 <- ctmm.select(musk_tel[[3]],musk_var_mod_err[[3]],verbose = TRUE,cores = 3, trace = 3)
# saveRDS(fit7010, here("output/musk_var_fit_err7010.rds"))
# fit7011 <- ctmm.select(musk_tel[[4]],musk_var_mod_err[[4]],verbose = TRUE,cores = 3, trace = 3)
# saveRDS(fit7011, here("output/musk_var_fit_err7011.rds"))
# fit7012 <- ctmm.select(musk_tel[[5]],musk_var_mod_err[[5]],verbose = TRUE,cores = 3, trace = 3)
# saveRDS(fit7012, here("output/musk_var_fit_err7012.rds"))
# fit7013 <- ctmm.select(musk_tel[[6]],musk_var_mod_err[[6]],verbose = TRUE,cores = 3, trace = 3)
# saveRDS(fit7013, here("output/musk_var_fit_err7013.rds"))
# fit7080 <- ctmm.select(musk_tel[[7]],musk_var_mod_err[[7]],verbose = TRUE,cores = 3, trace = 3)
# saveRDS(fit7080, here("output/musk_var_fit_err7080.rds"))

fit706 <- readRDS(here("output/musk_var_fit_err706.rds"))
fit708 <- readRDS(here("output/musk_var_fit_err708.rds"))
fit7010 <- readRDS(here("output/musk_var_fit_err7010.rds"))
fit7011 <- readRDS(here("output/musk_var_fit_err7011.rds"))
fit7012 <- readRDS(here("output/musk_var_fit_err7012.rds"))
fit7013 <- readRDS(here("output/musk_var_fit_err7013.rds"))
fit7080 <- readRDS(here("output/musk_var_fit_err7080.rds"))

print(musk_var[[1]]@info$identity);print(summary(fit706)); plot(musk_var[[1]], CTMM = list(fit706[[1]],fit[1,1][[1]]), col.CTMM=c("red","blue"),fraction=0.5,level=0.5);plot(musk_var[[1]], CTMM = list(fit706[[1]],fit[1,1][[1]]), col.CTMM=c("red","blue"),xlim = xlim,,level=0.5)
print(musk_var[[2]]@info$identity);print(summary(fit708)); plot(musk_var[[2]], CTMM = list(fit708[[1]],fit[1,2][[1]]), col.CTMM=c("red","blue"),fraction=0.5,level=0.5);plot(musk_var[[2]], CTMM = list(fit708[[1]],fit[1,2][[1]]), col.CTMM=c("red","blue"),xlim = xlim,,level=0.5)
print(musk_var[[3]]@info$identity);print(summary(fit7010)); plot(musk_var[[3]], CTMM = list(fit7010[[1]],fit[1,3][[1]]), col.CTMM=c("red","blue"),fraction=0.5,level=0.5);plot(musk_var[[3]], CTMM = list(fit7010[[1]],fit[1,3][[1]]), col.CTMM=c("red","blue"),xlim = xlim,,level=0.5)
print(musk_var[[4]]@info$identity);print(summary(fit7011)); plot(musk_var[[4]], CTMM = list(fit7011[[1]],fit[1,4][[1]]), col.CTMM=c("red","blue"),fraction=0.5,level=0.5);plot(musk_var[[4]], CTMM = list(fit7011[[1]],fit[1,4][[1]]), col.CTMM=c("red","blue"),xlim = xlim,,level=0.5)
print(musk_var[[5]]@info$identity);print(summary(fit7012)); plot(musk_var[[5]], CTMM = list(fit7012[[1]],fit[1,5][[1]]), col.CTMM=c("red","blue"),fraction=0.5,level=0.5);plot(musk_var[[5]], CTMM = list(fit7012[[1]],fit[1,5][[1]]), col.CTMM=c("red","blue"),xlim = xlim,,level=0.5)
print(musk_var[[6]]@info$identity);print(summary(fit7013)); plot(musk_var[[6]], CTMM = list(fit7013[[1]],fit[1,6][[1]]), col.CTMM=c("red","blue"),fraction=0.5,level=0.5);plot(musk_var[[6]], CTMM = list(fit7013[[1]],fit[1,6][[1]]), col.CTMM=c("red","blue"),xlim = xlim,,level=0.5)
print(musk_var[[7]]@info$identity);print(summary(fit7080)); plot(musk_var[[7]], CTMM = list(fit7080[[1]],fit[1,7][[1]]), col.CTMM=c("red","blue"),fraction=0.5,level=0.5);plot(musk_var[[7]], CTMM = list(fit7080[[1]],fit[1,7][[1]]), col.CTMM=c("red","blue"),xlim = xlim,,level=0.5)

```

It appears as though the incorporation of the error model has not made any significant improvements to the fit of the variograms. To further investigate whether we can live with these erorrs, lets try to simulate new data based on these models and compare how well the empirical variograms for the real and simulated data match up with the modelled variograms.

## Subseting Data

Given that the start and end of the sampling period for each muskox can bias the end of the empirical variogram (the longest time lags will be solely based on the distances between the first and last locations), it may be necessary to subset some of the relocations. In particular, many sampling periods start and end in the winter when muskoxen are stationary. If overwintering locations at the start and end happen to be nearby, the variogram will experience a dip at the end and vice versa if they happen to be far apart. To limit the chance of this happening, lets ensure that sampling periods start or end in the summer

```{r}
#| label: musk_tel_sub

musk_move_sub <- musk_move %>%
  mutate(timestamp = as.POSIXct(timestamp)) %>%
  filter(
    individual.local.identifier == 706&
      timestamp>=as.POSIXct("2008-05-05")|
    individual.local.identifier == 708&
      timestamp>=as.POSIXct("2009-05-09")|
    individual.local.identifier == 7010&
      timestamp>=as.POSIXct("2009-05-15")|
    individual.local.identifier == 7011&
      timestamp<=as.POSIXct("2011-09-28")|    
    individual.local.identifier == 7012&
      timestamp>=as.POSIXct("2009-05-19")|
    individual.local.identifier %in%c(7013,7080))
  
musk_tel_sub <- as.telemetry(musk_move_sub)

musk_var_sub <- lapply(musk_tel_sub, variogram, CI="Gauss", fast = TRUE)
dt <- c(8,24) %#% "hour"
musk_var_sub[[2]] <- variogram(musk_tel_sub[[2]], dt = dt, CI="Gauss", fast = FALSE)
musk_var_sub[[3]] <- variogram(musk_tel_sub[[3]], dt = dt, CI="Gauss", fast = FALSE)

map(musk_var_sub, function(x) x %>% as_tibble() %>% mutate(id = x@info$identity)) %>% 
  list_rbind() %>%
  group_by(id) %>%
  slice(seq(0.5 * n())) %>%
  ungroup() %>%
  mutate(level = 0.95,
         lag = lag/(24*60*60),
         ci.lower = SVF*qchisq((1-level)/2,DOF,lower.tail=TRUE)/DOF,
         ci.upper = SVF*qchisq((1-level)/2,DOF,lower.tail=FALSE)/DOF) %>%
  ggplot(aes(x = lag, y = SVF)) +
  geom_linerange(aes(ymin = ci.lower, ymax = ci.upper), colour = "grey") +
  geom_line() +
  facet_wrap(~id, scales = "free_y") +
  theme_bw()

### fist create a best guess set of parameters for the model
musk_sub_mod <- lapply(musk_var_sub, variogram.fit, interactive = FALSE)
# fit3 <- mapply(function(x,y){ctmm.select(x,y,verbose = TRUE,cores = 3)},musk_tel_sub,musk_sub_mod)
# saveRDS(fit3, here("output/musk_sub_fit.rds"))
fit3 <- readRDS(here("output/musk_sub_fit.rds"))
for (i in 1:length(musk_var)){print(musk_var_sub[[i]]@info$identity);print(summary(fit3[,i])); plot(musk_var_sub[[i]], CTMM = fit3[,i], col.CTMM=c("red","purple","blue", "green"),fraction=0.5,level=0.5);plot(musk_var_sub[[i]], CTMM = fit3[,i], col.CTMM=c("red","purple","blue", "green"),xlim = xlim,,level=0.5)}


```

These look better overall. The variogram for 7012 still appears to be increasing but the other ones are relatively stable.

## Simulating Variograms

To illustrate the variability of empirical variograms over long time periods, let's simulate new data based on the best fitted models.

```{r}
#| label: musk_sim
#| dependson: "musk_var_mod"
#| echo: FALSE

for(i in 1:length(musk_tel_sub)){
  set.seed(1)
  musk_sim <- simulate(fit3[1,i][[1]], t=musk_tel_sub[[i]]$t, nsim = 10)
  var_sim <- lapply(musk_sim, variogram, fast = TRUE)
  var_sim[[11]] <- musk_var_sub[[i]]
  print(musk_var_sub[[i]]@info$identity)
  plot(var_sim, CTMM = fit3[1,i][[1]],fraction = 0.5, level = 0.5, 
       col = c(rep("blue",10),"green"));title("Simulated = blue")
  plot(var_sim, CTMM = fit3[1,i][[1]],xlim = xlim, level = 0.5, 
       col = c(rep("blue",10),"green"));title("Simulated = blue")
}


```

At large time scales, the modelled variogram does not appear to match up very well against the empirical variograms of the simulated and observed data. This is because the errors in the variograms (difference between modelled and empirical) are autocorrelated. Small perturbations are carried forward and can add up over time, but these are not necessarily a bad thing for fitting our model.

In addition, as the time lag increase, so to does our uncertainty about the estimated semi-variance because larger time lags have fewer pairs of data points to estimate the semi-variance. We have the most certainty at short time lags because we have many pairs of data to estimate uncertainty. It appears as though the simulated variogram is better represented by our current model.

## Creating Auto Correlated Kernel Density Estimates

We can use kernel density estimates that account for these underlying movement models using the **akde** function. We will also plot the telemetry points and colour them by day in order to understand when nomadic/dispersal events occur.

```{r, fig.height=4}
#| label: akde
#| dependson: "musk_var_mod"

best_fit <- fit3[1,]
akde <- mapply(function(x,y){akde(x,y)},musk_tel_sub,best_fit)
EXT <- lapply(akde, extent, level=0.95)
for(i in 1:length(akde)){
  COL <- color(musk_tel_sub[[i]],by='time')
  plot(musk_tel_sub[[i]],UD=akde[[i]],
       xlim=EXT[[i]]$x,ylim=EXT[[i]]$y,
       col = COL, lwd=4);
  title(names(musk_tel_sub)[[i]])
  }

  
```

For the most part, the home range estimates look pretty good, but there are some concerning aspects with clusters of points that look like they represent dispersal events. 706, 7011, 7012, and 7013 all have periods of time (usually at the start or end of the time series) where they moved away from the core home range area. I'm not sure if these are concerning, but some of the odd variograms would suggest they are.

Another thing to consider is that for some muskoxen, there appears to be some periodicity in their movement, which affects the home rnage estimates. 708 is a good example where the semi-variance decreases at certain times leading to an underestimated variogram model. This causes the fairly conservative home range estimate.

Lastly, these models don't account for barrier to muskox movement. 7080 in particular has a lake in its home range that it travles around. This is probably why the home range estimate is split into different sections despite the variogram suggesting a range resident individual.

```{r, fig.height=4}
#| dependson: "akde"
#| echo: FALSE


map(akde, function(x){as_tibble(summary(x)$CI)}) %>%
  list_rbind() %>%
  set_names(c("lower","mean","upper")) %>%
  mutate(id = factor(names(musk_tel), levels = names(musk_tel_sub)),
         mean = round(mean),
         lower = round(lower),
         upper = round(upper)) %>%
  select(id,lower,mean,upper) %>%
  ggplot(aes(x = id, y = mean)) +
  geom_pointrange(aes(ymin = lower, ymax = upper)) +
  ylab("Home range size (km2)") +
  xlab("Muskox ID") +
  theme_bw()

musk_move_sub %>%
  filter(individual.local.identifier %in% names(musk_tel)) %>%
  mutate(date = as.Date(timestamp),
         id = factor(individual.local.identifier, levels = names(musk_tel))) %>%
  group_by(id) %>%
  summarise(days = max(date) - min(date)) %>%
  ggplot(aes(x = id, y = days)) +
  geom_point(size = 2) +
  ylab("Number of days") +
  xlab("Muskox ID") +
  theme_bw()
```

There does not appear to be a strong relationship between the days that a collar was active and the size of the home range. The muskox with the second most number of days has the highest home range estimate, but the muskox with the least amount of days has the second highest estimate.

The range of home range sizes overlaps with a study conducted for 11 muskoxen in Bathhurst, Devon, and Cornwallis (233 - 2494 km2; Anderson and Ferguson, 2016). They used minimum convext polygons with up to three years of data for each muskox.

```{r, fig.height=4}
#| label: musk_var_cv
#| dependson: "load-data"
#| echo: FALSE

# musk_7011 <- musk_move %>%
#   filter(individual.local.identifier == 7011) %>%
#   mutate(datetime = as.POSIXct(timestamp))
# musk_move_cv <- musk_7011 %>%
#   bind_rows(musk_7011 %>% 
#               filter(datetime < min(datetime)+(365/2)*24*60*60) %>%
#               mutate(individual.local.identifier = 7011.1)) %>%
#   bind_rows(musk_7011 %>% 
#               filter(datetime < min(datetime)+(365)*24*60*60) %>%
#               mutate(individual.local.identifier = 7011.2)) %>%
#   bind_rows(musk_7011 %>% 
#               filter(datetime < min(datetime)+(365*1.5)*24*60*60) %>%
#               mutate(individual.local.identifier = 7011.3))
# musk_tel_cv <- as.telemetry(musk_move_cv)
# musk_var_cv <- lapply(musk_tel_cv, variogram, fast = FALSE)
# for (i in 1:length(musk_var_cv)){plot(musk_var_cv[i], fraction = 0.65);title(musk_var_cv[[i]]@info$identity)}
# 
# musk_var_cv_mod <- lapply(musk_var_cv, variogram.fit, interactive = FALSE)
# fit_cv <- mapply(function(x,y){ctmm.select(x,y,verbose = TRUE,cores = 3)},musk_tel_cv,musk_var_cv_mod)
# 
# akde <- list(akde(musk_tel_cv[[1]],fit_cv[,1][[1]]),
#              akde(musk_tel_cv[[2]],fit_cv[,2][[1]]),
#              akde(musk_tel_cv[[3]],fit_cv[,3][[1]]),
#              akde(musk_tel_cv[[4]],fit_cv[,4][[1]]))
# plot(musk_tel_cv[[1]],UD=akde[[2]])
# plot(musk_tel_cv[[1]],UD=akde[[3]])
# plot(musk_tel_cv[[1]],UD=akde[[4]])
# plot(musk_tel_cv[[1]],UD=akde[[1]])

```

---
title: "Seasonal Range"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
execute: 
  warning: false
  error: false
---

```{r}
#| label: load-packages
#| include: false

library(sf)
library(here)
library(adehabitatHR)
library(tidyverse)

```

```{r}
#| label: load-data
#| echo: false

musk_collar_filt <- readRDS(here("data/processed/musk_collar_filt.rds"))
musk_season <- readRDS(here("data/processed/musk_season.rds")) 
musk_collar_cal <- readRDS(here("data/processed/musk_collar_cal.rds"))
```

Using Brownian Bridge Movement Model from the adehabitatHR package to estimate seasonal ranges for each muskoxen. Summer and winter/calving are separated based on presence of snow and movement behaviours (see Movement Patterns). First let's look at how long each season is for each muskoxen.

```{r, fig.height=6, fig.width=8}
#| label: season_length
#| dependson: "load-data"

musk_season_length <- musk_season %>%
  mutate(date = as.Date(datetime),
         year_min = ifelse(season=="Winter"&month<=5,year-1,year),
         season = factor(season, 
                         levels = c("Summer", "Winter", "Calving"))) %>%
  drop_na(season) %>%
  group_by(Id_Number, year_min, season) %>%
  mutate(seas_length = max(date)-min(date)) %>%
  ungroup() 

musk_season_length %>%
  sf::st_drop_geometry() %>%
  distinct(Id_Number, year_min, season, seas_length) %>%
  ggplot(aes(x = Id_Number, y = seas_length, colour = factor(year_min))) +
  geom_point(size = 3) +
  geom_hline(
    data = tibble(season = factor(c("Summer", "Winter", "Calving")),
                    y = c(120,90,30)),
    aes(yintercept = y)) +
  facet_wrap(~season)

musk_season_length %>%
  st_drop_geometry() %>%
  group_by(Id_Number, season, year_min) %>%
  summarise(min = min(as.Date(date)),
            max = max(as.Date(date))) %>%
  ggplot(aes(y = Id_Number, xmin = min, xmax = max, colour = season)) +
  geom_linerange(linewidth = 2) +
  scale_x_date()
```

Some seasons are pretty short, due to the season overlapping the start or end of the monitoring period for that individuals. Let's start by setting a cut-off for each season to be included in this analysis. Since muskoxen are moving around a lot in the summer, we'll specify that we want relocations from the full season. There were two muskoxen that had their collars come off in August, so these were not considered when estimating summer home ranges. We captured full calving seasons in all but one instance (708 in 2008). Collars were typically deployed and removed during the winter, so there were several instances where we did not have relocations for the full winter season. For now we will use cutoff of three months (90 days). Winter typically lasts from end of October to our cutoff of April 1st. This ensures roughly 60% of the season is included for winter. Later we'll compare different lengths of data to see the effect on home range estimates.

```{r}
#| label: musk_ltraj
#| dependson: "season_length"

musk_collar_seas <- musk_season_length %>%
  ### create groupings for muskoxen (7012 and 7013 overlap but the rest are separated)
  mutate(range_id = str_c(Id_Number,"_",year_min,"_",season),
         group = ifelse(Id_Number %in% c(7012,7013),
                        "7012_13", str_c(Id_Number))) %>%
  group_by(Id_Number) %>%
  mutate(max_date = max(date),
         min_date = min(date)) %>%
  group_by(range_id) %>%
  mutate(flag = ifelse(max(date)==max_date|min(date)==min_date,1,0)) %>%
  ungroup() %>%
  filter(flag == 0|
           season == "Calving"&seas_length >= 28|
           season == "Winter"&seas_length >=90|
           season == "Summer"&seas_length >= 120) %>%
  ungroup() %>%
  mutate(range_id = factor(range_id)) %>%
  arrange(range_id)

xy <- musk_collar_seas %>%
  sf::st_transform("+proj=utm +zone=9") %>%
  sf::st_coordinates()
musk_ltraj <- adehabitatLT::as.ltraj(xy = xy, date = musk_collar_seas$datetime, id = musk_collar_seas$range_id)

```

Our first step towards creating seasonal home ranges is to determine GPS accuracy using stationary GPS data. We can use data from collar 707 as this collar was confirmed to have released early. We will calculate the standard deviation of the euclidean distances to estimate GPS accuracy. This will be used as the sig2 parameter in our models and can be used to help estimate the other model parameter, sig1, which is related to home range size.

We can then fit movement models for each muskox for each season and estimate utilization distributions. From these distributions we can compare size and overlap between seasons, years, and muskoxen.

Below we plot an example seasonal range as well as a comparison between 90% seasonal ranges and 50% core seasonal ranges for each season.

```{r}
#| label: sig2

sig2 <- musk_collar_cal %>%
  sf::st_transform("+proj=utm +zone=9") %>%
  filter(Id_Number == 707) %>%
  mutate(x = sf::st_coordinates(geometry)[,1],
         y = sf::st_coordinates(geometry)[,2]) %>%
  st_drop_geometry() %>%
  group_by(Id_Number) %>%
  ### calculate distances to estimate euclidean standard deviation (telemetry error)
  mutate(mean_x = mean(x),
         mean_y = mean(y),
         distance = sqrt((x-mean_x)^2+(y-mean_y)^2)) %>%
  summarise(sd = sd(distance)) %>%
  pull(sd) %>%
  mean()


```

```{r}
#| label: sig1
#| dependson: "sig2"

sig1 <- liker(musk_ltraj, 
              sig2 = sig2, 
              rangesig1 = c(0.1,20),
              plotit = FALSE)

```

```{r}
#| label: musk_bb
#| dependson: "sig1"

bbox <- musk_collar_seas %>%
  sf::st_transform("+proj=utm +zone=9") %>%
  mutate(x = sf::st_coordinates(geometry)[,1],
         y = sf::st_coordinates(geometry)[,2]) %>%
  st_drop_geometry()  %>%
  group_by(group) %>%
  summarise(xmin = min(x),
         xmax = max(x),
         ymin = min(y),
         ymax = max(y))

sp_pixels = list()
for(i in 1:nrow(bbox)){
  coords <- expand.grid(x = seq(bbox$xmin[i]-5000,bbox$xmax[i]+5000,100),
                      y = seq(bbox$ymin[i]-5000,bbox$ymax[i]+5000,100))
  sf_points <- st_as_sf(coords, coords = c("x", "y"), crs = "+proj=utm +zone=9")
  sp_points <- as(sf_points, "Spatial")
  sp_pixels[[bbox$group[i]]] <- SpatialPixels(sp_points)
}

musk_bb <- list()
lookup <- musk_collar_seas %>%
  st_drop_geometry() %>%
  dplyr::select(range_id, group) %>%
  distinct()
# for(i in 1:length(sig1)){
#   musk_bb[[i]] <- kernelbb(musk_ltraj[i],
#                            sig1 = sig1[[i]]$sig1,
#                            sig2 = sig2,
#                            grid=sp_pixels[[lookup$group[i]]])
# }
# saveRDS(musk_bb, here("data/processed/musk_bb.rds"))
musk_bb <- readRDS(here("data/processed/musk_bb.rds"))  


```

Let's take a look at the contour plots for each individual to make sure they look okay:

```{r, fig.height=6, fig.width=8}
#| label: musk_seascont
#| dependson: "musk_bb"
#| echo: false

musk_seascont <- map(musk_bb, function(x){getverticeshr(x,95) %>% st_as_sf()}) %>%
  list_rbind() %>%
  st_as_sf() %>%
  mutate(range_id = unique(musk_collar_seas$range_id)) %>%
  left_join(musk_collar_seas %>% 
              sf::st_drop_geometry() %>%
              dplyr::select(range_id,Id_Number,year_min,season) %>% 
              distinct()) %>%
  mutate(season = factor(season, levels = c("Summer","Winter","Calving")))
basemaps::set_defaults(map_service = "osm", map_type = "topographic")
for(i in unique(musk_collar_seas$Id_Number)){
  data <- musk_seascont %>%
    filter(Id_Number == i) %>%
    st_set_crs("+proj=utm +zone=9") %>%
    st_transform(3857) %>%
    arrange(season)
  plot <- data %>%
    ggplot() +
    basemaps::basemap_gglayer(data) +
    coord_sf() +
    scale_fill_identity() +
    ggnewscale::new_scale_fill() +
     # geom_sf(data = musk_collar_seas %>% 
     #           filter(Id_Number == 7010) %>%
     #           sf::st_transform("+proj=utm +zone=9"),
     #         alpha = 0.5) +
    geom_sf(aes(fill = interaction(factor(year_min),season)),
            colour = NA,
            alpha = 1) +
    scale_fill_viridis_d()+
    labs(title = str_c(i), fill = "Season Year")
  print(plot)
}


```

These look reasonable. Let's also plot the seasonal range sizes to compare between individuals and years:

```{r, fig.height=6, fig.width=10}
#| label: musk_seasrange
#| dependson: "musk_bb"
#| echo: false

musk_seasrange <- map(musk_bb, function(x){kernel.area(x,percent = c(50,95),unout = "km2") %>% as_tibble_row()}) %>%
  list_rbind() %>%
  set_names(c("range_50", "range_95")) %>%
  mutate(range_id = unique(musk_collar_seas$range_id)) %>%
  left_join(musk_collar_seas %>% 
              sf::st_drop_geometry() %>%
              dplyr::select(range_id,Id_Number,year_min,season) %>% 
              distinct())

musk_seasrange %>%
  ggplot(aes(x = Id_Number, y = range_95, colour = factor(year_min))) +
  geom_point(size = 3) +
  facet_wrap(~season, scales = "free")
musk_seasrange %>%
  ggplot(aes(x = Id_Number, y = range_50, colour = factor(year_min))) +
  geom_point(size = 3) +
  facet_wrap(~season, scales = "free")
```

There are some large ranges in 2009, particularly for 7011 (summer and calving), 7010 winter, 7012 calving, and 708 winter.

Interestingly, summer home range sizes are fairly consistent within individuals and between the two individuals (7012 and 7013) that overlap in space use. Perhaps the land cover or topography of the area plays a large role in determining home range size. This is not the case with winter or calving range, which show a lot of variability within individuals, but appear to be similar within years. This suggests a role of weather (e.g. snow depth) in determining winter and calving range size, though differences in topography and land cover could still account for the variation seen in some years (e.g. 2009). Let's compare these differences using mean absolute percentage differences for range sizes

```{r, fig.height=6, fig.width=10}
#| label: musk_seasvar
#| dependson: "musk_seasrange"
#| echo: false

musk_seasrange %>%
  group_by(Id_Number, season) %>%
  mutate(mean_id = mean(range_95),
         pdiff_id = abs(mean_id - range_95)/mean_id) %>%
  group_by(year_min, season) %>%
  mutate(mean_year = mean(range_95),
         pdiff_year = abs(mean_year - range_95)/mean_year) %>%
  group_by(season) %>%
  summarise(mean_percent_diff_id = round(sum(pdiff_id)/sum(pdiff_id>0),2),
            mean_percent_diff_year = round(sum(pdiff_year)/sum(pdiff_year>0),2)) %>%
  knitr::kable()

```

## Range Overlap

We will now use the `kerneloverlap` function to investigate the degree of overlap between seasonal ranges within the same year and between years. This function implements a number of overlap metrics that are well suited to measuring overlap of utilization distributions. Consequently, we can explore not only overlap between contours of a given size, but also the degree to which high probability regions of ranges overlap. For example the `PHR` function calculates the probability of an individual from one home range being found in another home range.

```{r}
#| label: musk_overlap
#| dependson: "musk_bb"


overlap_func <- function(group){
  rows = which(lookup$group == group)
  temp <- musk_bb[rows]
  class(temp) <- "estUDm"
  poverlap <- kerneloverlaphr(temp, method = "HR") %>%
    as_tibble(.name_repair = "unique") %>%
    setNames(lookup$range_id[rows]) %>%
    mutate(range_id = lookup$range_id[rows],
           metric = "Percent Overlap") %>%
    pivot_longer(1:length(rows), 
                 names_to = "range_id_compare", 
                 values_to = "value")
  volume <- kerneloverlaphr(temp, method = "PHR") %>%
    as_tibble(.name_repair = "unique") %>%
    setNames(lookup$range_id[rows]) %>%
    mutate(range_id = lookup$range_id[rows],
           metric = "Volume of UD") %>%
    pivot_longer(1:length(rows), 
                 names_to = "range_id_compare", 
                 values_to = "value") %>%
    mutate(value = round(value,3))
  overlap <- bind_rows(poverlap,volume)  
}

musk_overlap <- map(unique(lookup$group), function(.x){overlap_func(.x)}) %>%
  list_rbind() %>%
  filter(range_id != range_id_compare) %>%
  left_join(musk_collar_seas %>% 
              st_drop_geometry() %>%
              dplyr::select(range_id, Id_Number, year_min, season) %>%
              distinct(),
            by = c("range_id_compare" = "range_id")) %>%
  rename(Id_Number_compare = Id_Number,
         year_min_compare = year_min,
         season_compare = season) %>%
  left_join(musk_collar_seas %>% 
              st_drop_geometry() %>%
              dplyr::select(range_id, Id_Number, year_min, season) %>%
              distinct())
```

Let's plot the overlap metrics. The first graph shows the percent overlap of an individual's 95% home range contour from different seasons and years. Home rqanges represented by columns are compared against home ranges represented by rows and separated by different year lags.

The second graph depicts the probability that an individual with a utilization distribution represented by the row is found in the 95% home range contour represented by the column.

```{r}
#| label: musk_overlap_plot
#| dependson: "musk_overlap"
#| echo: false

musk_overlap %>%
  filter(metric == "Percent Overlap",
         Id_Number == Id_Number_compare) %>%
  mutate(year_diff = year_min_compare - year_min) %>%
  ggplot(aes(x = factor(year_diff), y = value)) +
  geom_boxplot() +
  facet_grid(season~season_compare) +
  ylab("Percent overlap of home ranges") +
  xlab("Year lag")

musk_overlap %>%
  filter(metric == "Volume of UD",
         Id_Number == Id_Number_compare) %>%
  mutate(year_diff = year_min_compare - year_min) %>%
  ggplot(aes(x = factor(year_diff), y = value)) +
  geom_boxplot() +
  facet_grid(season~season_compare) +
  ylab("Probability of finding individual in home range") +
  xlab("Year lag")
```

A few patterns are clear from these graphs:

-   Summer home ranges shared \~40% of their area across years.

-   Winter and calving home ranges typically shared a high overlap with summer ranges, especially those from the same year. However, there was a lot of variation in this overlap, with some seasons having near 100% overlap and some having very little overlap.

-   Calving season ranges shared a high overlap with the winter season range immediately preceding it, but there was considerable variation in this overlap.

-   Winter and calving season ranges showed negligible overlap across years, suggesting low seasonal range fidelity.

Lastly, let's look at the comparison of seasonal ranges between muskox 7012 and 7013, which were the only muskoxen that overlapped in space and time.

```{r}
#| label: musk_overlap_plot2
#| dependson: "musk_overlap"
#| echo: false

musk_overlap %>%
  filter(metric == "Percent Overlap",
         Id_Number != Id_Number_compare,
         season == season_compare,
         year_min == year_min_compare) %>%
  mutate(year_diff = year_min_compare - year_min) %>%
  ggplot(aes(x = season, y = value)) +
  geom_boxplot() +
  ylim(0,1) +
  ylab("Percent overlap of home ranges") +
  xlab("Season")
```

The highest overlap is during the summer. These muskoxen do not appear to share large areas during the winter or calving season and despite being found in the same location occasionally, they appeared to wander on their own for most of the time they were collared.

## Check Data Cutoffs

Let's first check to see if our data cutoffs are appropriate. We'll subset our datasets for winter to look at the individual-season combinations with relocations covering the full season. We'll then calculate home ranges for the full dataset and data set with 30,60,90 days removed from the start or end of the time series. We'll then look at percent overlap between the home ranges. We'll consider the subset to be a good approximation of the seasonal home range if the percent overlap is \>80%.

```{r}
#| label: cut_check

temp <- musk_season_length %>%
  mutate(range_id = str_c(Id_Number,"_",year_min,"_",season)) %>%
  st_drop_geometry() %>%
  group_by(range_id, season) %>%
  summarise(min = min(date),
            max = max(date),
            seas_length = median(seas_length))

top_seas <- musk_collar_seas %>%
  distinct(range_id, season, month) %>%
  group_by(range_id) %>%
  filter(season == "Winter",
         n()>=5) %>%
  pull(range_id)
  
cut_check <- musk_collar_seas %>%
  filter(range_id %in% top_seas)
cut_check_30beg <- cut_check %>%
  group_by(range_id) %>%
  arrange(datetime) %>%
  filter(date < (max(date)-30))
  

xy <- musk_collar_seas %>%
  sf::st_transform("+proj=utm +zone=9") %>%
  sf::st_coordinates()
musk_ltraj <- adehabitatLT::as.ltraj(xy = xy, date = musk_collar_seas$datetime, id = musk_collar_seas$range_id)
```

## Determinants of Home Range Size

Now we will look to model variables that are likely to influence the size of home ranges. Since we have few observations per season (sample size 12 - 15), we want 1 - 2 explantory variables per season model. Average snow cover during the winter and calving seasons may impact home range size, with individuals being restricted from moving large distances. During the summer, the percent of landcover suitable for foraging or number of foraging patches may impact the size of home ranges with larger home ranges occurring when individuals need to travel more often or further to get to foraging areas. Other barriers to movement may also affect home range size, including ridges and lakes.

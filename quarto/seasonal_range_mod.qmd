---
title: "Home Range Modelling"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
execute: 
  warning: false
  error: false
---

```{r}
#| label: load-packages
#| include: false

library(sf)
library(here)
library(terra)
library(tidyverse)
```

```{r}
#| label: load-data
#| echo: false

musk_collar_filt <- readRDS(here("data/processed/musk_collar_filt.rds"))
musk_seascont <- readRDS(here("output/musk_seascont.rds"))
musk_seascontwint <- readRDS(here("output/musk_seascontwint.rds"))
```

Now we will look to model variables that are likely to influence the size of home ranges. Since we have few observations per season (sample size 12 - 15), we want 1 - 2 explantory variables per season model. Average snow cover during the winter and calving seasons may impact home range size, with individuals being restricted from moving large distances. During the summer, the percent of landcover suitable for foraging or number of foraging patches may impact the size of home ranges with larger home ranges occurring when individuals need to travel more often or further to get to foraging areas. Other barriers to movement may also affect home range size, including ridges and lakes.

# Home Range Size Models

First we will examine differences in the home range over time for each muskoxen.

Let's start by calculating average snow depth within each winter and calving home range. To be consistent across years and individuals, we will estimate mean snow depth across the same period ranging from the start November to the end of March for winter and March for calving. These periods roughly correspond to the shortest seasons across the data and include the most extreme snow depths.

## Winter Season Model

We'll start by estimating average snow depth for winter and running model with muskox ID as a random effect. For this model, we will use the winter home range estimates that were limited to the months January-March to control for season length and to focus on the periods of highest snow depth.

```{r}
#| label: musk_wint
#| dependson: "load-data"

sm_crop <- terra::rast(here("data/processed/sm_crop.nc"), 
                       drivers="NETCDF")
daterange <- seq( as.Date("2007-01-01"), as.Date("2012-12-31"), by="+1 day")

snow_wint_func <- function(id, range){
  year <- musk_seascontwint %>%
    filter(range_id == !!id, range == !!range) %>%
    pull(year_min)
  zones <- rasterize(musk_seascontwint %>%
                           filter(range_id == !!id, range == !!range) %>%
                      sf::st_transform(terra::crs(sm_crop)) %>%
                        vect(),
                    sm_crop, touches = TRUE)
  rowids <- which(month(daterange)>=11&year(daterange)==year|
          month(daterange)<=3&year(daterange)==(year+1))
  zonal(sm_crop[[rowids]], zones, "mean", wide = FALSE) %>%
    mutate(date = daterange[rowids], 
           range_id = !!id,
           range = !!range) %>%
    select(-layer, -zone)
}

musk_wint_home <- musk_seascontwint %>%
  filter(season == "Winter",
         range == "home",
         seas_length > 115
         ) %>%
  pull(range_id) %>%
  map(function(.x){snow_wint_func(.x, "home")}) %>%
  list_rbind() 
musk_wint_core <- musk_seascontwint %>%
  filter(season == "Winter",
         range == "core",
         seas_length > 115
         ) %>%
  pull(range_id) %>%
  map(function(.x){snow_wint_func(.x, "core")}) %>%
  list_rbind() 
musk_wint <- bind_rows(musk_wint_home, musk_wint_core)
```

```{r}
#| label: wint_mod
#| dependson: "musk_wint"

musk_wint_sum <- musk_wint %>%
  group_by(range_id, range) %>%
  summarise(snow_depth = mean(value)) %>%
  left_join(musk_seascontwint %>%
              select(range_id, range, year_min, seas_length, area, Id_Number))
saveRDS(musk_wint_sum, here("output/musk_wint_sum.rds"))

musk_wint_sum %>%
  ggplot(aes(x = snow_depth, y = area, colour = Id_Number)) +
  geom_point(size = 3) +
  scale_y_log10() +
  facet_wrap(~range, scales = "free")

wint_home_mod <- nlme::lme(log(area)~scale(snow_depth), random=~1|Id_Number,
                 data = musk_wint_sum %>% filter(range == "home"))
summary(wint_home_mod)
MuMIn::r.squaredGLMM(wint_home_mod)

wint_core_mod <- nlme::lme(log(area)~scale(snow_depth), random=~1|Id_Number, 
                 data = musk_wint_sum %>% filter(range == "core"))
summary(wint_core_mod)
MuMIn::r.squaredGLMM(wint_core_mod)


# set.seed(5)
# wint_home_brms <- brms::brm(log(area)~scale(snow_depth) + (1|Id_Number), 
#                  data = musk_wint_sum %>% filter(range == "home"),
#                  family = "gaussian",
#                  chains = 3,
#                  cores = 3,
#                  iter = 4000,
#                  control = list(adapt_delta = 0.99))
# summary(wint_home_brms)
# set.seed(5)
# wint_core_brms <- brms::brm(log(area)~scale(snow_depth) + (1|Id_Number), 
#                  data = musk_wint_sum %>% filter(range == "core"),
#                  family = "gaussian",
#                  chains = 3,
#                  cores = 3,
#                  iter = 4000,
#                  control = list(adapt_delta = 0.99))
# summary(wint_core_brms)

```

Clearly, there is a negative relationship between snow depth and winter range size: as snow depth increases, the size of winter home ranges tends to decrease. In addition, each muskox with multiple years of data had a smaller winter home range in the year with deeper snow.

It's also worth noting that the three instances with the deepest snow all occurred in 2010, but all three home ranges occurred in spatially distinct areas. There could be another weather variable correlated with years that is responsible for the relationship, but snow depth seems the most plausible given previous research. Also, if we include the three winter home ranges that were only calculated for part of the season (due to starting or ending mid winter), they fit the trend as 2007 and 2011 were also years with deeper snow.

## Calving Season Model

Next we will look at the same relationship for the calving seasons:

```{r}
#| label: musk_calv
#| dependson: "load-data"

sm_crop <- terra::rast(here("data/processed/sm_crop.nc"), 
                       drivers="NETCDF")
daterange <- seq( as.Date("2007-01-01"), as.Date("2012-12-31"), by="+1 day")
snow_calv_func <- function(id, range){
  year <- musk_seascont %>%
    filter(range_id == !!id, range == !!range) %>%
    pull(year_min)
  zones <- rasterize(musk_seascont %>%
                           filter(range_id == !!id, range == !!range) %>%
                      sf::st_transform(terra::crs(sm_crop)) %>%
                        terra::vect(),
                    sm_crop, touches = TRUE)
  rowids <- which(month(daterange)==4&year(daterange)==year)
  zonal(sm_crop[[rowids]], zones, "mean", wide = FALSE) %>%
    mutate(date = daterange[rowids], 
           range_id = !!id,
           range = !!range) %>%
    select(-layer, -zone)
}

musk_calv_home <- musk_seascont %>%
  filter(season == "Calving",
         range == "home"
         ) %>%
  pull(range_id) %>%
  map(function(.x){snow_calv_func(.x, "home")}) %>%
  list_rbind() 
musk_calv_core <- musk_seascont %>%
  filter(season == "Calving",
         range == "core"
         ) %>%
  pull(range_id) %>%
  map(function(.x){snow_calv_func(.x, "core")}) %>%
  list_rbind() 
musk_calv <- bind_rows(musk_calv_home, musk_calv_core)
```

```{r}
#| label: calv_mod
#| dependson: "musk_calv"

musk_calv_sum <- musk_calv %>%
  group_by(range_id, range) %>%
  summarise(snow_depth = mean(value)) %>%
  left_join(musk_seascont %>%
              select(range_id, range, year_min, seas_length, area, Id_Number)) 

musk_calv_sum %>%
  ggplot(aes(x = snow_depth, y = log(area), colour = Id_Number)) +
  geom_point(size = 3) +
  facet_wrap(~range, scales = "free")

calv_home_mod <- lme4::lmer(log(area)~scale(snow_depth) + (1|Id_Number), 
                 data = musk_calv_sum %>% filter(range == "home"))
summary(calv_home_mod)
MuMIn::r.squaredGLMM(calv_home_mod)

calv_core_mod <- lme4::lmer(log(area)~scale(snow_depth)+(1|Id_Number), 
                 data = musk_calv_sum %>% filter(range == "core"))
summary(calv_core_mod)

```

There is still a negative relationship present between snow depth and calving home range size, but it is no longer significant. Given that we do not actually know which females had calves every year, the presence/absence of calves could have a large impact on the area traversed during this time. For instance, we know that muskox 7010 in 2009 was not seen with a calf during any of the surveys and happens to have the largest home range size during the calving season. Similarly, muskox 7012 in 2009, which had the second largest home range, was not with a calf until May at the earliest. This means 7012 was not restricted from moving around during the deepest parts of the calving season. Removing these two points makes for a much stronger relationship; however this pattern is not universal as there were other muskoxen in 2008 and 2009 that were without calves during April and still had small home ranges. The fact that these muskoxen travel in groups needs to be taken into consideration as well because even if the collared muskoxen does not have a calf, its movements may still be restricted by the movements of the group. Most groups observed in 2008 and 2009 had at least one calf during the calving season. One exception was 7010 in 2009, which was observed to be in a group with a calf at the beginning of April but not in May.

## Summer Season Model

For the summer season, length of season and forage availability are likely to be more important for determining home range size than weather conditions (though extreme heat and bugs in the summer could impact movement as well). Like winter and calving season models, we will stick with one predictor variable to avoid issues with overfitting. In this case, we will look at the percentage of shrubland and grassland within each home range, with the hypothesis that areas with less shrubland/grassland will mean muskoxen will need to travel further to meet their energy demands and consequently have larger home ranges.

We'll start by loading the land cover data and calculating percent cover.

```{r}
#| label: musk_sum
#| dependson: "load-data"

lc_2010_crop <- terra::rast(here("data/processed/lc_2010_crop.tif"))
lc_atts <- readRDS(here("data/processed/lc_atts.rds"))
### land cover ids 8 and 10 coorespond to the land covers of interest
lcc_func <- function(id, range){
  points <- musk_seascont %>%
    filter(range_id == !!id, range == !!range) %>%
    sf::st_transform(terra::crs(lc_2010_crop))
  lc_2010_crop2 <- terra::crop(lc_2010_crop, points)
  zones <- rasterize(points %>%
                        terra::vect(),
                    lc_2010_crop2, touches = TRUE)
  ct <- crosstab(c(zones, lc_2010_crop2)) %>%
    as_tibble() %>%
    mutate(range_id = !!id,
           range = !!range)
}

musk_sum_home <- musk_seascont %>%
  filter(season == "Summer",
         range == "home") %>%
  pull(range_id) %>%
  map(function(.x){lcc_func(.x, "home")}) %>%
  list_rbind() 
musk_sum_core <- musk_seascont %>%
  filter(season == "Summer",
         range == "core") %>%
  pull(range_id) %>%
  map(function(.x){lcc_func(.x, "core")}) %>%
  list_rbind() 
musk_sum <- bind_rows(musk_sum_home, musk_sum_core)
```

```{r}
#| label: sum_mod
#| dependson: "musk_sum"

musk_sum_sum <- musk_sum %>%
  mutate(for_lc = ifelse(Canada2010%in%c(8,10,11,12,13),1,0)) %>%
  group_by(range_id, range) %>%
  summarise(total = sum(n),
            for_tot = sum(n*for_lc),
            for_per = for_tot/total) %>%
  left_join(musk_seascont %>%
              select(range_id, range, year_min, seas_length, area, Id_Number)) 

musk_sum_sum %>%
  ggplot(aes(x = for_per, y = log(area), colour = Id_Number)) +
  geom_point(size = 3) +
  facet_wrap(~range, scales = "free")

sum_home_mod <- nlme::lme(log(area)~scale(for_per), random=~1|Id_Number, 
                 data = musk_sum_sum %>% filter(range == "home"))
summary(sum_home_mod)
sum_core_mod <- nlme::lme(log(area)~scale(for_per), random=~1|Id_Number, 
                 data = musk_sum_sum %>% filter(range == "core"))
summary(sum_core_mod)
```

A lot of the variation in home range size is explained by differences in individual muskoxen; i.e. summer home ranges are similar in size across seasons, and we already know that they share high overlap across years.

The relationship with forage percent cover is in opposition to the original hypothesis. Larger home ranges appear to be correlated with a larger percent of forage land cover, though not significant. Maybe if there is a high density of foraging areas, it makes sense to target foraging areas that haven't been visited lately so there is a maximal amount of forage. For individuals in areas with low density of foraging areas, maybe it makes more sense to not travel long distances to new foraging patches and just stay with the ones that are nearby. By this logic, we might expect the area immediately surrounding home ranges to have a low density of forage areas.

Before we compare the areas inside and outside of summer home ranges lets look to see if season length has any effect on summer season size.

```{r}
#| label: sum_length_mod
#| dependson: "load-data"

musk_seascont %>%
  filter(season == "Summer") %>%
  ggplot(aes(x = seas_length, y = log(area), colour = Id_Number)) +
  geom_point(size = 3) +
  facet_wrap(~range, scales = "free")

sum_home_length_mod <- nlme::lme(log(area)~scale(seas_length), 
                                 random=~1|Id_Number, 
                                 data = musk_seascont %>%
                                   filter(season == "Summer",
                                          range == "home"))
summary(sum_home_length_mod)
sum_core_length_mod <- nlme::lme(log(area)~scale(seas_length), 
                                 random=~1|Id_Number, 
                                 data = musk_seascont %>%
                                   filter(season == "Summer",
                                          range == "core"))
summary(sum_core_length_mod)
```

```{r}
#| label: mod_coef
#| echo: FALSE
confintz <- function(mod, seas, cont){
  conf_list <- nlme::intervals(mod) 
  conf_tidy <- broom.mixed::tidy(mod, conf.int = TRUE) %>%
    select(effect, group, term, estimate, conf.low, conf.high) %>%
    mutate(conf.low = ifelse(term == "sd_Observation",
                             conf_list$sigma["lower"],
                             conf.low),
           conf.high = ifelse(term == "sd_Observation",
                             conf_list$sigma["upper"],
                             conf.high),
           season = seas,
           contour = cont)
}
confintz2 <- function(mod, seas, cont){
  confs <- confint(mod) %>%
    as_tibble() %>%
    rename(conf.low = `2.5 %`,
           conf.high = `97.5 %`) %>%
    mutate(term = c("sd__(Intercept)", "sd__Observation",
                    "(Intercept)", "scale(snow_depth)")) 
  conf_tidy <- broom::tidy(mod) %>%
    mutate(season = seas,
           contour = cont) %>%
    left_join(confs) %>%
    select(effect, group, term, estimate, conf.low, conf.high, season, contour)
}
mod_coef <- confintz(wint_home_mod, "Winter", "95%") %>%
  bind_rows(confintz(wint_core_mod, "Winter", "50%")) %>%
  bind_rows(confintz(sum_home_length_mod, "Summer", "95%")) %>%
  bind_rows(confintz(sum_core_length_mod, "Summer", "50%")) %>%
  bind_rows(confintz2(calv_home_mod, "Calving", "95%")) %>%
  bind_rows(confintz2(calv_core_mod, "Calving", "50%"))

saveRDS(mod_coef, here("output/mod_coef.rds"))
```

There is no significant relationship. If anything, there is a slight negative trend with season length. In fact, as we observed previously, summer home ranges are fairly consistent in size within individuals despite differences in season length across years (see 7011, 7012, 7013, and 708 in graph above), meaning our previous finding of the availability of foraging patches is probably more important.

# Home Range Extent Models

Next we will compare landscape variables inside and outside of home ranges to better understand hoem range extent.

## Summer Season Model

This part of the Sahtu region is quite rough terrain with prominent mountains. If muskox home ranges are limited in size by topography, it would be more difficult to test for it. It might be more informational to compare topography or land cover within the home range with topography and land cover immediately surrounding the home range. If land cover has a lower proportion of foraging areas or topography is rougher outside of the home range, then maybe these factors are responsible for the size of the home ranges.

We will use a buffer of 7 km to start. This buffer represents the average distance that muskoxen travel between foraging patches, so it is expected that muskoxen could realistically travel to these areas.

```{r}
#| label: musk_sum_buf
#| dependson: "load-data"
#| echo: false

lc_2010_crop <- terra::rast(here("data/processed/lc_2010_crop.tif"))
lcc_func3 <- function(id, buff){
  points <- musk_seascont %>%
    filter(range_id == !!id, range == "home") %>%
    st_buffer(buff)  %>%
    st_difference(musk_seascont %>%
                    filter(range_id == !!id, range == "home")) %>%
    mutate(group = "buffer") %>%
    bind_rows(musk_seascont %>%
                filter(range_id == !!id, range == "home") %>%
                mutate(group = "home range")) %>%
    sf::st_transform(terra::crs(lc_2010_crop))
  lc_2010_crop2 <- terra::crop(lc_2010_crop, points)
  zones <- rasterize(points %>%
                        terra::vect(),
                    lc_2010_crop2, field = "group", touches = TRUE)
  ct <- crosstab(c(zones, lc_2010_crop2)) %>%
    as_tibble() %>%
    mutate(range_id = !!id,
           buffer = buff)
}

musk_sum_buf <- musk_seascont %>%
  filter(season == "Summer", range == "home") %>%
  pull(range_id) %>%
  map(function(.x){bind_rows(lcc_func3(.x, 7000),
                             lcc_func3(.x, 3500),
                             lcc_func3(.x, 14000))}) %>%
  list_rbind() 
```

```{r}
#| label: sum_mod_buf
#| dependson: "musk_sum_buf"

musk_sum_sum3 <- musk_sum_buf %>%
  mutate(for_lc = ifelse(Canada2010%in%c(8,10,11,12,13),1,0)) %>%
  # ### remove water land cover from calculation of total land cover
  # filter(Canada2010 != 18) %>%
  group_by(range_id, group, buffer) %>%
  summarise(total = sum(n),
            for_tot = sum(n*for_lc),
            for_per = for_tot/total) %>%
  left_join(musk_seascont %>%
              filter(range == "home") %>%
              select(range_id, year_min, seas_length, area, Id_Number)) %>%
  mutate(group = factor(group, levels = c("home range", "buffer")))

musk_sum_sum3 %>%
  filter(buffer == 7000|group!="home range") %>%
  mutate(group2 = str_c(buffer/1000," km ",group),
         group2 = ifelse(group == "home range",group,group2),
         group2 = factor(group2, 
                         levels = c("home range","3.5 km buffer",
                                    "7 km buffer", "14 km buffer"))) %>%
  ggplot(aes(x = group2, y = for_per)) +
  geom_boxplot() 

sum_mod1 <- lme4::glmer(cbind(for_tot, total-for_tot)~ group + 
                         (1|Id_Number/year_min), family = "binomial",
                       data = musk_sum_sum3 %>% filter(buffer == 7000))
sum_mod2 <- lme4::glmer(cbind(for_tot, total-for_tot)~ group + 
                         (1|Id_Number/year_min), family = "binomial",
                       data = musk_sum_sum3 %>% filter(buffer == 7000/2))
sum_mod3 <- lme4::glmer(cbind(for_tot, total-for_tot)~ group + 
                         (1|Id_Number/year_min), family = "binomial",
                       data = musk_sum_sum3 %>% filter(buffer == 7000*2))
summary(sum_mod1)
```

This result agrees with our hypothesis; the percent cover of foraging areas inside the home range is nearly double the percent cover in the immediate area surrounding the home range. This suggests that forage availability may limit muskox. Using smaller buffers of 2km and 5 km produced the same result. Given that many summer home ranges are bordered by lakes, the percent cover of lakes in the surrounding area could be responsible for some differences in forage cover, but even if we remove lakes from the calculation (not shown here), we still get a significant difference.

Let's do the same test but with terrain ruggedness index to assess if the terrain surrounding home ranges is more rough than the terrain within home ranges. We would expect that muskoxen would be less likely to travel through rough terrain

```{r}
#| label: musk_ter
#| dependson: "load-data"
#| echo: false

mrdtm_crop <- terra::rast(here("data/processed/mrdtm_crop.tif"))
lc_2010_crop <- terra::rast(here("data/processed/lc_2010_crop.tif"))
tri_crop <- terra::terrain(mrdtm_crop, "TRI")
tri_mask <- terra::mask(tri_crop,lc_2010_crop, maskvalues = 18)
tri_func <- function(id){
  points <- musk_seascont %>%
               filter(range_id == !!id, range == "home") %>%
               st_buffer(7000) %>%
               st_difference(musk_seascont %>%
                               filter(range_id == !!id, range == "home")) %>%
               mutate(group = "buffer") %>%
               bind_rows(musk_seascont %>%
                               filter(range_id == !!id, range == "home") %>%
                           mutate(group = "home range")) %>%
              sf::st_transform(terra::crs(tri_mask))
  tri_mask2 <- terra::crop(tri_mask, points)
  zones <- rasterize(points %>%
                        terra::vect(),
                    tri_mask2, field = "group", touches = TRUE)
  zonal(tri_mask2, zones, "mean", wide = FALSE, na.rm = TRUE) %>%
      mutate(range_id = !!id) %>%
      select(-layer)
}

musk_ter <- musk_seascont %>%
  filter(season == "Summer", range == "home") %>%
  pull(range_id) %>%
  map(function(.x){tri_func(.x)}) %>%
  list_rbind() %>%
  left_join(musk_seascont %>% 
              filter(range == "home") %>%
              st_drop_geometry() %>%
              select(range_id, Id_Number, year_min))
```

```{r}
#| label: ter_mod
#| dependson: "musk_ter"

musk_ter %>%
  ggplot(aes(x = group, y = value)) +
  geom_boxplot() 

sum_mod <- nlme::lme(value~group, random=~1|Id_Number/year_min, 
                 data = musk_ter)
summary(sum_mod)

```

If anything, it appears that the terrain is more rugged within home ranges though the difference is not huge (20% increase on average). Maybe the land cover they are interested in is more associated with rough terrain such as that close to the mountains.

## Winter Season Model

For the winter season model, we will compare snow depth. We'll use a buffer size equal to the average distance between the home range center and edges.

```{r}
#| label: musk_snow
#| dependson: "load-data"

dist_func <- function(id){
  poly <- musk_seascont %>%
    filter(range_id == !!id,
           range == "home") %>%
    select(geometry)
  distances <- poly %>% 
    st_cast("POINT") %>% 
    st_distance(st_centroid(poly)) %>%
    mean()
}
dist <- musk_seascont %>%
  filter(season == "Winter",
         range == "home") %>%
  pull(range_id) %>%
  map(function(.x){dist_func(.x)}) %>%
  unlist() %>%
  mean()

sm_crop <- terra::rast(here("data/processed/sm_crop.nc"), 
                       drivers="NETCDF")
daterange <- seq( as.Date("2007-01-01"), as.Date("2012-12-31"), by="+1 day")
snow_func <- function(id){
  year <- musk_seascont %>%
    filter(range_id == !!id) %>%
    pull(year_min)
  ### creating separate polygons because home ranges are small compared to raster
  ### resolution and so we need to use proportion of cell overlap in our
  ### calculation
  points_home <- musk_seascont %>%
               filter(range_id == !!id, range == "home") %>%
               mutate(group = "home range") %>%
              sf::st_transform(terra::crs(sm_crop))
  points_buff <- musk_seascont %>%
               filter(range_id == !!id, range == "home") %>%
               st_buffer(dist) %>%
               st_difference(musk_seascont %>%
                               filter(range_id == !!id, range == "home")) %>%
               mutate(group = "buffer") %>%
              sf::st_transform(terra::crs(sm_crop))
  zones_home <- rasterize(points_home %>%
                        terra::vect(),
                    sm_crop, cover = TRUE)
  sum_home <- global(zones_home, "sum", na.rm = TRUE)[,1]
  zones_buff <- rasterize(points_buff %>%
                        terra::vect(),
                    sm_crop, cover = TRUE)
  sum_buff <- global(zones_buff, "sum", na.rm = TRUE)[,1]
  rowids <- which(month(daterange)>=11&year(daterange)==year|
          month(daterange)<=3&year(daterange)==(year+1))
  temp <- global(sm_crop[[rowids]]*zones_home/sum_home,"sum",na.rm = TRUE)[,1]
  temp <- global(sm_crop[[rowids]]*zones_buff/sum_buff,"sum",na.rm = TRUE)[,1]
  tibble(
    snow_depth = global(sm_crop[[rowids]]*zones_home/sum_home,
                        "sum",na.rm = TRUE)[,1],
    date = daterange[rowids], 
    range_id = !!id,
    group = "home range") %>%
    bind_rows(
      tibble(
          snow_depth = global(sm_crop[[rowids]]*zones_buff/sum_buff,
                              "sum",na.rm = TRUE)[,1],
          date = daterange[rowids], 
          range_id = !!id,
          group = "buffer")
          )
}

musk_snow <- musk_seascont %>%
  filter(season == "Winter", range == "home", seas_length>115) %>%
  pull(range_id) %>%
  map(function(.x){snow_func(.x)}) %>%
  list_rbind() 
```

```{r}
#| label: snow_mod
#| dependson: "musk_snow"

musk_snow2 <- musk_snow %>%
  group_by(range_id, group) %>%
  summarise(snow_depth = mean(snow_depth)) %>%
  left_join(musk_seascont %>%
              filter(range == "home") %>%
              select(range_id, year_min, seas_length, area, Id_Number))

musk_snow2 %>%
  ggplot(aes(x = group, y = snow_depth)) +
  geom_boxplot() 

wint_mod <- nlme::lme(snow_depth~group, random=~1|Id_Number/year_min, 
                 data = musk_snow2)
summary(wint_mod)
```

Perhaps the snow cover data is too coarse resolution for this analysis. Some of the winter home ranges only take up less than 10% of a pixel in area so the calculation of snow depth inside and outside of the home ranges is based on a lot fo the same data. We can try to use elevation as a proxy instead.

```{r}
#| label: musk_elev
#| dependson: "musk_snow"

mrdtm_crop <- terra::rast(here("data/processed/mrdtm_crop.tif"))
elev_func <- function(id, buff){
  points <- musk_seascont %>%
    filter(range_id == !!id, range == "home") %>%
    st_buffer(buff) %>%
    st_difference(musk_seascont %>%
                    filter(range_id == !!id, range == "home")) %>%
    mutate(group = "buffer") %>%
    bind_rows(musk_seascont %>%
                filter(range_id == !!id, range == "home") %>%
                mutate(group = "home range")) %>%
    sf::st_transform(terra::crs(mrdtm_crop))
  mrdtm_crop2 <- terra::crop(mrdtm_crop, points)
  zones <- rasterize(points %>%
                       terra::vect(),
                     mrdtm_crop2, field = "group", touches = TRUE)
  zonal(mrdtm_crop2, zones, "mean", wide = FALSE, na.rm = TRUE) %>%
    mutate(range_id = !!id, 
           buffer = buff) %>%
    select(-layer)
}


musk_elev <- musk_seascont %>%
  filter(season == "Winter", range == "home", seas_length>115) %>%
  pull(range_id) %>%
  map(function(.x){bind_rows(elev_func(.x, dist),
                             elev_func(.x, dist/2),
                             elev_func(.x, dist*2))}) %>%
  list_rbind() %>%
  left_join(musk_seascont %>%
              filter(range == "home") %>%
              st_drop_geometry() %>%
              select(range_id, Id_Number, year_min)) %>%
  mutate(group = factor(group, levels = c("home range", "buffer")))
```

```{r}
#| label: elev_mod
#| dependson: "musk_elev"

musk_elev %>%
  ggplot(aes(x = group, y = value, group = interaction(Id_Number, year_min),
             colour = interaction(Id_Number, year_min))) +
  facet_wrap(~round(buffer/1000,1)) +
  geom_line()  

elev_mod <- nlme::lme(value~group, random=~1|Id_Number/year_min, 
                 data = musk_elev %>% filter(buffer == dist))
summary(elev_mod1)
```

Home range are on average higher elevation than the adjacent land, though this difference in elevation is small, around 24 m on average. However, this difference appears to increase as you increase the buffer size, going to 31 m when the buffer size is doubled and 51 m when the buffer size is quadrupled. It's also worth noting that there is a positive increase in elevation in all but two instances and the largest increases happen at higher elevations. Given previous discussions, there may be two main areas that muskoxen go to during the winter: steep cliffs at high elevations and lake shores at lower elevations.

Let's calculate topographic position index to see if winter home ranges would be classified as hilltops

```{r}
#| label: musk_tpi
#| dependson: "load-data"

mrdtm_crop <- terra::rast(here("data/processed/mrdtm_crop.tif"))
tpi_crop <- terra::terrain(mrdtm_crop, "TPI")
tpi_func <- function(id){
  points <- musk_seascont %>%
    filter(range_id == !!id, range == "home") %>%
    st_buffer(dist) %>%
    st_difference(musk_seascont %>%
                    filter(range_id == !!id, range == "home")) %>%
    mutate(group = "buffer") %>%
    bind_rows(musk_seascont %>%
                filter(range_id == !!id, range == "home") %>%
                mutate(group = "home range")) %>%
    sf::st_transform(terra::crs(tpi_crop))
  tpi_crop2 <- terra::crop(tpi_crop, points)
  zones <- rasterize(points %>%
                       terra::vect(),
                     tpi_crop2, field = "group", touches = TRUE)
  zonal(tpi_crop2, zones, "mean", wide = FALSE, na.rm = TRUE) %>%
    mutate(range_id = !!id) %>%
    select(-layer)
}


musk_tpi <- musk_seascont %>%
  filter(season == "Winter", range == "home", seas_length>115) %>%
  pull(range_id) %>%
  map(function(.x){tpi_func(.x)}) %>%
  list_rbind() %>%
  left_join(musk_seascont %>%
              filter(range == "home") %>%
              st_drop_geometry() %>%
              select(range_id, Id_Number, year_min))

musk_tpi %>%
  ggplot(aes(x = group, y = value)) +
  geom_boxplot() 

```

Winter home ranges appear to have a high topographic position index than the adjacent area, meaning they are more likely to be on hill tops. This TPI index uses the default neighborhood size and would likely need to be calibrated to this region to get better estimates of topographic features.

## Calving Season Model

```{r}
#| label: musk_elev_calv
#| dependson: "musk_elev"

dist_calv <- musk_seascont %>%
  filter(season == "Calving",
         range == "home") %>%
  pull(range_id) %>%
  map(function(.x){dist_func(.x)}) %>%
  unlist() %>%
  mean()

mrdtm_crop <- terra::rast(here("data/processed/mrdtm_crop.tif"))

musk_elev_calv <- musk_seascont %>%
  filter(season == "Calving", range == "home") %>%
  pull(range_id) %>%
  map(function(.x){bind_rows(elev_func(.x, dist_calv),
                             elev_func(.x, dist_calv/2),
                             elev_func(.x, dist_calv*2))}) %>%
  list_rbind() %>%
  left_join(musk_seascont %>%
              filter(range == "home") %>%
              st_drop_geometry() %>%
              select(range_id, Id_Number, year_min))%>%
  mutate(group = factor(group, levels = c("home range", "buffer")))
```

```{r}
#| label: elev_mod2
#| dependson: "musk_elev_calv"

musk_elev_calv %>%
  ggplot(aes(x = group, y = value, group = interaction(Id_Number, year_min),
             colour = interaction(Id_Number, year_min))) +
  geom_line() +
  facet_wrap(~round(buffer/1000,1))

celev_mod <- nlme::lme(value~group, random=~1|Id_Number/year_min, 
                 data = musk_elev_calv %>% filter(buffer == dist_calv))

summary(celev_mod)
```

The same relationship with elevation appears to hold for the calving areas as well, suggesting again that relief from deep snow may be the most important thing in the snowy months. The difference is not as large which likely reflects that fact that calving ranges tend to only cover a portion of the total winter range. Again, the difference in elevations increases with larger buffers.

```{r}
#| label: buff_mods
#| echo: FALSE
#| eval: FALSE

confintz3 <- function(mod, seas, buff){
  confs <- confint(mod) %>%
    as_tibble() %>%
    rename(conf.low = `2.5 %`,
           conf.high = `97.5 %`) %>%
    mutate(term = c("sd__(Intercept)","sd__(Intercept)", "sd__Observation",
                    "(Intercept)", "grouphome range"),
           group = c("year_min:Id_Number", "Id_Number", "Residual", NA, NA)) 
  conf_tidy <- broom::tidy(mod) %>%
    mutate(season = seas,
           contour = buff) %>%
    left_join(confs) %>%
    select(effect, group, term, estimate, conf.low, conf.high, season, contour)
}
confintz4 <- function(mod, seas, cont){
  confs <- confint(mod) %>%
    as_tibble() %>%
    rename(conf.low = `2.5 %`,
           conf.high = `97.5 %`) %>%
    mutate(term = c("sd__(Intercept)","sd__(Intercept)",
                    "(Intercept)", "grouphome range"),
           group = c("year_min:Id_Number", "Id_Number", NA, NA)) 
  conf_tidy <- broom::tidy(mod) %>%
    mutate(season = seas,
           contour = buff) %>%
    left_join(confs) %>%
    select(effect, group, term, estimate, conf.low, conf.high, season, contour)
}

### redoing the models in lme4 to get confidence intervals

elev_mod1 <- lme4::lmer(value~group + (1|Id_Number/year_min), 
                 data = musk_elev %>% filter(buffer == dist))
elev_mod2 <- lme4::lmer(value~group + (1|Id_Number/year_min), 
                 data = musk_elev %>% filter(buffer == dist/2))
elev_mod3 <- lme4::lmer(value~group + (1|Id_Number/year_min), 
                 data = musk_elev %>% filter(buffer == dist*2))

celev_mod1 <- lme4::lmer(value~group + (1|Id_Number/year_min), 
                 data = musk_elev_calv %>% filter(buffer == dist_calv))
celev_mod2 <- lme4::lmer(value~group + (1|Id_Number/year_min), 
                 data = musk_elev_calv %>% filter(buffer == dist_calv/2))
celev_mod3 <- lme4::lmer(value~group + (1|Id_Number/year_min), 
                 data = musk_elev_calv %>% filter(buffer == dist_calv*2))


mod_coef2 <- confintz3(elev_mod1, "Winter", dist) %>%
  bind_rows(confintz3(elev_mod2, "Winter", dist/2)) %>%
  bind_rows(confintz3(elev_mod3, "Winter", dist*2)) %>%  
  bind_rows(confintz4(sum_mod1, "Summer", 7000)) %>%
  bind_rows(confintz4(sum_mod2, "Summer", 7000/2)) %>%
  bind_rows(confintz4(sum_mod3, "Summer", 7000*2)) %>%
  bind_rows(confintz3(celev_mod1, "Calving", dist_calv)) %>%
  bind_rows(confintz3(celev_mod2, "Calving", dist_calv/2)) %>%
  bind_rows(confintz3(celev_mod3, "Calving", dist_calv*2))  

saveRDS(mod_coef2, here("output/mod_coef2.rds"))

```

# Home Range Selection Models

Instead of comparing the home range to the adjacent landscape, let's compare the home ranges to random locations within the study area with the same shape.

Let's start by generating random points to move the centers of each home range. We'll restrict these random points to the minimum convex polygon surrounding all telemetry locations. We'll also ensure that home ranges do not overlap large water bodies by more than 10% (a similar threshold for real home ranges).

```{r}
#| label: study_area
#| dependson: "load-data"

study_area <- st_convex_hull(st_union(musk_collar_filt$geometry))

hr_shift <- function(hr, seed){
  lc_2010_crop <- terra::rast(here("data/processed/lc_2010_crop.tif"))
  set.seed(seed)
  ### repeat for 10 trials until the proportion of lakes is not too high
  for (i in 1:10){
    point <- st_sample(study_area, size = 1, type = "random") %>%
      st_transform(st_crs(hr))
    diff = point - st_centroid(hr)
    poly <- (hr + diff) %>%
      st_set_crs(st_crs(hr))
    poly2 <- poly %>%
      sf::st_transform(terra::crs(lc_2010_crop))
    lc_2010_crop2 <- terra::crop(lc_2010_crop, poly2)
    zones <- rasterize(poly2 %>%
                        terra::vect(),
                    lc_2010_crop2, touches = TRUE)
    ct <- crosstab(c(zones, lc_2010_crop2)) %>%
      as_tibble() %>%
      mutate(water = ifelse(Canada2010==18,1,0)) %>%
      summarise(total = sum(n),
                wat_tot = sum(n*water),
                wat_per = wat_tot/total) %>%
      pull(wat_per)
    if(ct<=0.1){
      return(poly)
    }
  }
}

musk_pseudohr <- musk_seascont %>%
  filter(range == "home") %>%
  mutate(seed = 1:n()) %>%
  rowwise() %>%
  mutate(new_geometry = hr_shift(geometry, seed))
    
```

## Summer Model

Let's look at the proportion of forage land cover again. This time, we will use a logistic model to compare used vs available home ranges (real vs. pseudo) to see if there is a significant difference. We will use a random effect of muskox ID for the slope term, as we do not expect the intercepts to vary across individuals because they have the same proportion of success and failures

```{r}
#| label: sum_pseudo
#| dependson: "study_area"
#| echo: FALSE

lc_2010_crop <- terra::rast(here("data/processed/lc_2010_crop.tif"))
lcc_func4 <- function(id){
  poly <- musk_pseudohr %>%
    filter(range_id == !!id) %>%
    mutate(
      geometry = sf::st_transform(geometry,terra::crs(lc_2010_crop)),
      new_geometry = sf::st_transform(new_geometry,terra::crs(lc_2010_crop)))
  lc_2010_crop1 <- terra::crop(lc_2010_crop, poly$geometry)
  lc_2010_crop2 <- terra::crop(lc_2010_crop, poly$new_geometry)
  zones1 <- rasterize(poly$geometry %>%
                        terra::vect(),
                    lc_2010_crop1, touches = TRUE)
  zones2 <- rasterize(poly$new_geometry %>%
                        terra::vect(),
                    lc_2010_crop2, touches = TRUE)
  ct1 <- crosstab(c(zones1, lc_2010_crop1)) %>%
    as_tibble() %>%
    mutate(range_id = !!id,
           group = "true")
  ct2 <- crosstab(c(zones2, lc_2010_crop2)) %>%
    as_tibble() %>%
    mutate(range_id = !!id,
           group = "pseudo")
  ct <- bind_rows(ct1, ct2)
}

sum_pseudo <- musk_pseudohr %>%
  filter(season == "Summer") %>%
  pull(range_id) %>%
  map(function(.x){bind_rows(lcc_func4(.x))}) %>%
  list_rbind() 

```

```{r}
#| label: sum_pseudo_mod
#| dependson: "sum_pseudo"

musk_sum_lc <- sum_pseudo %>%
  mutate(for_lc = ifelse(Canada2010%in%c(8,10,11,12,13),1,0)) %>%
  group_by(range_id, group) %>%
  summarise(total = sum(n),
            for_tot = sum(n*for_lc),
            for_per = for_tot/total) %>%
  left_join(musk_pseudohr %>%
              select(range_id, year_min, area, Id_Number)) %>%
  mutate(true_range = ifelse(group == "true",1,0)) 
saveRDS(musk_sum_lc, here("output/musk_sum_lc.rds"))


musk_sum_lc %>%
  ggplot(aes(x = group, y = for_per)) +
  geom_boxplot() 


set_seed(5)
sum_pseudo_brm <- brms::brm(true_range ~ scale(for_per) + 
                         (1|Id_Number), family = "bernoulli",
                       data = musk_sum_lc,
                 chains = 3,
                 cores = 3,
                 iter = 10000,
                 control = list(adapt_delta=0.9))

summary(sum_pseudo_brm)

```

It looks like, as with the buffer approach, home ranges are selected for their proportion of foraging area. We needed to use a Bayesian approach though, because the lme4 models were having a difficult time estimating the variance of the random effect, possibly a result of the small sample size.

## Winter Model

```{r}
#| label: wint_pseudo
#| dependson: c("study_area" "musk_snow")
#| echo: FALSE

mrdtm_crop <- terra::rast(here("data/processed/mrdtm_crop.tif"))
mrdtm_agg <- terra::aggregate(mrdtm_crop, fact = 5)
tpi_crop <- spatialEco::tpi(mrdtm_agg, scale = 3000, win = "circle")

tpi_func <- function(id, layer){
  poly <- musk_pseudohr %>%
    filter(range_id == !!id) %>%
    mutate(
      geometry = sf::st_transform(geometry,terra::crs(layer)),
      new_geometry = sf::st_transform(new_geometry,terra::crs(layer)))
  tpi_crop1 <- terra::crop(layer, poly$geometry)
  tpi_crop2 <- terra::crop(layer, poly$new_geometry)
  zones1 <- rasterize(poly$geometry %>%
                        terra::vect(),
                    tpi_crop1, touches = TRUE)
  zones2 <- rasterize(poly$new_geometry %>%
                        terra::vect(),
                    tpi_crop2, touches = TRUE)
  z1 <- zonal(tpi_crop1, zones1, "mean", wide = FALSE, na.rm = TRUE) %>%
    mutate(range_id = !!id, 
           group = "true") %>%
    select(-layer)
  z2 <- zonal(tpi_crop2, zones2, "mean", wide = FALSE, na.rm = TRUE) %>%
    mutate(range_id = !!id, 
           group = "pseudo") %>%
    select(-layer)
  bind_rows(z1,z2)
}

musk_wint_tpi <- musk_pseudohr %>%
  filter(season == "Winter") %>%
  pull(range_id) %>%
  map(function(.x){tpi_func(.x, tpi_crop)}) %>%
  list_rbind() %>%
  left_join(musk_pseudohr %>%
              st_drop_geometry() %>%
              select(range_id, Id_Number, year_min)) %>%
  mutate(true_range = ifelse(group == "true",1,0))
saveRDS(musk_wint_tpi, here("output/musk_wint_tpi.rds"))


```

```{r}
#| label: wint_pseudo_mod
#| dependson: "wint_pseudo"

musk_wint_tpi %>%
  ggplot(aes(x = group, y = value)) +
  geom_boxplot() 



set_seed(5)
wint_pseudo_brm <- brms::brm(true_range ~ scale(value) + 
                         (1|Id_Number), family = "bernoulli",
                       data = musk_wint_tpi,
                 chains = 3,
                 cores = 3,
                 iter = 10000,
                 control = list(adapt_delta =0.9))

summary(wint_pseudo_brm)
```

Home ranges are associated with higher topographic position indices indicating winter home ranges are more often elevated relative to their surroundings. Let's plot the winter home ranges on the TPI raster to better visualize it:

```{r}
musk_pseudohr %>%
  filter(season == "Winter") %>%
  select(-new_geometry) %>%
  st_transform(4326) %>%
  leaflet::leaflet() %>%
  leaflet::addPolygons() %>%
  leaflet::addRasterImage(tpi_crop)
```

## Calving Model

```{r}
#| label: calv_pseudo
#| dependson: "study_area"
#| echo: FALSE

mrdtm_crop <- terra::rast(here("data/processed/mrdtm_crop.tif"))
mrdtm_agg <- terra::aggregate(mrdtm_crop, fact = 5)
tpi_crop <- spatialEco::tpi(mrdtm_agg, scale = 3000, win = "circle")

musk_calv_tpi <- musk_pseudohr %>%
  filter(season == "Calving") %>%
  pull(range_id) %>%
  map(function(.x){tpi_func(.x, tpi_crop)}) %>%
  list_rbind() %>%
  left_join(musk_pseudohr %>%
              st_drop_geometry() %>%
              select(range_id, Id_Number, year_min)) %>%
  mutate(true_range = ifelse(group == "true",1,0))
saveRDS(musk_calv_tpi, here("output/musk_calv_tpi.rds"))
```

```{r}
#| label: calv_pseudo_mod
#| dependson: "calv_pseudo"

musk_calv_tpi %>%
  ggplot(aes(x = group, y = value)) +
  geom_boxplot() 

calv_pseudo_mod <- lme4::glmer(true_range ~ scale(value) + 
                         (1|Id_Number), family = "binomial",
                       data = musk_calv_tpi)
summary(calv_pseudo_mod)

set_seed(5)
calv_pseudo_brm <- brms::brm(true_range ~ scale(value) + 
                         (1|Id_Number), family = "bernoulli",
                       data = musk_calv_tpi,
                 chains = 3,
                 cores = 3,
                 iter = 10000,
                 control = list(adapt_delta =0.9))

summary(calv_pseudo_brm)
```

```{r}
#| label: select_mod_coefs
#| echo: FALSE
#| eval: FALSE

sum_effects <- sum_pseudo_brm %>%
  tidybayes::spread_draws(`Intercept`, `b_scalefor_per`, 
                          `sd_Id_Number__Intercept`) %>%
  tidybayes::summarise_draws(~quantile(.x, probs = c(0.025,0.5,0.975))) %>%
  mutate(Parameter = c("Intercept", "Proportion \ngrassland/shrubland", 
                       "sd Muskox ID"),
         Effect = c("Fixed", "Fixed", "Random"),
         Season = "Summer")
wint_effects <- wint_pseudo_brm %>%
  tidybayes::spread_draws(`Intercept`, `b_scalevalue`, 
                          `sd_Id_Number__Intercept`) %>%
  tidybayes::summarise_draws(~quantile(.x, probs = c(0.025,0.5,0.975))) %>%
  mutate(Parameter = c("Intercept", "TPI", "sd Muskox ID"),
         Effect = c("Fixed", "Fixed", "Random"),
         Season = "Winter")
calv_effects <- calv_pseudo_brm %>%
  tidybayes::spread_draws(`Intercept`, `b_scalevalue`, 
                          `sd_Id_Number__Intercept`) %>%
  tidybayes::summarise_draws(~quantile(.x, probs = c(0.025,0.5,0.975))) %>%
  mutate(Parameter = c("Intercept", "TPI", "sd Muskox ID"),
         Effect = c("Fixed", "Fixed", "Random"),
         Season = "Calving")

select_mod_coefs <- bind_rows(sum_effects, wint_effects, calv_effects)

saveRDS(select_mod_coefs, here("output/select_mod_coefs.rds"))

```

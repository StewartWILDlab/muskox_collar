[
  {
    "objectID": "quarto/movement_patterns.html",
    "href": "quarto/movement_patterns.html",
    "title": "Movement Patterns",
    "section": "",
    "text": "In this document, we will examine patterns in the movement behaviours of collared muskoxen. We will use muskox speed and turning angles to explore behaviour.",
    "crumbs": [
      "Movement Patterns"
    ]
  },
  {
    "objectID": "quarto/movement_patterns.html#movement-trends",
    "href": "quarto/movement_patterns.html#movement-trends",
    "title": "Movement Patterns",
    "section": "Movement Trends",
    "text": "Movement Trends\n\n\n\n\n\n\n\n\n\nBased on the time series above, movement tends to be highest in the summer (June, July, August), gradually decrease during autumn (September, October, November) and winter (December, January, February) and experience a sharp increase in the late spring (May). Perhaps this increase is timed with parturition, which has been found to start in April/May (Adamczewski 1997). Alternatively, this could be tied to the timing of snowmelt. We can explore this further by looking at average seasonal step lengths for each muskox:\n\n\n\n\n\n\n\n\n\nStep lengths in the winter and spring are similar, whereas autumn step lengths are intermediate between winter and summer. This again highlights the discrepancy between the gradual decrease in step lengths from summer to winter compared with the sharper increase from winter to summer.\nFor the most part, average seasonal step lengths are consistent between muskoxen, though there appear to be greater variation in the spring and autumn. To examine this further, let’s plot smoothed curves of step lengths against day of year for different years. We’ll restrict this plot to muskoxen-year combinations with more than half a year’s worth of data:\n\n\n\n\n\n\n\n\n\nThe curves of step lengths follow similar trajectories but there is still considerable variation across years and among muskoxen. This suggests weather, landscape, and muskox characteristics may play a part in influencing movement behaviour.",
    "crumbs": [
      "Movement Patterns"
    ]
  },
  {
    "objectID": "quarto/movement_patterns.html#net-squared-displacement",
    "href": "quarto/movement_patterns.html#net-squared-displacement",
    "title": "Movement Patterns",
    "section": "Net Squared Displacement",
    "text": "Net Squared Displacement\nWe can also look at net squared displacement curves to investigate movement patterns of muskoxen (i.e. resident, migratory, or nomadic). See Bunnefeld et al. (2011) for examples of how these curves look for different movement classes (i.e. migrant, disperser, resident, nomad).\nTo do this we will use the adehabitatLT package to format our data and the migrateR package to fit different models to the net displacement data. Let’s first get our collar data into the trajectory format used by adehabitatLT. We will also subset our data to one observation per day to improve modelling efficiency.\n\nmusk_collar_sub &lt;- musk_collar_filt %&gt;%\n  filter(lubridate::hour(datetime) == 16)\n\nxy &lt;- musk_collar_sub %&gt;%\n  sf::st_transform(\"+proj=utm +zone=9\") %&gt;%\n  sf::st_coordinates()\nltraj &lt;- adehabitatLT::as.ltraj(xy = xy, date = musk_collar_sub$datetime, id = musk_collar_sub$Id_Number)\n\nadehabitatLT::ld(ltraj) %&gt;%\n  filter(!(id %in% c(707,709,710))) %&gt;%\n  ggplot(aes(x = date, y = R2n)) +\n  geom_point(size = 0.5) +\n  geom_line() +\n  ylab(\"Net squared displacement (km^2)\") +\n  xlab(\"Date\") +\n  facet_wrap(~id) +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))\n\n\n\n\n\n\n\n\nThe plot above shows the net squared displacement from the initial location for each collared muskoxen. There does not appear to be a clear movement behaviour shared between all muskoxen. Most appear to have short periods of time during the summer with large net squared displacement, but these are generally followed by longer periods where net squared displacement is much smaller. Muskoxen 7011 and 7012 show a general increasing trend in net squared displacement, but there are still extended periods of smaller displacement throughout the time series. Most of the periods of larger displacement do not appear to be long enough to represent a separate summer range. Examinations of animations of muskox movements generally show that they tend to move between patches of resources during the summer rather than sticking to one specific area.",
    "crumbs": [
      "Movement Patterns"
    ]
  },
  {
    "objectID": "quarto/movement_patterns.html#spatial-patterns",
    "href": "quarto/movement_patterns.html#spatial-patterns",
    "title": "Movement Patterns",
    "section": "Spatial Patterns",
    "text": "Spatial Patterns"
  },
  {
    "objectID": "quarto/data_exploration.html",
    "href": "quarto/data_exploration.html",
    "title": "Data Cleaning",
    "section": "",
    "text": "Movement data for this project come from 10 female muskoxen in the Sahtu region of the Northwest Territories (NWT) that were collared between December 2007 and February 2012.\nWe can plot the date ranges of individual collared muskoxen below:\n\n\n\n\n\nId_Number\nDateRange\nNumDays\n\n\n\n\n706\nDec 2007 to May 2009\n515\n\n\n707\nDec 2007 to Apr 2008\n145\n\n\n708\nFeb 2009 to Dec 2010\n669\n\n\n709\nJan 2008 to Apr 2008\n98\n\n\n710\nJan 2008 to Apr 2008\n100\n\n\n7010\nFeb 2009 to Jan 2010\n345\n\n\n7011\nJan 2009 to Dec 2011\n1055\n\n\n7012\nFeb 2009 to Feb 2012\n1106\n\n\n7013\nFeb 2009 to Aug 2011\n926\n\n\n7080\nDec 2007 to Aug 2009\n607\n\n\n\n\n\n\n\nMuskoxen 707, 709, 710, and 7010 have less than a year of movement data and only 7011, 7012, and 7013 have more than 2 years of data.",
    "crumbs": [
      "Data Cleaning"
    ]
  },
  {
    "objectID": "quarto/data_exploration.html#sample-size",
    "href": "quarto/data_exploration.html#sample-size",
    "title": "Data Cleaning",
    "section": "",
    "text": "Movement data for this project come from 10 female muskoxen in the Sahtu region of the Northwest Territories (NWT) that were collared between December 2007 and February 2012.\nWe can plot the date ranges of individual collared muskoxen below:\n\n\n\n\n\nId_Number\nDateRange\nNumDays\n\n\n\n\n706\nDec 2007 to May 2009\n515\n\n\n707\nDec 2007 to Apr 2008\n145\n\n\n708\nFeb 2009 to Dec 2010\n669\n\n\n709\nJan 2008 to Apr 2008\n98\n\n\n710\nJan 2008 to Apr 2008\n100\n\n\n7010\nFeb 2009 to Jan 2010\n345\n\n\n7011\nJan 2009 to Dec 2011\n1055\n\n\n7012\nFeb 2009 to Feb 2012\n1106\n\n\n7013\nFeb 2009 to Aug 2011\n926\n\n\n7080\nDec 2007 to Aug 2009\n607\n\n\n\n\n\n\n\nMuskoxen 707, 709, 710, and 7010 have less than a year of movement data and only 7011, 7012, and 7013 have more than 2 years of data.",
    "crumbs": [
      "Data Cleaning"
    ]
  },
  {
    "objectID": "quarto/data_exploration.html#collar-failure",
    "href": "quarto/data_exploration.html#collar-failure",
    "title": "Data Cleaning",
    "section": "Collar Failure",
    "text": "Collar Failure\nBefore we look into the data, there are some data cleaning steps we can use to remove errors from that dataset. First, we know that collars 707, 709, and 710 had their release mechanisms triggered early, so we need to look at the data to figure out when this happened. Let’s start by looking at histograms of step lengths:\n\n\n\n\n\n\n\n\n\nThe stepped nature of the distances traveled on the left side of the graph are a result of the resolution of the GPS device. For collars 707, 709, and 710, there appear to be a greater-than-expected number of instances where the muskoxen move negligible distances. By plotting time series of step lengths, we can can see that these negligible distances occur at the end of the recording periods:\n\n\n\n\n\n\n\n\n\nFor simplicity, let’s remove all points following the first two consecutive short step lengths (i.e. 0 or 4.4747041) at the end of the time series.\n\n\n\n\n\nId_Number\nDaysRemoved\n\n\n\n\n707\n108\n\n\n709\n36\n\n\n710\n19",
    "crumbs": [
      "Data Cleaning"
    ]
  },
  {
    "objectID": "quarto/data_exploration.html#data-filtering",
    "href": "quarto/data_exploration.html#data-filtering",
    "title": "Data Cleaning",
    "section": "Data Filtering",
    "text": "Data Filtering\nNow that we have removed data that we know contain errors, we can start to look for less obvious sources of errors. The SDLfilter package has two functions, dupfilter and ddfilter, that remove data duplicates and unlikely points, respectively.\nFirst let’s use dupfilter to remove duplicate data points with the same date and time.\n\nsdl_dup &lt;- SDLfilter::dupfilter(sdl_musk, \n                                step.time = 7,\n                                conditional = TRUE)\n\n\ndupfilter_exact removed 3 of 14065 locations\ndupfilter_qi removed 0 of 14062 locations\ndupfilter_time removed 31 of 14062 locations\ndupfilter_space removed 0 of 14031 locations\n\nInput data: 14065 locations\nFiltered data: 14031 locations\ndupfilter removed 34 locations (0.24% of original data)\n\n\nNext we’ll use ddfilter to filter points based on speed and turning angles between consecutive points. To use this function, we need to estimate the maximum reasonable speed between two consecutive locations. The vmax function maps a gamma distribution to the observed speeds and estimates the maximum speed as the value with a cumulative probability of 0.999.\n\nvmax &lt;- SDLfilter::vmax(sdl_dup, prob = 0.999)\n\n\ndupfilter_exact removed 0 of 14031 locations\ndupfilter_qi removed 0 of 14031 locations\ndupfilter_time removed 0 of 14031 locations\ndupfilter_space removed 176 of 14031 locations\n\nInput data: 14031 locations\nFiltered data: 13855 locations\ndupfilter removed 176 locations (1.25% of original data)\n\n\nThe maximum linear speed (Vmax) was estimated using 13841 locations.\nVmax: 0.4891431 km/h\n\n\nWe will also estimate the maximum one-way linear speed of a loop trip. A loop trip is defined as a spatial departure and return involving a series of three or more consecutive points. The vmaxlp function also uses a gamma distribution to estimate this speed:\n\nvmaxlp &lt;- SDLfilter::vmaxlp(sdl_dup, prob = 0.999)\n\n\ndupfilter_exact removed 0 of 14031 locations\ndupfilter_qi removed 0 of 14031 locations\ndupfilter_time removed 0 of 14031 locations\ndupfilter_space removed 176 of 14031 locations\n\nInput data: 14031 locations\nFiltered data: 13855 locations\ndupfilter removed 176 locations (1.25% of original data)\n\n\nThe maximum one-way linear speed of a loop trip (vmaxlp) was estimated using \n180 Vlp from 90 loop trips.\nvmaxlp: 0.269 km/h\n\n\nNow we can filter our data using ddfilter. Locations are removed if one of following criteria are met: 1) speed from previous and to subsequent location both exceed vmax; 2) inner angle is less than a given threshold and speed from a previous or to a subsequent location exceeds vmaxlp. We will specify a turning angle of 14 degrees, as outlined in Bjørneraas et al. 2010.\n\nsdl_dd1 &lt;- SDLfilter::ddfilter(sdl_dup, qi = 5, \n                              vmax = vmax, vmaxlp = vmaxlp,\n                              ia = 14)\n\n\nddfilter_speed removed 39 of 14031 locations\nddfilter_loop removed 38 of 13992 locations\n\nInput data: 14031 locations\nFiltered data: 13954 locations\nddfilter removed 77 locations (0.55% of original data)\n\n\n\n\n\n\n\n\n\n\n\nThe filtered points appear non-randomly across the time series, which suggests that our speed thresholds were too small. Let’s increase vmax and vmaxlp to more conservative values of 2 km/h and 1 km/h, respectively.\n\nsdl_dd2 &lt;- SDLfilter::ddfilter(sdl_dup, qi = 5, \n                              vmax = 2, vmaxlp = 1,\n                              ia = 14)\n\n\nddfilter_speed removed 1 of 14031 locations\nddfilter_loop removed 1 of 14030 locations\n\nInput data: 14031 locations\nFiltered data: 14029 locations\nddfilter removed 2 locations (0.01% of original data)\n\n\n\n\n\n\n\n\n\n\n\nThat seems to do a better job of only removing the most extreme points.",
    "crumbs": [
      "Data Cleaning"
    ]
  },
  {
    "objectID": "quarto/data_exploration.html#post-deployment-bias",
    "href": "quarto/data_exploration.html#post-deployment-bias",
    "title": "Data Cleaning",
    "section": "Post-deployment Bias",
    "text": "Post-deployment Bias\nLastly, we will remove any points collected within 24 hours of collar deployments to remove the immediate effects of capture and handling.\n\n\n\n\n\nId_Number\ncollar_deployed\n\n\n\n\n708\n2009-02-07 15:00:00\n\n\n7010\n2009-02-07 14:19:00\n\n\n7013\n2009-02-07 11:55:00\n\n\n7012\n2009-02-06 12:52:00\n\n\n7011\n2009-01-28 15:02:00\n\n\n710\n2008-01-18 16:29:00\n\n\n709\n2008-01-18 14:50:00\n\n\n7080\n2007-11-14 13:21:00\n\n\n707\n2007-11-14 10:50:00\n\n\n706\n2007-11-11 13:30:00",
    "crumbs": [
      "Data Cleaning"
    ]
  },
  {
    "objectID": "quarto/home_range.html",
    "href": "quarto/home_range.html",
    "title": "Lifetime Home Range",
    "section": "",
    "text": "In this document, we will estimate home range size for collared muskoxen and look to compare range overlap and size across years and seasons.",
    "crumbs": [
      "Lifetime Home Range"
    ]
  },
  {
    "objectID": "quarto/home_range.html#home-range",
    "href": "quarto/home_range.html#home-range",
    "title": "Home Range",
    "section": "Home Range",
    "text": "Home Range"
  },
  {
    "objectID": "quarto/home_range.html#estimating-movement-model",
    "href": "quarto/home_range.html#estimating-movement-model",
    "title": "Lifetime Home Range",
    "section": "Estimating Movement Model",
    "text": "Estimating Movement Model\nBefore we can estimate home ranges for the collared muskoxen, we need to determine an appropriate movement model. To do this, we will use variograms. Our data has been updated to conform to Movebank naming conventions so that we can use the ctmm package.\n\nlibrary(ctmm)\nmusk_move &lt;- read.csv(here(\"data/raw/muskox_data/musk_collar_filt_movebank.csv\"))\nmusk_tel &lt;- as.telemetry(musk_move)[c(-2,-4,-5)]\n\nFirst we will plot empirical variograms for each collared muskoxen. Variograms are used to quantify spatial dependence between locations at different points in time. In general, as the time between locations increases, spatial dependence decreases. Variograms plot the semi-variance of distances between pairs of points separated by different time lags. At short time lags, these distances are very similar and the semi-variance is low. At large time lags, there is greater variability in the distances between points, so the semi-variance is high. Usually variograms will reach an asymptote in semi-variance that represents the time lag at which the animal is able to traverse their home range. For now we will leave out the muskoxen that had collar failures as they do not have enough data to estimate home ranges.\n\nmusk_var &lt;- lapply(musk_tel, variogram, CI=\"Gauss\", fast = TRUE)\nxlim &lt;- c(0,5 %#% \"day\")\n\n\nmap(musk_var, function(x) x %&gt;% as_tibble() %&gt;% mutate(id = x@info$identity)) %&gt;% \n  list_rbind() %&gt;%\n  mutate(level = 0.95,\n         ci.lower = SVF*qchisq((1-level)/2,DOF,lower.tail=TRUE)/DOF,\n         ci.upper = SVF*qchisq((1-level)/2,DOF,lower.tail=FALSE)/DOF) %&gt;%\n  group_by(id) %&gt;%\n  slice(seq(0.5*n())) %&gt;%\n  ungroup() %&gt;%\n  ggplot(aes(x = lag, y = SVF)) +\n  geom_linerange(aes(ymin = ci.lower, ymax = ci.upper), colour = \"grey\") +\n  geom_line() +\n  facet_wrap(~id, scales = \"free_y\") +\n  theme_bw()\n\n\n\n\n\n\n\n\nMost of these look fine, however for two of the longer time series (7011 and 7012) the semi-variance appears to reach an asymptote by the first year, but starts increasing again part way through the second year. If this behaviour is common, home range estimates may be biased even after a year’s worth of data. If muskoxen truly are nomadic and lack site fidelty, kernel density methods may not be appropriate (Silva et al., 2022).\nIt is also clear there are some issues with collars 708 and 7010. Closer inspection of the data reveals that, every 7 fixes, there is a longer 24 hour delay until the next fix. Currently, the model uses the median sampling interval (8 hours) to estimate the variogram. The variogram function allows is to specify more than one time interval (in our case, 8 and 24 hours) to progressively coarsen the variogram. We can also specify an interval-weighted algorithm to further improve the appearance of the variogram.\n\ndt &lt;- c(8,24) %#% \"hour\"\nmusk_var[[2]] &lt;- variogram(musk_tel[[2]], dt = dt, CI=\"Gauss\", fast = FALSE)\nmusk_var[[3]] &lt;- variogram(musk_tel[[3]], dt = dt, CI=\"Gauss\", fast = FALSE)\n\n\nmap(musk_var, function(x) x %&gt;% as_tibble() %&gt;% mutate(id = x@info$identity)) %&gt;% \n  list_rbind() %&gt;%\n  mutate(level = 0.95,\n         ci.lower = SVF*qchisq((1-level)/2,DOF,lower.tail=TRUE)/DOF,\n         ci.upper = SVF*qchisq((1-level)/2,DOF,lower.tail=FALSE)/DOF)  %&gt;%\n  group_by(id) %&gt;%\n  slice(seq(0.5*n())) %&gt;%\n  ungroup() %&gt;%\n  ggplot(aes(x = lag, y = SVF)) +\n  geom_linerange(aes(ymin = ci.lower, ymax = ci.upper), colour = \"grey\") +\n  geom_line() +\n  facet_wrap(~id, scales = \"free_y\") +\n  theme_bw()\n\n\n\n\n\n\n\n\nThese look better. Collars 7011 and 7012 do not appear to reach an asymptote in semi-variance as lag increases, suggesting that these individuals are not range resident. 7010 has a somewhat bell-shaped curve. This can be indicative of distinct winter and summer grounds. However, given that muskoxen appear to have limited movement in the winter and the ~1-year time series for 7010 starts and ends in winter, it seems more likely that the wintering grounds from one year to the next happened to be close together.\nWe can diagnose these issues further by fitting a variety of custom variogram functions to our data using the ctmm.select function.\n\n### fist create a best guess set of parameters for the model\nmusk_var_mod &lt;- lapply(musk_var, variogram.fit, interactive = FALSE)\n#fit &lt;- mapply(function(x,y){ctmm.select(x,y,verbose = TRUE,cores = 3)},musk_tel,musk_var_mod)\n#saveRDS(fit, here(\"output/musk_var_fit.rds\"))\nfit &lt;- readRDS(here(\"output/musk_var_fit.rds\"))\nfor (i in 1:length(musk_var)){print(musk_var[[i]]@info$identity);print(summary(fit[,i])); plot(musk_var[[i]], CTMM = fit[,i], col.CTMM=c(\"red\",\"purple\",\"blue\", \"green\"),fraction=0.5,level=0.5);plot(musk_var[[i]], CTMM = fit[,i], col.CTMM=c(\"red\",\"purple\",\"blue\", \"green\"),xlim = xlim,,level=0.5)}\n\n[1] \"706\"\n                     ΔAICc ΔRMSPE (km)  DOF[area]\nOUF anisotropic    0.00000    2.077907   9.617055\nOUF               42.66530    1.890928   9.990823\nOU anisotropic    68.82166    2.245986   7.367132\nOUf anisotropic 1317.33573    0.000000 219.589031\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"708\"\n                    ΔAICc ΔRMSPE (km) DOF[area]\nOUF anisotropic    0.0000    1.244331  25.89534\nOUF              116.7679    1.350865  18.22964\nOU anisotropic   198.9542    1.852910  21.97129\nOUf anisotropic 1030.2342    0.000000 285.96732\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"7010\"\n                    ΔAICc ΔRMSPE (km)  DOF[area]\nOUF anisotropic   0.00000    3.760725   8.090865\nOUF              57.73839    3.915642   8.109727\nOU anisotropic  149.18384    4.605075   4.914131\nOUf anisotropic 442.22301    0.000000 113.628816\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"7011\"\n                    ΔAICc ΔRMSPE (km)  DOF[area]\nOUF anisotropic    0.0000    5.483670   8.988154\nOUF              352.6867    6.712407   5.586937\nOU anisotropic   468.8016    6.491142   8.365915\nOUf anisotropic 2604.0344    0.000000 336.211689\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"7012\"\n                    ΔAICc ΔRMSPE (km)  DOF[area]\nOUF anisotropic    0.0000    3.607974  12.453842\nOUF              136.5556    4.887839  10.391674\nOU anisotropic   296.2989    4.133481   8.086789\nOUf anisotropic 2682.6031    0.000000 368.948403\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"7013\"\n                    ΔAICc ΔRMSPE (km)  DOF[area]\nOUF anisotropic    0.0000    3.001076  13.847073\nOUF              108.0571    2.462135  15.168212\nOU anisotropic   350.1016    3.654844   8.005831\nOUf anisotropic 2123.5205    0.000000 359.910030\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"7080\"\n                    ΔAICc ΔRMSPE (km) DOF[area]\nOUF anisotropic    0.0000    2.230820  23.94430\nOUF               73.9577    2.820220  21.23700\nOU anisotropic   216.7409    2.475281  15.64506\nOUf anisotropic 1048.6776    0.000000 278.59866\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThese look okay, but they aren’t capturing the short timescales well in all instances. This could be an issue with these individuals not being range resident, but it could also be related to telemetry error. To try to rectify this, we can attempt to fit models that account for potential error in the telemetry data.",
    "crumbs": [
      "Lifetime Home Range"
    ]
  },
  {
    "objectID": "quarto/resource_selection.html",
    "href": "quarto/resource_selection.html",
    "title": "Resource selection",
    "section": "",
    "text": "musk_lc &lt;- musk_collar_filt %&gt;%\n  mutate(lc = extract(lc_2010_proj, musk_collar_filt, ID = FALSE)$value,\n         Group = ifelse(month&lt;5|month&gt;10,\"Occurrence\\nWinter (Nov - Apr)\",\"Occurrence\\nSummer (May - Sep)\")) %&gt;%\n  st_drop_geometry() %&gt;%\n  group_by(Group, lc) %&gt;%\n  summarise(n = n()) %&gt;%\n  group_by(Group) %&gt;%\n  mutate(freq = n/sum(n)) \n\n`summarise()` has grouped output by 'Group'. You can override using the\n`.groups` argument.\n\nlc_props &lt;- freq(lc_2010_proj) %&gt;%\n  mutate(freq = count/sum(count),\n         lc = factor(value, levels = levels(lc_atts$Classification)),\n         Group = \"Availability\") %&gt;%\n  select(Group, lc, freq)\n\n\nmusk_lc %&gt;%\n  select(-n) %&gt;%\n  bind_rows(lc_props) %&gt;%\n  filter(lc != \"Snow and Ice\") %&gt;%\n  ggplot(aes(x = lc, y = freq, fill = lc)) +\n  geom_col() +\n  facet_wrap(~Group) +\n  ylab(\"Proportion of GPS fixes\") +\n  labs(fill = \"Landcover\") +\n  xlab(\"Landcover\") +\n  scale_fill_manual(values = cols) +\n  theme_bw() +\n  theme(axis.text.x = element_blank(),\n        axis.ticks.x = element_blank())\n\n\n\n\n\n\n\n\n\n\n# A tibble: 12 × 2\n   month avg_sl\n   &lt;dbl&gt;  &lt;dbl&gt;\n 1     1 0.0968\n 2     2 0.0793\n 3     3 0.0873\n 4     4 0.0794\n 5     5 0.366 \n 6     6 0.956 \n 7     7 1.12  \n 8     8 0.852 \n 9     9 0.731 \n10    10 0.403 \n11    11 0.195 \n12    12 0.123"
  },
  {
    "objectID": "quarto/resource_selection.html#spatial-patterns",
    "href": "quarto/resource_selection.html#spatial-patterns",
    "title": "Resource selection",
    "section": "",
    "text": "musk_lc &lt;- musk_collar_filt %&gt;%\n  mutate(lc = extract(lc_2010_proj, musk_collar_filt, ID = FALSE)$value,\n         Group = ifelse(month&lt;5|month&gt;10,\"Occurrence\\nWinter (Nov - Apr)\",\"Occurrence\\nSummer (May - Sep)\")) %&gt;%\n  st_drop_geometry() %&gt;%\n  group_by(Group, lc) %&gt;%\n  summarise(n = n()) %&gt;%\n  group_by(Group) %&gt;%\n  mutate(freq = n/sum(n)) \n\n`summarise()` has grouped output by 'Group'. You can override using the\n`.groups` argument.\n\nlc_props &lt;- freq(lc_2010_proj) %&gt;%\n  mutate(freq = count/sum(count),\n         lc = factor(value, levels = levels(lc_atts$Classification)),\n         Group = \"Availability\") %&gt;%\n  select(Group, lc, freq)\n\n\nmusk_lc %&gt;%\n  select(-n) %&gt;%\n  bind_rows(lc_props) %&gt;%\n  filter(lc != \"Snow and Ice\") %&gt;%\n  ggplot(aes(x = lc, y = freq, fill = lc)) +\n  geom_col() +\n  facet_wrap(~Group) +\n  ylab(\"Proportion of GPS fixes\") +\n  labs(fill = \"Landcover\") +\n  xlab(\"Landcover\") +\n  scale_fill_manual(values = cols) +\n  theme_bw() +\n  theme(axis.text.x = element_blank(),\n        axis.ticks.x = element_blank())\n\n\n\n\n\n\n\n\n\n\n# A tibble: 12 × 2\n   month avg_sl\n   &lt;dbl&gt;  &lt;dbl&gt;\n 1     1 0.0968\n 2     2 0.0793\n 3     3 0.0873\n 4     4 0.0794\n 5     5 0.366 \n 6     6 0.956 \n 7     7 1.12  \n 8     8 0.852 \n 9     9 0.731 \n10    10 0.403 \n11    11 0.195 \n12    12 0.123"
  },
  {
    "objectID": "quarto/movement_patterns.html#defining-seasons",
    "href": "quarto/movement_patterns.html#defining-seasons",
    "title": "Movement Patterns",
    "section": "Defining Seasons",
    "text": "Defining Seasons\nWe can use snow depth data from the SnowModel project to look at how snow depth impacts step lengths\n\nsnowdepth_mean %&gt;%  \n  mutate(month = month(date)) %&gt;%\n  ggplot(aes(x=date, y=snow_depth, colour = factor(month), group = 1)) + \n  geom_line(linewidth = 2) +  \n  ylab(\"Average snow depth (m)\") +  \n  xlab(\"Date\") +   \n  theme_bw() \n\n\n\n\n\n\n\n\nClearly there are large changes in snow depth across seasons. Let’s plot snow depth against step lengths to see how they match up.\n\nmusk_snow &lt;- musk_collar_filt %&gt;%\n  mutate(date = as.Date(datetime)) %&gt;%\n  left_join(snowdepth_mean)\n\nmusk_snow %&gt;%\n  filter(pTime == 8, !is.na(snow_depth)) %&gt;%\n  group_by(snow_depth) %&gt;%\n  summarise(mean = mean(pDist),\n            lower = quantile(pDist,0.05),\n            upper = quantile(pDist,0.95)) %&gt;%\n  ggplot(aes(x=snow_depth, y = mean)) +\n  geom_pointrange(aes(ymin=lower, ymax=upper)) +\n  ylab(\"Step length (km)\") +\n  xlab(\"Snow depth (m)\") +\n  theme_bw()\n\n\n\n\n\n\n\n\nBased on this graph, step lengths decrease with increasing snow depth, as expected. The relationship appears to be exponential as well, with changes in step length becoming smaller as step length becomes smaller. Let’s plot our step length time series again but with colours representing 0.05 m bins of snow depth.\n\n\n\n\n\n\n\n\n\nIt looks like once snow is deeper than ~0.1 m on average, muskox movement decreases well beyond the typical summer step lengths. Of note in the winter of 2010-2011, the snow is especially deep for an extended period of time and step lengths are at their lowest.\nTo define seasons, let’s use a cut-off of 0.1 m snow depth. We’ll define the start of winter as the first three successive days with snow depth &gt;=0.1 m and the end of winter as the first three successive days with snow depth &lt;=0.1 m.\n\n\n\n\n\nyear\nstart_summer\nstart_winter\nlength_summer\nlength_winter\n\n\n\n\n2007\n2007-05-20\n2007-10-11\n144\n214\n\n\n2008\n2008-05-12\n2008-10-25\n166\n193\n\n\n2009\n2009-05-06\n2009-11-18\n196\n159\n\n\n2010\n2010-04-26\n2010-11-04\n192\n199\n\n\n2011\n2011-05-22\n2011-10-19\n150\n217\n\n\n2012\n2012-05-23\n2012-09-11\n111\nNA\n\n\n\n\n\nWe could also look at the movement trajectories of muskoxen at the transitions between seasons to decide on cutoffs specific to each individual. Let’s plot the locations of individual muskoxen for each winter, including the transition months of Sept/Oct and Apr/May\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIt is clear from these plots that muskoxen tend to head to their winter range once snow starts to accumulate on the ground and leave that range when the snow melts. We can use interactive maps to pinpoint the dates when individuals arrive and leave their winter range. The winter season, along with the transition fall and spring seasons are indicated with different colours.",
    "crumbs": [
      "Movement Patterns"
    ]
  },
  {
    "objectID": "quarto/movement_patterns.html#muskox-calving",
    "href": "quarto/movement_patterns.html#muskox-calving",
    "title": "Movement Patterns",
    "section": "Muskox Calving",
    "text": "Muskox Calving\nMovement behaviour in spring may be related to calving. Previous studies in Greenland have shown that muskoxen benefit from earlier spring green-up (Eikelenboom et al., 2021), so muskoxen may be able to alter their movement behaviour depending on green-up timing. In 2008 and 2009, surveys were flown to relocate collared muskoxen to see if they were accompanied by calves. We can plot these data on graphs of step lengths in the spring to investigate how approximate calving dates impact movement.\n\n\n\n\n\n\n\n\n\nComparing the graphs of muskoxen that were observed to be accompanied by a calf to those that were not, there does not appear to be a major difference in the general trend for step lengths. 7013 in 2009 is the only trajectory to show a sudden decrease in step lengths that resembles those used to determine calving dates for caribou (Bonar et al., 2018; DeMars et al., 2013), but this signal is not present for any of the other muskoxen. For most muskoxen, there is a marked increase in step length in mid-May, but this does not appear to be related to calving dates. The survey data shows that in almost all spring surveys (April onwards), the collared muskoxen were in groups consisting of other females with calves. Only 7010 in 2009 was in a group that wasn’t observed to contain calves until the June survey. I am not sure if these observations",
    "crumbs": [
      "Movement Patterns"
    ]
  },
  {
    "objectID": "quarto/home_range.html#createing-auto-correlated-kernel-density-estimates",
    "href": "quarto/home_range.html#createing-auto-correlated-kernel-density-estimates",
    "title": "Home Range",
    "section": "Createing Auto Correlated Kernel Density Estimates",
    "text": "Createing Auto Correlated Kernel Density Estimates\nWe can use kernel density estimates that account for these underlying movement models using the akde function.\n\nbest_fit &lt;- fit[1,]\nakde &lt;- mapply(function(x,y){akde(x,y)},musk_tel,best_fit)\nEXT &lt;- lapply(akde, extent, level=0.95)\nfor(i in 1:length(akde)){plot(musk_tel[[i]],UD=akde[[i]],\n                              xlim=EXT[[i]]$x,ylim=EXT[[i]]$y);\n  title(names(musk_tel)[[i]])}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmap(akde, function(x){as_tibble(summary(x)$CI)}) %&gt;%\n  list_rbind() %&gt;%\n  set_names(c(\"lower\",\"mean\",\"upper\")) %&gt;%\n  mutate(id = factor(names(musk_tel), levels = names(musk_tel)),\n         mean = round(mean),\n         lower = round(lower),\n         upper = round(upper)) %&gt;%\n  select(id,lower,mean,upper) %&gt;%\n  ggplot(aes(x = id, y = mean)) +\n  geom_pointrange(aes(ymin = lower, ymax = upper)) +\n  ylab(\"Home range size (km2)\") +\n  xlab(\"Muskox ID\") +\n  theme_bw()\n\n\n\n\n\n\n\nmusk_move %&gt;%\n  filter(individual.local.identifier %in% names(musk_tel)) %&gt;%\n  mutate(date = as.Date(timestamp),\n         id = factor(individual.local.identifier, levels = names(musk_tel))) %&gt;%\n  group_by(id) %&gt;%\n  summarise(days = max(date) - min(date)) %&gt;%\n  ggplot(aes(x = id, y = days)) +\n  geom_point(size = 2) +\n  theme_bw()",
    "crumbs": [
      "Home Range"
    ]
  },
  {
    "objectID": "quarto/home_range.html#creating-auto-correlated-kernel-density-estimates",
    "href": "quarto/home_range.html#creating-auto-correlated-kernel-density-estimates",
    "title": "Lifetime Home Range",
    "section": "Creating Auto Correlated Kernel Density Estimates",
    "text": "Creating Auto Correlated Kernel Density Estimates\nWe can use kernel density estimates that account for these underlying movement models using the akde function. We will also plot the telemetry points and colour them by day in order to understand when nomadic/dispersal events occur.\n\nbest_fit &lt;- fit[1,]\nakde &lt;- mapply(function(x,y){akde(x,y)},musk_tel,best_fit)\nsaveRDS(akde, here(\"output/akde.rds\"))\nEXT &lt;- lapply(akde, extent, level=0.95)\nfor(i in 1:length(akde)){\n  COL &lt;- color(musk_tel[[i]],by='time')\n  plot(musk_tel[[i]],UD=akde[[i]],\n       xlim=EXT[[i]]$x,ylim=EXT[[i]]$y,\n       col = COL, lwd=4);\n  title(names(musk_tel)[[i]])\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFor the most part, the home range estimates look pretty good, but there are some concerning aspects with clusters of points that look like they represent dispersal events. 706, 7011, 7012, and 7013 all have periods of time (usually at the start or end of the time series) where they moved away from the core home range area. I’m not sure if these are concerning, but some of the odd variograms would suggest they are.\nAnother thing to consider is that for some muskoxen, there appears to be some periodicity in their movement, which affects the home rnage estimates. 708 is a good example where the semi-variance decreases at certain times leading to an underestimated variogram model. This causes the fairly conservative home range estimate.\nLastly, these models don’t account for barrier to muskox movement. 7080 in particular has a lake in its home range that it travles around. This is probably why the home range estimate is split into different sections despite the variogram suggesting a range resident individual.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere does not appear to be a strong relationship between the days that a collar was active and the size of the home range. The muskox with the second most number of days has the highest home range estimate, but the muskox with the least amount of days has the second highest estimate.\nThe range of home range sizes overlaps with a study conducted for 11 muskoxen in Bathhurst, Devon, and Cornwallis (233 - 2494 km2; Anderson and Ferguson, 2016). They used minimum convext polygons with up to three years of data for each muskox.",
    "crumbs": [
      "Lifetime Home Range"
    ]
  },
  {
    "objectID": "quarto/home_range.html#seasonal-ranges",
    "href": "quarto/home_range.html#seasonal-ranges",
    "title": "Home Range",
    "section": "Seasonal Ranges",
    "text": "Seasonal Ranges\n\nmusk_season &lt;- readRDS(here(\"data/processed/musk_season.rds\"))",
    "crumbs": [
      "Home Range"
    ]
  },
  {
    "objectID": "quarto/seasonal_range.html",
    "href": "quarto/seasonal_range.html",
    "title": "Seasonal Range",
    "section": "",
    "text": "Using Brownian Bridge Movement Model from the adehabitatHR package to estimate seasonal ranges for each muskoxen. Summer and winter/calving are separated based on presence of snow and movement behaviours (see Movement Patterns). First let’s look at how long each season is for each muskoxen.\nmusk_season_length &lt;- musk_season %&gt;%\n  mutate(date = as.Date(datetime),\n         year_min = ifelse(season==\"Winter\"&month&lt;=5,year-1,year),\n         season = factor(season, \n                         levels = c(\"Summer\", \"Winter\", \"Calving\"))) %&gt;%\n  drop_na(season) %&gt;%\n  group_by(Id_Number, year_min, season) %&gt;%\n  mutate(seas_length = max(date)-min(date)) %&gt;%\n  ungroup() \n\n\nmusk_season_length %&gt;%\n  st_drop_geometry() %&gt;%\n  group_by(Id_Number, season, year_min) %&gt;%\n  summarise(min = min(as.Date(date)),\n            max = max(as.Date(date))) %&gt;%\n  ggplot(aes(y = Id_Number, xmin = min, xmax = max, colour = season)) +\n  geom_linerange(linewidth = 2) +\n  scale_x_date()\nSome seasons are pretty short, due to the season overlapping the start or end of the monitoring period for that individuals. Let’s start by setting a cut-off for each season to be included in this analysis. Since muskoxen are moving around a lot in the summer, we’ll specify that we want relocations from the full season. There were two muskoxen that had their collars come off in August, so these were not considered when estimating summer home ranges. We captured full calving seasons in all but one instance (708 in 2008). Collars were typically deployed and removed during the winter, so there were several instances where we did not have relocations for the full winter season. For now we will use cutoff of three months (90 days). Winter typically lasts from end of October to our cutoff of April 1st. This ensures roughly 60% of the season is included for winter. Later we’ll compare different lengths of data to see the effect on home range estimates.\nmusk_collar_seas &lt;- musk_season_length %&gt;%\n  ### create groupings for muskoxen (7012 and 7013 overlap but the rest are separated)\n  mutate(range_id = str_c(Id_Number,\"_\",year_min,\"_\",season),\n         group = ifelse(Id_Number %in% c(7012,7013),\n                        \"7012_13\", str_c(Id_Number))) %&gt;%\n  group_by(Id_Number) %&gt;%\n  mutate(max_date = max(date),\n         min_date = min(date)) %&gt;%\n  group_by(range_id) %&gt;%\n  mutate(flag = ifelse(max(date)==max_date|min(date)==min_date,1,0)) %&gt;%\n  ungroup() %&gt;%\n  filter(flag == 0|\n           season == \"Calving\"&seas_length &gt;= 28|\n           season == \"Winter\"&seas_length &gt;=90|\n           season == \"Summer\"&seas_length &gt;= 120,\n         ### remove this calving season as the collar seems to have fallen off \n         ### part way through the season\n         range_id != \"706_2009_Calving\") %&gt;%\n  ungroup() %&gt;%\n  mutate(range_id = factor(range_id)) %&gt;%\n  arrange(range_id)\n\nmusk_collar_seas %&gt;%\n  st_drop_geometry() %&gt;%\n  group_by(range_id, season) %&gt;%\n  summarise(length = median(seas_length)) %&gt;%\n  group_by(season) %&gt;%\n  summarise(yday = mean(length))\n\n# A tibble: 3 × 2\n  season  yday          \n  &lt;fct&gt;   &lt;drtn&gt;        \n1 Summer  172.00000 days\n2 Winter  139.83333 days\n3 Calving  40.73333 days\n\nxy &lt;- musk_collar_seas %&gt;%\n  sf::st_transform(\"+proj=utm +zone=9\") %&gt;%\n  sf::st_coordinates()\nmusk_ltraj &lt;- adehabitatLT::as.ltraj(xy = xy, date = musk_collar_seas$datetime, id = musk_collar_seas$range_id)\nOur first step towards creating seasonal home ranges is to determine GPS accuracy using stationary GPS data. We can use data from collar 707 as this collar was confirmed to have released early. We will calculate the standard deviation of the euclidean distances to estimate GPS accuracy. This will be used as the sig2 parameter in our models and can be used to help estimate the other model parameter, sig1, which is related to home range size.\nWe can then fit movement models for each muskox for each season and estimate utilization distributions. From these distributions we can compare size and overlap between seasons, years, and muskoxen.\nBelow we plot an example seasonal range as well as a comparison between 90% seasonal ranges and 50% core seasonal ranges for each season.\nsig2 &lt;- musk_collar_cal %&gt;%\n  sf::st_transform(\"+proj=utm +zone=9\") %&gt;%\n  filter(Id_Number == 707) %&gt;%\n  mutate(x = sf::st_coordinates(geometry)[,1],\n         y = sf::st_coordinates(geometry)[,2]) %&gt;%\n  st_drop_geometry() %&gt;%\n  group_by(Id_Number) %&gt;%\n  ### calculate distances to estimate euclidean standard deviation (telemetry error)\n  mutate(mean_x = mean(x),\n         mean_y = mean(y),\n         distance = sqrt((x-mean_x)^2+(y-mean_y)^2)) %&gt;%\n  summarise(sd = sd(distance)) %&gt;%\n  pull(sd) %&gt;%\n  mean()\nsig1 &lt;- liker(musk_ltraj, \n              sig2 = sig2, \n              rangesig1 = c(0.1,20),\n              plotit = FALSE)\nbbox &lt;- musk_collar_seas %&gt;%\n  sf::st_transform(\"+proj=utm +zone=9\") %&gt;%\n  mutate(x = sf::st_coordinates(geometry)[,1],\n         y = sf::st_coordinates(geometry)[,2]) %&gt;%\n  st_drop_geometry()  %&gt;%\n  group_by(group) %&gt;%\n  summarise(xmin = min(x),\n         xmax = max(x),\n         ymin = min(y),\n         ymax = max(y))\n\nsp_pixels = list()\nfor(i in 1:nrow(bbox)){\n  coords &lt;- expand.grid(x = seq(bbox$xmin[i]-5000,bbox$xmax[i]+5000,100),\n                      y = seq(bbox$ymin[i]-5000,bbox$ymax[i]+5000,100))\n  sf_points &lt;- st_as_sf(coords, coords = c(\"x\", \"y\"), crs = \"+proj=utm +zone=9\")\n  sp_points &lt;- as(sf_points, \"Spatial\")\n  sp_pixels[[bbox$group[i]]] &lt;- SpatialPixels(sp_points)\n}\n\nmusk_bb &lt;- list()\nlookup &lt;- musk_collar_seas %&gt;%\n  st_drop_geometry() %&gt;%\n  dplyr::select(range_id, group) %&gt;%\n  distinct()\n# for(i in 1:length(sig1)){\n#   musk_bb[[i]] &lt;- kernelbb(musk_ltraj[i],\n#                            sig1 = sig1[[i]]$sig1,\n#                            sig2 = sig2,\n#                            grid=sp_pixels[[lookup$group[i]]])\n# }\n# saveRDS(musk_bb, here(\"data/processed/musk_bb.rds\"))\nmusk_bb &lt;- readRDS(here(\"data/processed/musk_bb.rds\"))\nLet’s take a look at the contour plots for each individual to make sure they look okay:\nLoading basemap 'topographic' from map service 'osm'...\nUsing geom_raster() with maxpixels = 659712.\n\n\n\n\n\n\n\n\n\nLoading basemap 'topographic' from map service 'osm'...\nUsing geom_raster() with maxpixels = 520010.\n\n\n\n\n\n\n\n\n\nLoading basemap 'topographic' from map service 'osm'...\nUsing geom_raster() with maxpixels = 362340.\n\n\n\n\n\n\n\n\n\nLoading basemap 'topographic' from map service 'osm'...\nUsing geom_raster() with maxpixels = 362340.\n\n\n\n\n\n\n\n\n\nLoading basemap 'topographic' from map service 'osm'...\nUsing geom_raster() with maxpixels = 550715.\n\n\n\n\n\n\n\n\n\nLoading basemap 'topographic' from map service 'osm'...\nUsing geom_raster() with maxpixels = 747830.\n\n\n\n\n\n\n\n\n\nLoading basemap 'topographic' from map service 'osm'...\nUsing geom_raster() with maxpixels = 523905.\nThese look reasonable. Let’s also plot the seasonal range sizes to compare between individuals and years:\nThere are some large ranges in 2009, particularly for 7011 (summer and calving), 7010 winter, 7012 calving, and 708 winter.\nInterestingly, summer home range sizes are fairly consistent within individuals and between the two individuals (7012 and 7013) that overlap in space use. Perhaps the land cover or topography of the area plays a large role in determining home range size. This is not the case with winter or calving range, which show a lot of variability within individuals, but appear to be similar within years. This suggests a role of weather (e.g. snow depth) in determining winter and calving range size, though differences in topography and land cover could still account for the variation seen in some years (e.g. 2009). Let’s compare these differences using mean absolute percentage differences for range sizes\nseason\nmean_percent_diff_id\nmean_percent_diff_year\n\n\n\n\nSummer\n0.07\n0.38\n\n\nWinter\n0.66\n0.32\n\n\nCalving\n0.51\n0.45",
    "crumbs": [
      "Seasonal Range"
    ]
  },
  {
    "objectID": "quarto/home_range.html#incorporating-error",
    "href": "quarto/home_range.html#incorporating-error",
    "title": "Lifetime Home Range",
    "section": "Incorporating Error",
    "text": "Incorporating Error\nWe will use location information for the collar 707, which had its release mechanism triggered early. Since this collar was stationary once it was released from the animal, we can use deviations from its average position to estimate telemetry error. This will partially account for instances where the muskox appeared to have moved between successive time stamps, but really didn’t or instances where the muskox appeared to move between successive time stamps, but really didn’t.\n\nmusk_collar_cal &lt;- read.csv(here(\"data/raw/muskox_data/musk_collar_cal_movebank.csv\"))\nmusk_cal &lt;- as.telemetry(musk_collar_cal)\n\nUERE &lt;- uere.fit(musk_cal)\nuere(musk_tel) &lt;- UERE\nmusk_var_mod_err &lt;- lapply(musk_tel, ctmm.guess, interactive = FALSE, CTMM=ctmm(error=TRUE))\nmusk_var_mod_err[[2]] &lt;- ctmm.guess(musk_tel[[2]], interactive = FALSE, CTMM=ctmm(error=TRUE, dt = dt))\n\nplot(musk_cal[[1]])\n\n\n\n\n\n\n\n\nWe can now rerun our original movement model selection process while incorporating the error model estimated above. Let’s plot the model results again, this time comparing the top models with those that did not have telemetry errors accounted for.\n\n\n[1] \"706\"\n\n\n                           ΔAICc ΔRMSPE (km)  DOF[area]\nOUF anisotropic error    0.00000   2.2344179   9.617917\nOUF error               42.65746   2.0474638   9.991301\nOU anisotropic error    68.86482   2.4026258   7.366628\nOU error               107.91054   2.2263595   7.684893\nOUf anisotropic error 1316.99896   0.1567056 219.546373\nOUf error             1367.62263   0.0000000 228.148524\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"708\"\n\n\n                          ΔAICc ΔRMSPE (km) DOF[area]\nOUF anisotropic error    0.0000   1.2443120  25.89589\nOU anisotropic error   116.8106   1.3508841  18.22860\nOUF error              198.9487   1.8528991  21.97189\nOU error               325.4510   1.9797853  15.30454\nOUf anisotropic error 1029.9538   0.0000000 285.93097\nOUf error             1268.4792   0.4381442 282.14732\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"7010\"\n\n\n                          ΔAICc ΔRMSPE (km)  DOF[area]\nOUF anisotropic error   0.00000   3.7607686   8.090526\nOUF error              57.72832   3.9154332   8.110248\nOU anisotropic error  149.19731   4.6047100   4.914693\nOU error              211.55879   4.5896619   4.985999\nOUf anisotropic error 442.14512   0.0000000 113.619823\nOUf error             497.21636   0.2162585 112.606598\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"7011\"\n\n\n                           ΔAICc  ΔRMSPE (km)   DOF[area]\nOUF anisotropic error     0.0000 2.194838e+00    8.989618\nOU anisotropic error    352.7649 3.423462e+00    5.587907\nOUF error               468.7999 3.202627e+00    8.366086\nOU error                854.4724 4.413170e+00    5.282838\nOUf anisotropic error 27860.7070 2.326091e-07 2789.993767\nOUf error             30005.0189 0.000000e+00 2789.999385\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"7012\"\n\n\n                          ΔAICc ΔRMSPE (km)  DOF[area]\nOUF anisotropic error    0.0000   3.6080627  12.453757\nOUF error              136.5608   4.8879238  10.392073\nOU anisotropic error   296.3918   4.1337411   8.085986\nOU error               476.4013   5.8450604   6.302248\nOUf anisotropic error 2682.0341   0.0000000 368.899939\nOUf error             2824.9064   0.6804765 379.614187\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"7013\"\n\n\n                          ΔAICc ΔRMSPE (km)  DOF[area]\nOUF anisotropic error    0.0000   3.2654029  13.848277\nOUF error              108.0515   2.7264739  15.168750\nOU anisotropic error   350.2036   3.9191996   8.005993\nOU error               445.6725   3.3786391   8.682609\nOUf anisotropic error 2123.0274   0.2645425 359.847800\nOUf error             2205.6538   0.0000000 383.552354\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"7080\"\n\n\n                           ΔAICc ΔRMSPE (km) DOF[area]\nOUF anisotropic error    0.00000   2.2307869  23.94462\nOUF error               73.95151   2.8201863  21.23734\nOU anisotropic error   216.76331   2.4752629  15.64489\nOU error               278.57094   3.0511870  14.20347\nOUf anisotropic error 1048.55323   0.0000000 278.58286\nOUf error             1195.70277   0.4189131 276.36127\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIt appears as though the incorporation of the error model has not made any significant improvements to the fit of the variograms. To further investigate whether we can live with these erorrs, lets try to simulate new data based on these models and compare how well the empirical variograms for the real and simulated data match up with the modelled variograms.",
    "crumbs": [
      "Lifetime Home Range"
    ]
  },
  {
    "objectID": "quarto/home_range.html#simulating-variograms",
    "href": "quarto/home_range.html#simulating-variograms",
    "title": "Lifetime Home Range",
    "section": "Simulating Variograms",
    "text": "Simulating Variograms\nTo illustrate the variability of empirical variograms over long time periods, let’s simulate new data based on the best fitted models.\n\n\n[1] \"706\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"708\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"7010\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"7011\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"7012\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"7013\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"7080\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAt large time scales, the modelled variogram does not appear to match up very well against the empirical variograms of the simulated and observed data. This is because the errors in the variograms (difference between modelled and empirical) are autocorrelated. Small perturbations are carried forward and can add up over time, but these are not necessarily a bad thing for fitting our model.\nIn addition, as the time lag increase, so to does our uncertainty about the estimated semi-variance because larger time lags have fewer pairs of data points to estimate the semi-variance. We have the most certainty at short time lags because we have many pairs of data to estimate uncertainty. It appears as though the simulated variogram is better represented by our current model.",
    "crumbs": [
      "Lifetime Home Range"
    ]
  },
  {
    "objectID": "quarto/home_range.html#subseting-data",
    "href": "quarto/home_range.html#subseting-data",
    "title": "Lifetime Home Range",
    "section": "Subseting Data",
    "text": "Subseting Data\nGiven that the start and end of the sampling period for each muskox can bias the end of the empirical variogram (the longest time lags will be solely based on the distances between the first and last locations), it may be necessary to subset some of the relocations. In particular, many sampling periods start and end in the winter when muskoxen are stationary. If overwintering locations at the start and end happen to be nearby, the variogram will experience a dip at the end and vice versa if they happen to be far apart. To limit the chance of this happening, lets ensure that sampling periods start or end in the summer\n\nmusk_move_sub &lt;- musk_move %&gt;%\n  mutate(timestamp = as.POSIXct(timestamp)) %&gt;%\n  filter(\n    individual.local.identifier == 706&\n      timestamp&gt;=as.POSIXct(\"2008-05-05\")|\n    individual.local.identifier == 708&\n      timestamp&gt;=as.POSIXct(\"2009-05-09\")|\n    individual.local.identifier == 7010&\n      timestamp&gt;=as.POSIXct(\"2009-05-15\")|\n    individual.local.identifier == 7011&\n      timestamp&lt;=as.POSIXct(\"2011-09-28\")|    \n    individual.local.identifier == 7012&\n      timestamp&gt;=as.POSIXct(\"2009-05-19\")|\n    individual.local.identifier %in%c(7013,7080))\n  \nmusk_tel_sub &lt;- as.telemetry(musk_move_sub)\n\nmusk_var_sub &lt;- lapply(musk_tel_sub, variogram, CI=\"Gauss\", fast = TRUE)\ndt &lt;- c(8,24) %#% \"hour\"\nmusk_var_sub[[2]] &lt;- variogram(musk_tel_sub[[2]], dt = dt, CI=\"Gauss\", fast = FALSE)\nmusk_var_sub[[3]] &lt;- variogram(musk_tel_sub[[3]], dt = dt, CI=\"Gauss\", fast = FALSE)\n\n\n### fist create a best guess set of parameters for the model\nmusk_sub_mod &lt;- lapply(musk_var_sub, variogram.fit, interactive = FALSE)\n# fit3 &lt;- mapply(function(x,y){ctmm.select(x,y,verbose = TRUE,cores = 3)},musk_tel_sub,musk_sub_mod)\n# saveRDS(fit3, here(\"output/musk_sub_fit.rds\"))\nfit3 &lt;- readRDS(here(\"output/musk_sub_fit.rds\"))\nfor (i in 1:length(musk_var)){print(musk_var_sub[[i]]@info$identity);print(summary(fit3[,i])); plot(musk_var[[i]], CTMM = fit[,i], col.CTMM=c(\"red\",\"purple\",\"blue\", \"green\"),xlim = xlim,,level=0.5);title(\"full dataset\");plot(musk_var_sub[[i]], CTMM = fit3[,i], col.CTMM=c(\"red\",\"purple\",\"blue\", \"green\"),xlim = xlim,,level=0.5); title(\"data subset\")}\n\n[1] \"706\"\n                    ΔAICc ΔRMSPE (km)  DOF[area]\nOUF anisotropic   0.00000    2.143457   8.800598\nOUF              28.26221    2.004529   9.024789\nOU anisotropic   44.22490    2.258183   6.992280\nOUf anisotropic 888.65792    0.000000 161.289082\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"708\"\n                   ΔAICc ΔRMSPE (km) DOF[area]\nOUF anisotropic   0.0000    1.231015  25.36386\nOUF             101.1670    1.353331  17.67646\nOU anisotropic  171.9603    1.824976  21.50742\nOUf anisotropic 844.0938    0.000000 258.06527\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"7010\"\n                    ΔAICc ΔRMSPE (km) DOF[area]\nOUF anisotropic   0.00000    5.283650  5.359900\nOUF              34.71975    6.097631  4.928991\nOU anisotropic   93.96447    6.865491  3.335552\nOUf anisotropic 319.64118    0.000000 83.851258\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"7011\"\n                    ΔAICc ΔRMSPE (km)  DOF[area]\nOUF anisotropic    0.0000    4.765042  10.583397\nOUF              368.0569    5.966762   6.069101\nOU anisotropic   452.3840    6.329158   9.043029\nOUf anisotropic 2253.1642    0.000000 322.782766\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"7012\"\n                    ΔAICc ΔRMSPE (km) DOF[area]\nOUF anisotropic    0.0000    2.700785  18.66284\nOUF              128.4660    3.630577  15.48266\nOU anisotropic   266.3699    3.226017  11.28586\nOUf anisotropic 2113.4678    0.000000 393.80406\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"7013\"\n                    ΔAICc ΔRMSPE (km)  DOF[area]\nOUF anisotropic    0.0000    3.001039  13.847962\nOUF              108.0549    2.462134  15.169075\nOU anisotropic   350.3208    3.655037   8.005003\nOUf anisotropic 2123.2222    0.000000 359.888433\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"7080\"\n                     ΔAICc ΔRMSPE (km) DOF[area]\nOUF anisotropic    0.00000    2.230868  23.94349\nOUF               73.95642    2.820264  21.23632\nOU anisotropic   216.81563    2.475390  15.64332\nOUf anisotropic 1048.54150    0.000000 278.57428\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThese look similar overall. The variogram for 7080 still appears to be not well matched at short lags. This could be due to the fact that 7080 traverses a lake that appears to fall in the middle of their home range, thus impacting the movement paths it takes",
    "crumbs": [
      "Lifetime Home Range"
    ]
  },
  {
    "objectID": "quarto/seasonal_range.html#range-overlap",
    "href": "quarto/seasonal_range.html#range-overlap",
    "title": "Seasonal Range",
    "section": "Range Overlap",
    "text": "Range Overlap\nWe will now use the kerneloverlap function to investigate the degree of overlap between seasonal ranges within the same year and between years. This function implements a number of overlap metrics that are well suited to measuring overlap of utilization distributions. Consequently, we can explore not only overlap between contours of a given size, but also the degree to which high probability regions of ranges overlap. For example the PHR function calculates the probability of an individual from one home range being found in another home range.\n\noverlap_func &lt;- function(group){\n  rows = which(lookup$group == group)\n  temp &lt;- musk_bb[rows]\n  class(temp) &lt;- \"estUDm\"\n  poverlap &lt;- kerneloverlaphr(temp, method = \"HR\") %&gt;%\n    as_tibble(.name_repair = \"unique\") %&gt;%\n    setNames(lookup$range_id[rows]) %&gt;%\n    mutate(range_id = lookup$range_id[rows],\n           metric = \"Percent Overlap\") %&gt;%\n    pivot_longer(1:length(rows), \n                 names_to = \"range_id_compare\", \n                 values_to = \"value\")\n  volume &lt;- kerneloverlaphr(temp, method = \"VI\") %&gt;%\n    as_tibble(.name_repair = \"unique\") %&gt;%\n    setNames(lookup$range_id[rows]) %&gt;%\n    mutate(range_id = lookup$range_id[rows],\n           metric = \"Volume of UD\") %&gt;%\n    pivot_longer(1:length(rows), \n                 names_to = \"range_id_compare\", \n                 values_to = \"value\") %&gt;%\n    mutate(value = round(value,3))\n  overlap &lt;- bind_rows(poverlap,volume)  \n}\n\nmusk_overlap &lt;- map(unique(lookup$group), function(.x){overlap_func(.x)}) %&gt;%\n  list_rbind() %&gt;%\n  filter(range_id != range_id_compare) %&gt;%\n  left_join(musk_collar_seas %&gt;% \n              st_drop_geometry() %&gt;%\n              dplyr::select(range_id, Id_Number, year_min, season) %&gt;%\n              distinct(),\n            by = c(\"range_id_compare\" = \"range_id\")) %&gt;%\n  rename(Id_Number_compare = Id_Number,\n         year_min_compare = year_min,\n         season_compare = season) %&gt;%\n  left_join(musk_collar_seas %&gt;% \n              st_drop_geometry() %&gt;%\n              dplyr::select(range_id, Id_Number, year_min, season) %&gt;%\n              distinct())\n\nsaveRDS(musk_overlap, here(\"output/musk_overlap.rds\"))\n\nLet’s plot the overlap metrics. The first graph shows the percent overlap of an individual’s 95% home range contour from different seasons and years. Home rqanges represented by columns are compared against home ranges represented by rows and separated by different year lags.\nThe second graph depicts the probability that an individual with a utilization distribution represented by the row is found in the 95% home range contour represented by the column.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA few patterns are clear from these graphs:\n\nSummer home ranges shared ~40% of their area across years.\nWinter and calving home ranges typically shared a high overlap with summer ranges, especially those from the same year. However, there was a lot of variation in this overlap, with some seasons having near 100% overlap and some having very little overlap.\nCalving season ranges shared a high overlap with the winter season range immediately preceding it, but there was considerable variation in this overlap.\nWinter and calving season ranges showed negligible overlap across years, suggesting low seasonal range fidelity.\n\nLastly, let’s look at the comparison of seasonal ranges between muskox 7012 and 7013, which were the only muskoxen that overlapped in space and time.\n\n\n\n\n\n\n\n\n\nThe highest overlap is during the summer. These muskoxen do not appear to share large areas during the winter or calving season and despite being found in the same location occasionally, they appeared to wander on their own for most of the time they were collared.",
    "crumbs": [
      "Seasonal Range"
    ]
  },
  {
    "objectID": "quarto/seasonal_range.html#check-data-cutoffs",
    "href": "quarto/seasonal_range.html#check-data-cutoffs",
    "title": "Seasonal Range",
    "section": "Check Data Cutoffs",
    "text": "Check Data Cutoffs\nLet’s first check to see if our data cutoffs are appropriate. We’ll subset our datasets for winter to look at the individual-season combinations with relocations covering the full season. We’ll then calculate home ranges for the full dataset and data set with 30,60,90 days removed from the start or end of the time series. We’ll then look at percent overlap between the home ranges. We’ll consider the subset to be a good approximation of the seasonal home range if the percent overlap is &gt;80%.\n\ntemp &lt;- musk_season_length %&gt;%\n  mutate(range_id = str_c(Id_Number,\"_\",year_min,\"_\",season)) %&gt;%\n  st_drop_geometry() %&gt;%\n  group_by(range_id, season) %&gt;%\n  summarise(min = min(date),\n            max = max(date),\n            seas_length = median(seas_length))\n\ntop_seas &lt;- musk_collar_seas %&gt;%\n  distinct(range_id, season, month) %&gt;%\n  group_by(range_id) %&gt;%\n  filter(season == \"Winter\",\n         n()&gt;=5) %&gt;%\n  pull(range_id)\n  \ncut_check &lt;- musk_collar_seas %&gt;%\n  filter(range_id %in% top_seas)\ncut_check_30beg &lt;- cut_check %&gt;%\n  group_by(range_id) %&gt;%\n  arrange(datetime) %&gt;%\n  filter(date &lt; (max(date)-30))\n  \n\nxy &lt;- musk_collar_seas %&gt;%\n  sf::st_transform(\"+proj=utm +zone=9\") %&gt;%\n  sf::st_coordinates()\nmusk_ltraj &lt;- adehabitatLT::as.ltraj(xy = xy, date = musk_collar_seas$datetime, id = musk_collar_seas$range_id)",
    "crumbs": [
      "Seasonal Range"
    ]
  },
  {
    "objectID": "quarto/seasonal_range.html#determinants-of-home-range-size",
    "href": "quarto/seasonal_range.html#determinants-of-home-range-size",
    "title": "Seasonal Range",
    "section": "Determinants of Home Range Size",
    "text": "Determinants of Home Range Size\nNow we will look to model variables that are likely to influence the size of home ranges. Since we have few observations per season (sample size 12 - 15), we want 1 - 2 explantory variables per season model. Average snow cover during the winter and calving seasons may impact home range size, with individuals being restricted from moving large distances. During the summer, the percent of landcover suitable for foraging or number of foraging patches may impact the size of home ranges with larger home ranges occurring when individuals need to travel more often or further to get to foraging areas. Other barriers to movement may also affect home range size, including ridges and lakes.",
    "crumbs": [
      "Seasonal Range"
    ]
  },
  {
    "objectID": "quarto/annual_range.html",
    "href": "quarto/annual_range.html",
    "title": "Annual Home Range",
    "section": "",
    "text": "musk_annual &lt;- musk_collar_filt  %&gt;%\n  mutate(date = as.Date(datetime)) %&gt;%\n  group_by(Id_Number, year) %&gt;%\n  mutate(range_id = str_c(Id_Number,\"_\",year),\n         min_month = min(month),\n         max_month = max(month)) %&gt;%\n  ungroup() %&gt;%\n  filter(min_month &lt;= 2,\n         max_month &gt;= 11)%&gt;%\n  sf::st_transform(\"+proj=utm +zone=9\")\n\n\nmusk_mcp &lt;- mcp(musk_annual %&gt;% dplyr::select(range_id) %&gt;% as_Spatial(),\n                percent = 95, unout = \"km\")\nsaveRDS(musk_mcp, here(\"output/musk_mcp.rds\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmean\nmin\nmax\n\n\n\n\n383\n186\n747",
    "crumbs": [
      "Annual Home Range"
    ]
  },
  {
    "objectID": "quarto/seasonal_range_mod.html",
    "href": "quarto/seasonal_range_mod.html",
    "title": "Home Range Modelling",
    "section": "",
    "text": "Now we will look to model variables that are likely to influence the size of home ranges. Since we have few observations per season (sample size 12 - 15), we want 1 - 2 explantory variables per season model. Average snow cover during the winter and calving seasons may impact home range size, with individuals being restricted from moving large distances. During the summer, the percent of landcover suitable for foraging or number of foraging patches may impact the size of home ranges with larger home ranges occurring when individuals need to travel more often or further to get to foraging areas. Other barriers to movement may also affect home range size, including ridges and lakes.",
    "crumbs": [
      "Home Range Modelling"
    ]
  },
  {
    "objectID": "quarto/seasonal_range_mod.html#winter-season-model",
    "href": "quarto/seasonal_range_mod.html#winter-season-model",
    "title": "Home Range Modelling",
    "section": "Winter Season Model",
    "text": "Winter Season Model\nWe’ll start by estimating average snow depth for winter and running model with muskox ID as a random effect. For this model, we will use the winter home range estimates that were limited to the months January-March to control for season length and to focus on the periods of highest snow depth.\n\nsm_crop &lt;- terra::rast(here(\"data/processed/sm_crop.nc\"), \n                       drivers=\"NETCDF\")\ndaterange &lt;- seq( as.Date(\"2007-01-01\"), as.Date(\"2012-12-31\"), by=\"+1 day\")\n\nsnow_wint_func &lt;- function(id, range){\n  year &lt;- musk_seascontwint %&gt;%\n    filter(range_id == !!id, range == !!range) %&gt;%\n    pull(year_min)\n  zones &lt;- rasterize(musk_seascontwint %&gt;%\n                           filter(range_id == !!id, range == !!range) %&gt;%\n                      sf::st_transform(terra::crs(sm_crop)) %&gt;%\n                        vect(),\n                    sm_crop, touches = TRUE)\n  rowids &lt;- which(month(daterange)&gt;=11&year(daterange)==year|\n          month(daterange)&lt;=3&year(daterange)==(year+1))\n  zonal(sm_crop[[rowids]], zones, \"mean\", wide = FALSE) %&gt;%\n    mutate(date = daterange[rowids], \n           range_id = !!id,\n           range = !!range) %&gt;%\n    select(-layer, -zone)\n}\n\nmusk_wint_home &lt;- musk_seascontwint %&gt;%\n  filter(season == \"Winter\",\n         range == \"home\",\n         seas_length &gt; 115\n         ) %&gt;%\n  pull(range_id) %&gt;%\n  map(function(.x){snow_wint_func(.x, \"home\")}) %&gt;%\n  list_rbind() \nmusk_wint_core &lt;- musk_seascontwint %&gt;%\n  filter(season == \"Winter\",\n         range == \"core\",\n         seas_length &gt; 115\n         ) %&gt;%\n  pull(range_id) %&gt;%\n  map(function(.x){snow_wint_func(.x, \"core\")}) %&gt;%\n  list_rbind() \nmusk_wint &lt;- bind_rows(musk_wint_home, musk_wint_core)\n\n\nmusk_wint_sum &lt;- musk_wint %&gt;%\n  group_by(range_id, range) %&gt;%\n  summarise(snow_depth = mean(value)) %&gt;%\n  left_join(musk_seascontwint %&gt;%\n              select(range_id, range, year_min, seas_length, area, Id_Number)) \n\nmusk_wint_sum %&gt;%\n  ggplot(aes(x = snow_depth, y = log(area), colour = Id_Number)) +\n  geom_point(size = 3) +\n  facet_wrap(~range, scales = \"free\")\n\n\n\n\n\n\n\nwint_home_mod &lt;- nlme::lme(log(area)~scale(snow_depth), random=~1|Id_Number, \n                 data = musk_wint_sum %&gt;% filter(range == \"home\"))\nsummary(wint_home_mod)\n\nLinear mixed-effects model fit by REML\n  Data: musk_wint_sum %&gt;% filter(range == \"home\") \n       AIC      BIC    logLik\n  34.32077 35.10967 -13.16038\n\nRandom effects:\n Formula: ~1 | Id_Number\n        (Intercept)  Residual\nStdDev:    0.492332 0.6685231\n\nFixed effects:  log(area) ~ scale(snow_depth) \n                      Value Std.Error DF   t-value p-value\n(Intercept)        4.866525 0.2865061  5 16.985768  0.0000\nscale(snow_depth) -0.644951 0.2195478  4 -2.937633  0.0425\n Correlation: \n                  (Intr)\nscale(snow_depth) 0.011 \n\nStandardized Within-Group Residuals:\n       Min         Q1        Med         Q3        Max \n-1.0467016 -0.6424886 -0.3389149  0.8494387  1.1550301 \n\nNumber of Observations: 11\nNumber of Groups: 6 \n\nwint_core_mod &lt;- nlme::lme(log(area)~scale(snow_depth), random=~1|Id_Number, \n                 data = musk_wint_sum %&gt;% filter(range == \"core\"))\nsummary(wint_core_mod)\n\nLinear mixed-effects model fit by REML\n  Data: musk_wint_sum %&gt;% filter(range == \"core\") \n       AIC      BIC    logLik\n  36.38433 37.17323 -14.19217\n\nRandom effects:\n Formula: ~1 | Id_Number\n        (Intercept)  Residual\nStdDev:   0.4620916 0.7929465\n\nFixed effects:  log(area) ~ scale(snow_depth) \n                       Value Std.Error DF   t-value p-value\n(Intercept)        2.4814119 0.3063467  5  8.100011  0.0005\nscale(snow_depth) -0.9490831 0.2596157  4 -3.655723  0.0217\n Correlation: \n                  (Intr)\nscale(snow_depth) 0.017 \n\nStandardized Within-Group Residuals:\n       Min         Q1        Med         Q3        Max \n-0.9943372 -0.7665603 -0.1173302  0.7407403  1.3785272 \n\nNumber of Observations: 11\nNumber of Groups: 6 \n\n\nClearly, there is a negative relationship between snow depth and winter range size: as snow depth increases, the size of winter home ranges tends to decrease. In addition, each muskox with multiple years of data had a smaller winter home range in the year with deeper snow.\nIt’s also worth noting that the three instances with the deepest snow all occurred in 2010, but all three home ranges occurred in spatially distinct areas. There could be another weather variable correlated with years that is responsible for the relationship, but snow depth seems the most plausible given previous research. Also, if we include the three winter home ranges that were only calculated for part of the season (due to starting or ending mid winter), they fit the trend as 2007 and 2011 were also years with deeper snow.",
    "crumbs": [
      "Home Range Modelling"
    ]
  },
  {
    "objectID": "quarto/seasonal_range_mod.html#calving-season-model",
    "href": "quarto/seasonal_range_mod.html#calving-season-model",
    "title": "Home Range Modelling",
    "section": "Calving Season Model",
    "text": "Calving Season Model\nNext we will look at the same relationship for the calving seasons:\n\nsm_crop &lt;- terra::rast(here(\"data/processed/sm_crop.nc\"), \n                       drivers=\"NETCDF\")\ndaterange &lt;- seq( as.Date(\"2007-01-01\"), as.Date(\"2012-12-31\"), by=\"+1 day\")\nsnow_calv_func &lt;- function(id, range){\n  year &lt;- musk_seascont %&gt;%\n    filter(range_id == !!id, range == !!range) %&gt;%\n    pull(year_min)\n  zones &lt;- rasterize(musk_seascont %&gt;%\n                           filter(range_id == !!id, range == !!range) %&gt;%\n                      sf::st_transform(terra::crs(sm_crop)) %&gt;%\n                        terra::vect(),\n                    sm_crop, touches = TRUE)\n  rowids &lt;- which(month(daterange)==4&year(daterange)==year)\n  zonal(sm_crop[[rowids]], zones, \"mean\", wide = FALSE) %&gt;%\n    mutate(date = daterange[rowids], \n           range_id = !!id,\n           range = !!range) %&gt;%\n    select(-layer, -zone)\n}\n\nmusk_calv_home &lt;- musk_seascont %&gt;%\n  filter(season == \"Calving\",\n         range == \"home\"\n         ) %&gt;%\n  pull(range_id) %&gt;%\n  map(function(.x){snow_calv_func(.x, \"home\")}) %&gt;%\n  list_rbind() \nmusk_calv_core &lt;- musk_seascont %&gt;%\n  filter(season == \"Calving\",\n         range == \"core\"\n         ) %&gt;%\n  pull(range_id) %&gt;%\n  map(function(.x){snow_calv_func(.x, \"core\")}) %&gt;%\n  list_rbind() \nmusk_calv &lt;- bind_rows(musk_calv_home, musk_calv_core)\n\n\nmusk_calv_sum &lt;- musk_calv %&gt;%\n  group_by(range_id, range) %&gt;%\n  summarise(snow_depth = mean(value)) %&gt;%\n  left_join(musk_seascont %&gt;%\n              select(range_id, range, year_min, seas_length, area, Id_Number)) \n\nmusk_calv_sum %&gt;%\n  ggplot(aes(x = snow_depth, y = log(area), colour = Id_Number)) +\n  geom_point(size = 3) +\n  facet_wrap(~range, scales = \"free\")\n\n\n\n\n\n\n\ncalv_home_mod &lt;- nlme::lme(log(area)~scale(snow_depth), random=~1|Id_Number, \n                 data = musk_calv_sum %&gt;% filter(range == \"home\"))\nsummary(calv_home_mod)\n\nLinear mixed-effects model fit by REML\n  Data: musk_calv_sum %&gt;% filter(range == \"home\") \n       AIC      BIC    logLik\n  54.37607 56.63586 -23.18803\n\nRandom effects:\n Formula: ~1 | Id_Number\n         (Intercept) Residual\nStdDev: 3.305327e-05 1.172453\n\nFixed effects:  log(area) ~ scale(snow_depth) \n                      Value Std.Error DF   t-value p-value\n(Intercept)        3.581696 0.3027261  7 11.831473  0.0000\nscale(snow_depth) -0.327851 0.3133513  7 -1.046274  0.3302\n Correlation: \n                  (Intr)\nscale(snow_depth) 0     \n\nStandardized Within-Group Residuals:\n       Min         Q1        Med         Q3        Max \n-1.5791316 -0.6175628  0.0580814  0.2834192  1.9958384 \n\nNumber of Observations: 15\nNumber of Groups: 7 \n\ncalv_core_mod &lt;- nlme::lme(log(area)~scale(snow_depth), random=~1|Id_Number, \n                 data = musk_calv_sum %&gt;% filter(range == \"core\"))\nsummary(calv_core_mod)\n\nLinear mixed-effects model fit by REML\n  Data: musk_calv_sum %&gt;% filter(range == \"core\") \n       AIC      BIC    logLik\n  71.86365 74.12345 -31.93183\n\nRandom effects:\n Formula: ~1 | Id_Number\n         (Intercept) Residual\nStdDev: 6.581769e-05 2.297216\n\nFixed effects:  log(area) ~ scale(snow_depth) \n                       Value Std.Error DF   t-value p-value\n(Intercept)        0.5972181 0.5931385  7  1.006878  0.3475\nscale(snow_depth) -0.0781536 0.6139567  7 -0.127295  0.9023\n Correlation: \n                  (Intr)\nscale(snow_depth) 0     \n\nStandardized Within-Group Residuals:\n       Min         Q1        Med         Q3        Max \n-2.2820457 -0.4284230  0.3188573  0.4717469  1.4035996 \n\nNumber of Observations: 15\nNumber of Groups: 7 \n\n\nThere is still a negative relationship present between snow depth and calving home range size, but it is no longer significant. Given that we do not actually know which females had calves every year, the presence/absence of calves could have a large impact on the area traversed during this time. For instance, we know that muskox 7010 in 2009 was not seen with a calf during any of the surveys and happens to have the largest home range size during the calving season. Similarly, muskox 7012 in 2009, which had the second largest home range, was not with a calf until May at the earliest. This means 7012 was not restricted from moving around during the deepest parts of the calving season. Removing these two points makes for a much stronger relationship; however this pattern is not universal as there were other muskoxen in 2008 and 2009 that were without calves during April and still had small home ranges. The fact that these muskoxen travel in groups needs to be taken into consideration as well because even if the collared muskoxen does not have a calf, its movements may still be restricted by the movements of the group. Most groups observed in 2008 and 2009 had at least one calf during the calving season. One exception was 7010 in 2009, which was observed to be in a group with a calf at the beginning of April but not in May.",
    "crumbs": [
      "Home Range Modelling"
    ]
  },
  {
    "objectID": "quarto/seasonal_range_mod.html#summer-season-model",
    "href": "quarto/seasonal_range_mod.html#summer-season-model",
    "title": "Home Range Modelling",
    "section": "Summer Season Model",
    "text": "Summer Season Model\nFor the summer season, length of season and forage availability are likely to be more important for determining home range size than weather conditions (though extreme heat and bugs in the summer could impact movement as well). Like winter and calving season models, we will stick with one predictor variable to avoid issues with overfitting. In this case, we will look at the percentage of shrubland and grassland within each home range, with the hypothesis that areas with less shrubland/grassland will mean muskoxen will need to travel further to meet their energy demands and consequently have larger home ranges.\nWe’ll start by loading the land cover data and calculating percent cover.\n\nlc_2010_crop &lt;- terra::rast(here(\"data/processed/lc_2010_crop.tif\"))\nlc_atts &lt;- readRDS(here(\"data/processed/lc_atts.rds\"))\n### land cover ids 8 and 10 coorespond to the land covers of interest\nlcc_func &lt;- function(id, range){\n  points &lt;- musk_seascont %&gt;%\n    filter(range_id == !!id, range == !!range) %&gt;%\n    sf::st_transform(terra::crs(lc_2010_crop))\n  lc_2010_crop2 &lt;- terra::crop(lc_2010_crop, points)\n  zones &lt;- rasterize(points %&gt;%\n                        terra::vect(),\n                    lc_2010_crop2, touches = TRUE)\n  ct &lt;- crosstab(c(zones, lc_2010_crop2)) %&gt;%\n    as_tibble() %&gt;%\n    mutate(range_id = !!id,\n           range = !!range)\n}\n\nmusk_sum_home &lt;- musk_seascont %&gt;%\n  filter(season == \"Summer\",\n         range == \"home\") %&gt;%\n  pull(range_id) %&gt;%\n  map(function(.x){lcc_func(.x, \"home\")}) %&gt;%\n  list_rbind() \nmusk_sum_core &lt;- musk_seascont %&gt;%\n  filter(season == \"Summer\",\n         range == \"core\") %&gt;%\n  pull(range_id) %&gt;%\n  map(function(.x){lcc_func(.x, \"core\")}) %&gt;%\n  list_rbind() \nmusk_sum &lt;- bind_rows(musk_sum_home, musk_sum_core)\n\n\nmusk_sum_sum &lt;- musk_sum %&gt;%\n  mutate(for_lc = ifelse(Canada2010%in%c(8,10,11,12,13),1,0)) %&gt;%\n  group_by(range_id, range) %&gt;%\n  summarise(total = sum(n),\n            for_tot = sum(n*for_lc),\n            for_per = for_tot/total) %&gt;%\n  left_join(musk_seascont %&gt;%\n              select(range_id, range, year_min, seas_length, area, Id_Number)) \n\nmusk_sum_sum %&gt;%\n  ggplot(aes(x = for_per, y = log(area), colour = Id_Number)) +\n  geom_point(size = 3) +\n  facet_wrap(~range, scales = \"free\")\n\n\n\n\n\n\n\nsum_home_mod &lt;- nlme::lme(log(area)~scale(for_per), random=~1|Id_Number, \n                 data = musk_sum_sum %&gt;% filter(range == \"home\"))\nsummary(sum_home_mod)\n\nLinear mixed-effects model fit by REML\n  Data: musk_sum_sum %&gt;% filter(range == \"home\") \n       AIC      BIC   logLik\n  14.21694 15.80852 -3.10847\n\nRandom effects:\n Formula: ~1 | Id_Number\n        (Intercept)   Residual\nStdDev:   0.5533838 0.09158007\n\nFixed effects:  log(area) ~ scale(for_per) \n                  Value  Std.Error DF  t-value p-value\n(Intercept)    9.690539 0.21127654  6 45.86661  0.0000\nscale(for_per) 0.154817 0.07617671  5  2.03235  0.0978\n Correlation: \n               (Intr)\nscale(for_per) 0.046 \n\nStandardized Within-Group Residuals:\n        Min          Q1         Med          Q3         Max \n-1.48503085 -0.29697479  0.01338312  0.29728898  1.44623295 \n\nNumber of Observations: 13\nNumber of Groups: 7 \n\nsum_core_mod &lt;- nlme::lme(log(area)~scale(for_per), random=~1|Id_Number, \n                 data = musk_sum_sum %&gt;% filter(range == \"core\"))\nsummary(sum_core_mod)\n\nLinear mixed-effects model fit by REML\n  Data: musk_sum_sum %&gt;% filter(range == \"core\") \n      AIC      BIC    logLik\n  28.5491 30.14068 -10.27455\n\nRandom effects:\n Formula: ~1 | Id_Number\n        (Intercept) Residual\nStdDev:   0.4624548 0.344547\n\nFixed effects:  log(area) ~ scale(for_per) \n                   Value Std.Error DF  t-value p-value\n(Intercept)     7.475775 0.2033897  6 36.75592  0.0000\nscale(for_per) -0.041506 0.1359836  5 -0.30523  0.7725\n Correlation: \n               (Intr)\nscale(for_per) 0.049 \n\nStandardized Within-Group Residuals:\n       Min         Q1        Med         Q3        Max \n-1.2452052 -0.3128850 -0.1099126  0.3078064  1.3706162 \n\nNumber of Observations: 13\nNumber of Groups: 7 \n\n\nA lot of the variation in home range size is explained by differences in individual muskoxen; i.e. summer home ranges are similar in size across seasons, and we already know that they share high overlap across years.\nThe relationship with forage percent cover is in opposition to the original hypothesis. Larger home ranges appear to be correlated with a larger percent of forage land cover, though not significant. Maybe if there is a high density of foraging areas, it makes sense to target foraging areas that haven’t been visited lately so there is a maximal amount of forage. For individuals in areas with low density of foraging areas, maybe it makes more sense to not travel long distances to new foraging patches and just stay with the ones that are nearby. By this logic, we might expect the area immediately surrounding home ranges to have a low density of forage areas.\nBefore we compare the areas inside and outside of summer home ranges lets look to see if season length has any effect on summer season size.\n\nmusk_seascont %&gt;%\n  filter(season == \"Summer\") %&gt;%\n  ggplot(aes(x = seas_length, y = log(area), colour = Id_Number)) +\n  geom_point(size = 3) +\n  facet_wrap(~range, scales = \"free\")\n\n\n\n\n\n\n\nsum_home_length_mod &lt;- nlme::lme(log(area)~scale(seas_length), \n                                 random=~1|Id_Number, \n                                 data = musk_seascont %&gt;%\n                                   filter(season == \"Summer\",\n                                          range == \"home\"))\nsummary(sum_home_length_mod)\n\nLinear mixed-effects model fit by REML\n  Data: musk_seascont %&gt;% filter(season == \"Summer\", range == \"home\") \n       AIC      BIC    logLik\n  19.26688 20.85847 -5.633442\n\nRandom effects:\n Formula: ~1 | Id_Number\n        (Intercept)  Residual\nStdDev:    0.571339 0.1181319\n\nFixed effects:  log(area) ~ scale(seas_length) \n                       Value  Std.Error DF  t-value p-value\n(Intercept)         9.667974 0.21899982  6 44.14604  0.0000\nscale(seas_length) -0.017532 0.03506181  5 -0.50004  0.6383\n Correlation: \n                   (Intr)\nscale(seas_length) 0.012 \n\nStandardized Within-Group Residuals:\n        Min          Q1         Med          Q3         Max \n-0.91514860 -0.45820525 -0.04983494  0.37470354  1.36346760 \n\nNumber of Observations: 13\nNumber of Groups: 7 \n\nsum_core_length_mod &lt;- nlme::lme(log(area)~scale(seas_length), \n                                 random=~1|Id_Number, \n                                 data = musk_seascont %&gt;%\n                                   filter(season == \"Summer\",\n                                          range == \"core\"))\nsummary(sum_core_length_mod)\n\nLinear mixed-effects model fit by REML\n  Data: musk_seascont %&gt;% filter(season == \"Summer\", range == \"core\") \n       AIC      BIC    logLik\n  29.02305 30.61463 -10.51152\n\nRandom effects:\n Formula: ~1 | Id_Number\n        (Intercept)  Residual\nStdDev:    0.437158 0.3543469\n\nFixed effects:  log(area) ~ scale(seas_length) \n                      Value Std.Error DF  t-value p-value\n(Intercept)        7.477336 0.1964249  6 38.06715  0.0000\nscale(seas_length) 0.041025 0.1042371  5  0.39357  0.7101\n Correlation: \n                   (Intr)\nscale(seas_length) 0.026 \n\nStandardized Within-Group Residuals:\n       Min         Q1        Med         Q3        Max \n-1.3339226 -0.3702696 -0.1420074  0.3614694  1.2874125 \n\nNumber of Observations: 13\nNumber of Groups: 7 \n\n\nThere is no significant relationship. If anything, there is a slight negative trend with season length. In fact, as we observed previously, summer home ranges are fairly consistent in size within individuals despite differences in season length across years (see 7011, 7012, 7013, and 708 in graph above), meaning our previous finding of the availability of foraging patches is probably more important.",
    "crumbs": [
      "Home Range Modelling"
    ]
  },
  {
    "objectID": "quarto/seasonal_range_mod.html#summer-season-model-1",
    "href": "quarto/seasonal_range_mod.html#summer-season-model-1",
    "title": "Home Range Modelling",
    "section": "Summer Season Model",
    "text": "Summer Season Model\nThis part of the Sahtu region is quite rough terrain with prominent mountains. If muskox home ranges are limited in size by topography, it would be more difficult to test for it. It might be more informational to compare topography or land cover within the home range with topography and land cover immediately surrounding the home range. If land cover has a lower proportion of foraging areas or topography is rougher outside of the home range, then maybe these factors are responsible for the size of the home ranges.\nWe will use a buffer of 7 km to start. This buffer represents the average distance that muskoxen travel between foraging patches, so it is expected that muskoxen could realistically travel to these areas.\n\nmusk_sum_sum3 &lt;- musk_sum_buf %&gt;%\n  mutate(for_lc = ifelse(Canada2010%in%c(8,10,11,12,13),1,0)) %&gt;%\n  # ### remove water land cover from calculation of total land cover\n  # filter(Canada2010 != 18) %&gt;%\n  group_by(range_id, group) %&gt;%\n  summarise(total = sum(n),\n            for_tot = sum(n*for_lc),\n            for_per = for_tot/total) %&gt;%\n  left_join(musk_seascont %&gt;%\n              filter(range == \"home\") %&gt;%\n              select(range_id, year_min, seas_length, area, Id_Number)) \n\nmusk_sum_sum3 %&gt;%\n  ggplot(aes(x = group, y = for_per)) +\n  geom_boxplot() \n\n\n\n\n\n\n\nsum_mod &lt;- nlme::lme(for_per~group, random=~1|Id_Number/year_min, \n                 data = musk_sum_sum3)\nsummary(sum_mod)\n\nLinear mixed-effects model fit by REML\n  Data: musk_sum_sum3 \n        AIC       BIC   logLik\n  -55.35395 -49.46368 32.67697\n\nRandom effects:\n Formula: ~1 | Id_Number\n        (Intercept)\nStdDev:  0.05255011\n\n Formula: ~1 | year_min %in% Id_Number\n         (Intercept)   Residual\nStdDev: 1.342758e-06 0.04497857\n\nFixed effects:  for_per ~ group \n                     Value  Std.Error DF  t-value p-value\n(Intercept)     0.11203062 0.02376930 12 4.713249   5e-04\ngrouphome range 0.09222127 0.01764205 12 5.227357   2e-04\n Correlation: \n                (Intr)\ngrouphome range -0.371\n\nStandardized Within-Group Residuals:\n       Min         Q1        Med         Q3        Max \n-2.1373943 -0.3266617 -0.1310720  0.7132942  1.6288426 \n\nNumber of Observations: 26\nNumber of Groups: \n              Id_Number year_min %in% Id_Number \n                      7                      13 \n\n\nThis result agrees with our hypothesis; the percent cover of foraging areas inside the home range is nearly double the percent cover in the immediate area surrounding the home range. This suggests that forage availability may limit muskox. Using smaller buffers of 2km and 5 km produced the same result. Given that many summer home ranges are bordered by lakes, the percent cover of lakes in the surrounding area could be responsible for some differences in forage cover, but even if we remove lakes from the calculation (not shown here), we still get a significant difference.\nLet’s do the same test but with terrain ruggedness index to assess if the terrain surrounding home ranges is more rough than the terrain within home ranges. We would expect that muskoxen would be less likely to travel through rough terrain\n\nmusk_ter %&gt;%\n  ggplot(aes(x = group, y = value)) +\n  geom_boxplot() \n\n\n\n\n\n\n\nsum_mod &lt;- nlme::lme(value~group, random=~1|Id_Number/year_min, \n                 data = musk_ter)\nsummary(sum_mod)\n\nLinear mixed-effects model fit by REML\n  Data: musk_ter \n       AIC      BIC    logLik\n  58.06474 63.95501 -24.03237\n\nRandom effects:\n Formula: ~1 | Id_Number\n        (Intercept)\nStdDev:    1.321859\n\n Formula: ~1 | year_min %in% Id_Number\n         (Intercept)  Residual\nStdDev: 9.240511e-06 0.3699254\n\nFixed effects:  value ~ group \n                    Value Std.Error DF  t-value p-value\n(Intercept)     2.0852115 0.5112368 12 4.078759  0.0015\ngrouphome range 0.4055481 0.1450967 12 2.795020  0.0162\n Correlation: \n                (Intr)\ngrouphome range -0.142\n\nStandardized Within-Group Residuals:\n        Min          Q1         Med          Q3         Max \n-1.73036205 -0.59522723 -0.01339007  0.61749071  1.74135855 \n\nNumber of Observations: 26\nNumber of Groups: \n              Id_Number year_min %in% Id_Number \n                      7                      13 \n\n\nIf anything, it appears that the terrain is more rugged within home ranges though the difference is not huge (20% increase on average). Maybe the land cover they are interested in is more associated with rough terrain such as that close to the mountains.",
    "crumbs": [
      "Home Range Modelling"
    ]
  },
  {
    "objectID": "quarto/seasonal_range_mod.html#winter-season-model-1",
    "href": "quarto/seasonal_range_mod.html#winter-season-model-1",
    "title": "Home Range Modelling",
    "section": "Winter Season Model",
    "text": "Winter Season Model\nFor the winter season model, we will compare snow depth. We’ll use a buffer size equal to the average distance between the home range center and edges.\n\ndist_func &lt;- function(id){\n  poly &lt;- musk_seascont %&gt;%\n    filter(range_id == !!id,\n           range == \"home\") %&gt;%\n    select(geometry)\n  distances &lt;- poly %&gt;% \n    st_cast(\"POINT\") %&gt;% \n    st_distance(st_centroid(poly)) %&gt;%\n    mean()\n}\ndist &lt;- musk_seascont %&gt;%\n  filter(season == \"Winter\",\n         range == \"home\") %&gt;%\n  pull(range_id) %&gt;%\n  map(function(.x){dist_func(.x)}) %&gt;%\n  unlist() %&gt;%\n  mean()\n\nsm_crop &lt;- terra::rast(here(\"data/processed/sm_crop.nc\"), \n                       drivers=\"NETCDF\")\ndaterange &lt;- seq( as.Date(\"2007-01-01\"), as.Date(\"2012-12-31\"), by=\"+1 day\")\nsnow_func &lt;- function(id){\n  year &lt;- musk_seascont %&gt;%\n    filter(range_id == !!id) %&gt;%\n    pull(year_min)\n  ### creating separate polygons because home ranges are small compared to raster\n  ### resolution and so we need to use proportion of cell overlap in our\n  ### calculation\n  points_home &lt;- musk_seascont %&gt;%\n               filter(range_id == !!id, range == \"home\") %&gt;%\n               mutate(group = \"home range\") %&gt;%\n              sf::st_transform(terra::crs(sm_crop))\n  points_buff &lt;- musk_seascont %&gt;%\n               filter(range_id == !!id, range == \"home\") %&gt;%\n               st_buffer(dist) %&gt;%\n               st_difference(musk_seascont %&gt;%\n                               filter(range_id == !!id, range == \"home\")) %&gt;%\n               mutate(group = \"buffer\") %&gt;%\n              sf::st_transform(terra::crs(sm_crop))\n  zones_home &lt;- rasterize(points_home %&gt;%\n                        terra::vect(),\n                    sm_crop, cover = TRUE)\n  sum_home &lt;- global(zones_home, \"sum\", na.rm = TRUE)[,1]\n  zones_buff &lt;- rasterize(points_buff %&gt;%\n                        terra::vect(),\n                    sm_crop, cover = TRUE)\n  sum_buff &lt;- global(zones_buff, \"sum\", na.rm = TRUE)[,1]\n  rowids &lt;- which(month(daterange)&gt;=11&year(daterange)==year|\n          month(daterange)&lt;=3&year(daterange)==(year+1))\n  temp &lt;- global(sm_crop[[rowids]]*zones_home/sum_home,\"sum\",na.rm = TRUE)[,1]\n  temp &lt;- global(sm_crop[[rowids]]*zones_buff/sum_buff,\"sum\",na.rm = TRUE)[,1]\n  tibble(\n    snow_depth = global(sm_crop[[rowids]]*zones_home/sum_home,\n                        \"sum\",na.rm = TRUE)[,1],\n    date = daterange[rowids], \n    range_id = !!id,\n    group = \"home range\") %&gt;%\n    bind_rows(\n      tibble(\n          snow_depth = global(sm_crop[[rowids]]*zones_buff/sum_buff,\n                              \"sum\",na.rm = TRUE)[,1],\n          date = daterange[rowids], \n          range_id = !!id,\n          group = \"buffer\")\n          )\n}\n\nmusk_snow &lt;- musk_seascont %&gt;%\n  filter(season == \"Winter\", range == \"home\", seas_length&gt;115) %&gt;%\n  pull(range_id) %&gt;%\n  map(function(.x){snow_func(.x)}) %&gt;%\n  list_rbind() \n\n\nmusk_snow2 &lt;- musk_snow %&gt;%\n  group_by(range_id, group) %&gt;%\n  summarise(snow_depth = mean(snow_depth)) %&gt;%\n  left_join(musk_seascont %&gt;%\n              filter(range == \"home\") %&gt;%\n              select(range_id, year_min, seas_length, area, Id_Number))\n\nmusk_snow2 %&gt;%\n  ggplot(aes(x = group, y = snow_depth)) +\n  geom_boxplot() \n\n\n\n\n\n\n\nwint_mod &lt;- nlme::lme(snow_depth~group, random=~1|Id_Number/year_min, \n                 data = musk_snow2)\nsummary(wint_mod)\n\nLinear mixed-effects model fit by REML\n  Data: musk_snow2 \n        AIC       BIC   logLik\n  -57.31365 -52.33499 33.65683\n\nRandom effects:\n Formula: ~1 | Id_Number\n         (Intercept)\nStdDev: 1.795728e-06\n\n Formula: ~1 | year_min %in% Id_Number\n        (Intercept)   Residual\nStdDev:   0.0587992 0.01866914\n\nFixed effects:  snow_depth ~ group \n                     Value   Std.Error DF  t-value p-value\n(Intercept)     0.18164546 0.018600787 10 9.765472   0.000\ngrouphome range 0.01414474 0.007960546 10 1.776855   0.106\n Correlation: \n                (Intr)\ngrouphome range -0.214\n\nStandardized Within-Group Residuals:\n        Min          Q1         Med          Q3         Max \n-1.43945096 -0.55824709  0.02055434  0.42290962  1.64777018 \n\nNumber of Observations: 22\nNumber of Groups: \n              Id_Number year_min %in% Id_Number \n                      6                      11 \n\n\nPerhaps the snow cover data is too coarse resolution for this analysis. Some of the winter home ranges only take up less than 10% of a pixel in area so the calculation of snow depth inside and outside of the home ranges is based on a lot fo the same data. We can try to use elevation as a proxy instead.\n\nmrdtm_crop &lt;- terra::rast(here(\"data/processed/mrdtm_crop.tif\"))\nelev_func &lt;- function(id, d){\n  points &lt;- musk_seascont %&gt;%\n    filter(range_id == !!id, range == \"home\") %&gt;%\n    st_buffer(d) %&gt;%\n    st_difference(musk_seascont %&gt;%\n                    filter(range_id == !!id, range == \"home\")) %&gt;%\n    mutate(group = \"buffer\") %&gt;%\n    bind_rows(musk_seascont %&gt;%\n                filter(range_id == !!id, range == \"home\") %&gt;%\n                mutate(group = \"home range\")) %&gt;%\n    sf::st_transform(terra::crs(mrdtm_crop))\n  mrdtm_crop2 &lt;- terra::crop(mrdtm_crop, points)\n  zones &lt;- rasterize(points %&gt;%\n                       terra::vect(),\n                     mrdtm_crop2, field = \"group\", touches = TRUE)\n  zonal(mrdtm_crop2, zones, \"mean\", wide = FALSE, na.rm = TRUE) %&gt;%\n    mutate(range_id = !!id) %&gt;%\n    select(-layer)\n}\n\n\nmusk_elev &lt;- musk_seascont %&gt;%\n  filter(season == \"Winter\", range == \"home\", seas_length&gt;115) %&gt;%\n  pull(range_id) %&gt;%\n  map(function(.x){elev_func(.x, dist)}) %&gt;%\n  list_rbind() %&gt;%\n  left_join(musk_seascont %&gt;%\n              filter(range == \"home\") %&gt;%\n              st_drop_geometry() %&gt;%\n              select(range_id, Id_Number, year_min))\n\n\nmusk_elev %&gt;%\n  ggplot(aes(x = group, y = value, group = interaction(Id_Number, year_min),\n             colour = interaction(Id_Number, year_min))) +\n  geom_line() \n\n\n\n\n\n\n\nelev_mod &lt;- nlme::lme(value~group, random=~1|Id_Number/year_min, \n                 data = musk_elev)\nsummary(elev_mod)\n\nLinear mixed-effects model fit by REML\n  Data: musk_elev \n       AIC      BIC   logLik\n  229.1239 234.1026 -109.562\n\nRandom effects:\n Formula: ~1 | Id_Number\n        (Intercept)\nStdDev:    120.3712\n\n Formula: ~1 | year_min %in% Id_Number\n        (Intercept) Residual\nStdDev:    37.26204 22.77926\n\nFixed effects:  value ~ group \n                   Value Std.Error DF  t-value p-value\n(Intercept)     351.3101  50.96750 10 6.892825  0.0000\ngrouphome range  24.0000   9.71311 10 2.470883  0.0331\n Correlation: \n                (Intr)\ngrouphome range -0.095\n\nStandardized Within-Group Residuals:\n       Min         Q1        Med         Q3        Max \n-1.2815564 -0.5939720  0.1498559  0.4710288  1.2054520 \n\nNumber of Observations: 22\nNumber of Groups: \n              Id_Number year_min %in% Id_Number \n                      6                      11 \n\n\nHome range are on average higher elevation than the adjacent land, though this difference in elevation is small, around 24 m on average. However, this difference appears to increase as you increase the buffer size, going to 31 m when the buffer size is doubled and 51 m when the buffer size is quadrupled. It’s also worth noting that there is a positive increase in elevation in all but two instances and the largest increases happen at higher elevations. Given previous discussions, there may be two main areas that muskoxen go to during the winter: steep cliffs at high elevations and lake shores at lower elevations.\nLet’s calculate topographic position index to see if winter home ranges would be classified as hilltops\n\nmrdtm_crop &lt;- terra::rast(here(\"data/processed/mrdtm_crop.tif\"))\ntpi_crop &lt;- terra::terrain(mrdtm_crop, \"TPI\")\ntpi_func &lt;- function(id){\n  points &lt;- musk_seascont %&gt;%\n    filter(range_id == !!id, range == \"home\") %&gt;%\n    st_buffer(dist) %&gt;%\n    st_difference(musk_seascont %&gt;%\n                    filter(range_id == !!id, range == \"home\")) %&gt;%\n    mutate(group = \"buffer\") %&gt;%\n    bind_rows(musk_seascont %&gt;%\n                filter(range_id == !!id, range == \"home\") %&gt;%\n                mutate(group = \"home range\")) %&gt;%\n    sf::st_transform(terra::crs(tpi_crop))\n  tpi_crop2 &lt;- terra::crop(tpi_crop, points)\n  zones &lt;- rasterize(points %&gt;%\n                       terra::vect(),\n                     tpi_crop2, field = \"group\", touches = TRUE)\n  zonal(tpi_crop2, zones, \"mean\", wide = FALSE, na.rm = TRUE) %&gt;%\n    mutate(range_id = !!id) %&gt;%\n    select(-layer)\n}\n\n\nmusk_tpi &lt;- musk_seascont %&gt;%\n  filter(season == \"Winter\", range == \"home\", seas_length&gt;115) %&gt;%\n  pull(range_id) %&gt;%\n  map(function(.x){tpi_func(.x)}) %&gt;%\n  list_rbind() %&gt;%\n  left_join(musk_seascont %&gt;%\n              filter(range == \"home\") %&gt;%\n              st_drop_geometry() %&gt;%\n              select(range_id, Id_Number, year_min))\n\nmusk_tpi %&gt;%\n  ggplot(aes(x = group, y = value)) +\n  geom_boxplot() \n\n\n\n\n\n\n\n\nWinter home ranges appear to have a high topographic position index than the adjacent area, meaning they are more likely to be on hill tops. This TPI index uses the default neighborhood size and would likely need to be calibrated to this region to get better estimates of topographic features.",
    "crumbs": [
      "Home Range Modelling"
    ]
  },
  {
    "objectID": "quarto/seasonal_range_mod.html#calving-season-model-1",
    "href": "quarto/seasonal_range_mod.html#calving-season-model-1",
    "title": "Home Range Modelling",
    "section": "Calving Season Model",
    "text": "Calving Season Model\n\ndist_calv &lt;- musk_seascont %&gt;%\n  filter(season == \"Calving\",\n         range == \"home\") %&gt;%\n  pull(range_id) %&gt;%\n  map(function(.x){dist_func(.x)}) %&gt;%\n  unlist() %&gt;%\n  mean()\n\nmrdtm_crop &lt;- terra::rast(here(\"data/processed/mrdtm_crop.tif\"))\n\nmusk_elev_calv &lt;- musk_seascont %&gt;%\n  filter(season == \"Calving\", range == \"home\") %&gt;%\n  pull(range_id) %&gt;%\n  map(function(.x){elev_func(.x, dist_calv/2)}) %&gt;%\n  list_rbind() %&gt;%\n  left_join(musk_seascont %&gt;%\n              filter(range == \"home\") %&gt;%\n              st_drop_geometry() %&gt;%\n              select(range_id, Id_Number, year_min))\n\n\nmusk_elev_calv %&gt;%\n  ggplot(aes(x = group, y = value, group = interaction(Id_Number, year_min),\n             colour = interaction(Id_Number, year_min))) +\n  geom_line() \n\n\n\n\n\n\n\nelev_mod2 &lt;- nlme::lme(value~group, random=~1|Id_Number/year_min, \n                 data = musk_elev_calv)\nsummary(elev_mod2)\n\nLinear mixed-effects model fit by REML\n  Data: musk_elev_calv \n       AIC      BIC    logLik\n  305.6786 312.3396 -147.8393\n\nRandom effects:\n Formula: ~1 | Id_Number\n        (Intercept)\nStdDev:    141.1757\n\n Formula: ~1 | year_min %in% Id_Number\n        (Intercept) Residual\nStdDev:    75.53694 11.17788\n\nFixed effects:  value ~ group \n                   Value Std.Error DF  t-value p-value\n(Intercept)     402.1253  57.50695 14 6.992639  0.0000\ngrouphome range  12.7050   4.08159 14 3.112766  0.0076\n Correlation: \n                (Intr)\ngrouphome range -0.035\n\nStandardized Within-Group Residuals:\n        Min          Q1         Med          Q3         Max \n-1.67855407 -0.49213050  0.01235181  0.42840439  1.78309547 \n\nNumber of Observations: 30\nNumber of Groups: \n              Id_Number year_min %in% Id_Number \n                      7                      15 \n\n\nThe same relationship with elevation appears to hold for the calving areas as well, suggesting again that relief from deep snow may be the most important thing in the snowy months. The difference is not as large which likely reflects that fact that calving ranges tend to only cover a portion of the total winter range. Again, the difference in elevations increases with larger buffers.",
    "crumbs": [
      "Home Range Modelling"
    ]
  },
  {
    "objectID": "quarto/seasonal_range.html#jan-mar-winter-home-range",
    "href": "quarto/seasonal_range.html#jan-mar-winter-home-range",
    "title": "Seasonal Range",
    "section": "Jan-Mar Winter Home Range",
    "text": "Jan-Mar Winter Home Range\nTo limit the effect of winter season length on the effect of winter home range size, let’s create winter home range estimates during the months of winter with the deepest snow (January - March). These estimates can be used later when modelling the effect of snow depth on winter home range size.\n\nmusk_collar_wint &lt;- musk_collar_seas %&gt;%\n  filter(season == \"Winter\",\n         month&gt;=12|month&lt;=3)\n\nxy &lt;- musk_collar_wint %&gt;%\n  sf::st_transform(\"+proj=utm +zone=9\") %&gt;%\n  sf::st_coordinates()\nmuskwint_ltraj &lt;- adehabitatLT::as.ltraj(xy = xy, date = musk_collar_wint$datetime, id = as.character(musk_collar_wint$range_id))\n\nsig1_wint &lt;- liker(muskwint_ltraj, \n              sig2 = sig2, \n              rangesig1 = c(0.1,20),\n              plotit = FALSE)\n\nmusk_bb_wint &lt;- list()\nlookup_wint &lt;- musk_collar_wint %&gt;%\n  st_drop_geometry() %&gt;%\n  dplyr::select(range_id, group) %&gt;%\n  distinct()\nfor(i in 1:length(sig1_wint)){\n  musk_bb_wint[[i]] &lt;- kernelbb(muskwint_ltraj[i],\n                           sig1 = sig1_wint[[i]]$sig1,\n                           sig2 = sig2,\n                           grid=sp_pixels[[lookup_wint$group[i]]])\n}\nsaveRDS(musk_bb_wint, here(\"data/processed/musk_bb_wint.rds\"))\nmusk_bb_wint &lt;- readRDS(here(\"data/processed/musk_bb_wint.rds\"))\n\nmusk_seascontwint_95 &lt;- map(musk_bb_wint, function(x){getverticeshr(x,95) %&gt;% st_as_sf()}) %&gt;%\n  list_rbind() %&gt;%\n  st_as_sf() %&gt;%\n  mutate(range_id = unique(musk_collar_wint$range_id)) %&gt;%\n  left_join(musk_collar_wint %&gt;% \n              sf::st_drop_geometry() %&gt;%\n              dplyr::select(range_id,Id_Number,year_min,season, seas_length) %&gt;% \n              distinct()) %&gt;%\n  mutate(season = factor(season, levels = c(\"Summer\",\"Winter\",\"Calving\")),\n         range = \"home\")\nmusk_seascontwint_50 &lt;- map(musk_bb_wint, function(x){getverticeshr(x,50) %&gt;% st_as_sf()}) %&gt;%\n  list_rbind() %&gt;%\n  st_as_sf() %&gt;%\n  mutate(range_id = unique(musk_collar_wint$range_id)) %&gt;%\n  left_join(musk_collar_wint %&gt;% \n              sf::st_drop_geometry() %&gt;%\n              dplyr::select(range_id,Id_Number,year_min,season, seas_length) %&gt;% \n              distinct()) %&gt;%\n  mutate(season = factor(season, levels = c(\"Summer\",\"Winter\",\"Calving\")),\n         range = \"core\")\nmusk_seascontwint &lt;- bind_rows(musk_seascontwint_95, musk_seascontwint_50)\n\nsaveRDS(musk_seascontwint, here(\"output/musk_seascontwint.rds\"))",
    "crumbs": [
      "Seasonal Range"
    ]
  },
  {
    "objectID": "quarto/step_selection_functions.html",
    "href": "quarto/step_selection_functions.html",
    "title": "Integrated Step Selection Functions",
    "section": "",
    "text": "In this document, we will use integrated step selection analysis (iSSA) to model movement decisions of the Sahtu muskoxen. Models will be fit using the amt package. We’ll start by loading the data and required packages:\n### group data by ID and season\nmusk_collar_season &lt;- musk_collar_filt %&gt;%\n  left_join(snowdepth_locs) %&gt;%\n  group_by(year, Id_Number) %&gt;%\n  mutate(season = season_delineation(datetime, snow_depth, 0.1),\n         year_min = minimum_year_season(year,datetime,season))  %&gt;%\n  mutate(id_season = str_c(Id_Number,\"_\",season)) %&gt;%\n  ungroup() \n\nJoining with `by = join_by(Id_Number, Latitude, Longitude, datetime)`\nNext let’s look at some of the relationships between the spatial data we’ll be using in the models. First let’s look at historical fire data and how it relates to forest cover data:\nThe first image shows that muskoxen appear to favour areas impacted by recent fires to some degree. The second image shows that canopy cover is also impacted by recent fires, although the relative recency of the fire doesn’t seem to have a large effect on differences in canopy cover across areas impacted by fires. In any case, it will be important to account for changes in canopy cover that have occurred since the collars stopped recording as these areas likely had higher canopy cover during the monitoring period.\nThere does seem to be avoidance of some areas with high TRI values, however muskox do appear to cross ridge tops to get to potential foraging areas on the other side. Lastly, let’s look at the proximity to water and how it relates to muskox movements.\nDoesn’t seem to be a huge correlation between GPS points and proximity to water, but still worth exploring further in some models.\nissa_data &lt;- musk_collar_season %&gt;%\n  sf::st_transform(32609) %&gt;%\n  mutate(x = sf::st_coordinates(.)[,1],\n         y = sf::st_coordinates(.)[,2]) %&gt;%\n  sf::st_drop_geometry()\n\n\n### convert data into tracks for amt package\nissa_track &lt;- make_track(issa_data, \n                   x, \n                   y, \n                   datetime, \n                   id_season = id_season,\n                   id = Id_Number,\n                   season = season,\n                   crs = 4326)\n\n### nest tracks by ID season\nissa_track_nest &lt;- issa_track %&gt;%\n  nest(data = -c(id,id_season,season))\n\nhead(issa_track_nest)\n\n# A tibble: 6 × 4\n  id_season   id    season data                \n  &lt;chr&gt;       &lt;fct&gt; &lt;chr&gt;  &lt;list&gt;              \n1 706_winter  706   winter &lt;trck_xyt [912 × 3]&gt;\n2 7080_winter 7080  winter &lt;trck_xyt [719 × 3]&gt;\n3 707_winter  707   winter &lt;trck_xyt [107 × 3]&gt;\n4 709_winter  709   winter &lt;trck_xyt [157 × 3]&gt;\n5 710_winter  710   winter &lt;trck_xyt [218 × 3]&gt;\n6 7080_summer 7080  summer &lt;trck_xyt [824 × 3]&gt;",
    "crumbs": [
      "Integrated Step Selection Functions"
    ]
  },
  {
    "objectID": "quarto/step_selection_functions.html#issa-models",
    "href": "quarto/step_selection_functions.html#issa-models",
    "title": "Integrated Step Selection Functions",
    "section": "ISSA Models",
    "text": "ISSA Models\nLets prepare the data for use in ISSA. We’ll first resample the data to ensure each step is 8 hours in length. Next we will convert groups of steps into bursts, where a new burst occurs when the time between subsequent steps is greater than 8 hours. Lastly, we will sample random steps for each observed step so that we can compare available and used locations. We use the recommended sample size of 10 for available steps, but will test the robustness of these models by increasing the sample size once we have an appropriate model.\n\n### create bursts whenever time between steps exceeds 8 hours and\n### transform locations into steps\nissa_bursts_summer &lt;- issa_track_nest %&gt;%\n  filter(season == \"summer\") %&gt;%\n  mutate(\n    data_resamp = map(data, function(x)\n      x %&gt;% track_resample(rate = hours(8), tolerance = hours(1))\n      ),\n    steps = map2(data,data_resamp, function(x,y)\n      if(length(unique(y$burst_))==1)\n        x %&gt;% steps()\n      else y %&gt;% steps_by_burst()\n      ),\n    rand_steps = map(steps, function(x){\n      set.seed(5)\n      x %&gt;% random_steps(n_control = 10)\n      })\n  )\n\nSteps with length 0 are present. This will lead to an error when fitting a gamma distribution. 0 step lengths are replaced with the smallest non zero step length, which is: 4.65048575650619\n\n\nSteps with length 0 are present. This will lead to an error when fitting a gamma distribution. 0 step lengths are replaced with the smallest non zero step length, which is: 11.1469734290516\n\n\nSteps with length 0 are present. This will lead to an error when fitting a gamma distribution. 0 step lengths are replaced with the smallest non zero step length, which is: 4.63285409049334\n\n\nSteps with length 0 are present. This will lead to an error when fitting a gamma distribution. 0 step lengths are replaced with the smallest non zero step length, which is: 4.62937688498926\n\n\nSteps with length 0 are present. This will lead to an error when fitting a gamma distribution. 0 step lengths are replaced with the smallest non zero step length, which is: 4.6291379706363\n\n\nWarning: There were 71 warnings in `mutate()`.\nThe first warning was:\nℹ In argument: `rand_steps = map(...)`.\nCaused by warning in `random_steps.bursted_steps_xyt()`:\n! Some bursts contain &lt; 3 steps and will be removed\nℹ Run `dplyr::last_dplyr_warnings()` to see the 70 remaining warnings.\n\nissa_bursts_winter &lt;- issa_track_nest %&gt;%\n  filter(season == \"winter\") %&gt;%\n  mutate(\n    data_resamp = map(data, function(x)\n      x %&gt;% track_resample(rate = hours(8), tolerance = hours(1))\n      ),\n    steps = map2(data,data_resamp, function(x,y)\n      if(length(unique(y$burst_))==1)\n        x %&gt;% steps()\n      else y %&gt;% steps_by_burst()\n      ),\n    rand_steps = map(steps, function(x){\n      set.seed(5)\n      x %&gt;% random_steps(n_control = 10)\n      })\n  )\n\nSteps with length 0 are present. This will lead to an error when fitting a gamma distribution. 0 step lengths are replaced with the smallest non zero step length, which is: 4.49071435198262\n\n\nSteps with length 0 are present. This will lead to an error when fitting a gamma distribution. 0 step lengths are replaced with the smallest non zero step length, which is: 4.64930971137248\n\n\nSteps with length 0 are present. This will lead to an error when fitting a gamma distribution. 0 step lengths are replaced with the smallest non zero step length, which is: 4.56724394081064\n\n\nSteps with length 0 are present. This will lead to an error when fitting a gamma distribution. 0 step lengths are replaced with the smallest non zero step length, which is: 4.68349626346525\n\n\nSteps with length 0 are present. This will lead to an error when fitting a gamma distribution. 0 step lengths are replaced with the smallest non zero step length, which is: 4.68332538915642\n\n\nSteps with length 0 are present. This will lead to an error when fitting a gamma distribution. 0 step lengths are replaced with the smallest non zero step length, which is: 4.62894092545827\n\n\nSteps with length 0 are present. This will lead to an error when fitting a gamma distribution. 0 step lengths are replaced with the smallest non zero step length, which is: 4.59543328749614\n\n\nSteps with length 0 are present. This will lead to an error when fitting a gamma distribution. 0 step lengths are replaced with the smallest non zero step length, which is: 4.5434871594889\n\n\nSteps with length 0 are present. This will lead to an error when fitting a gamma distribution. 0 step lengths are replaced with the smallest non zero step length, which is: 4.62843390838056\n\n\nSteps with length 0 are present. This will lead to an error when fitting a gamma distribution. 0 step lengths are replaced with the smallest non zero step length, which is: 4.62677351093146\n\n\nWarning: There were 68 warnings in `mutate()`.\nThe first warning was:\nℹ In argument: `rand_steps = map(...)`.\nCaused by warning in `random_steps.bursted_steps_xyt()`:\n! Some bursts contain &lt; 3 steps and will be removed\nℹ Run `dplyr::last_dplyr_warnings()` to see the 67 remaining warnings.\n\n\nNext we assign covariate data to each step.\n\nprcC_2020_proj &lt;- terra::rast(here(\"data/processed/prcC_2020_proj.tif\"))\nmrtri3_proj &lt;- terra::rast(here(\"data/processed/mrtri3_proj.tif\"))\nmrdtm_proj &lt;- terra::rast(here(\"data/processed/mrdtm_proj.tif\"))\nwater_dist &lt;- terra::rast(here(\"data/processed/water_dist.tif\"))\nlc_2010_proj &lt;- terra::rast(here(\"data/processed/lc_2010_proj.tif\"))\nsm_proj &lt;- terra::rast(here(\"data/processed/sm_proj.nc\"))\nnbr_proj &lt;- terra::rast(here(\"data/processed/ntems_fire_nbr_proj.tif\"))\nnames(nbr_proj) &lt;- \"nbr\"\nrasts &lt;- list.files(here(\"data/processed/fire_year\"), \n                    pattern = \"*.tif$\", \n                    full.names = TRUE)\nfire_year &lt;- rast(rasts)\n\nissa_data_summer &lt;- issa_bursts_summer %&gt;%\n  mutate(\n    data_covs = map2(rand_steps, id, function(x,y){\n      set.seed(5)\n      x  %&gt;%\n        mutate(cos_ta = cos(ta_),\n               log_sl = log(sl_),\n               id = y) %&gt;%\n        extract_covariates(prcC_2020_proj, where = \"both\") %&gt;%\n        extract_covariates(mrtri3_proj) %&gt;%\n        extract_covariates(mrdtm_proj, where = \"both\") %&gt;%\n        extract_covariates(water_dist) %&gt;%\n        extract_covariates(lc_2010_proj) %&gt;%\n        extract_covariates(nbr_proj) %&gt;%\n        extract_covariates_var_time(fire_year, max_time = years(1),\n                                    when = \"before\", name_covar = \"fire_year\") %&gt;%\n        drop_na(ta_)\n      })\n  )\n\nissa_data_winter &lt;- issa_bursts_winter %&gt;%\n  mutate(\n    data_covs = map2(rand_steps, id, function(x,y){\n      set.seed(5)\n      x  %&gt;%\n        mutate(cos_ta = cos(ta_),\n               log_sl = log(sl_),\n               id = y) %&gt;%\n        extract_covariates(prcC_2020_proj, where = \"both\") %&gt;%\n        extract_covariates(mrtri3_proj) %&gt;%\n        extract_covariates(mrdtm_proj, where = \"both\") %&gt;%\n        extract_covariates(water_dist) %&gt;%\n        extract_covariates(lc_2010_proj) %&gt;%\n        extract_covariates(nbr_proj) %&gt;%\n        extract_covariates_var_time(fire_year, max_time = years(1),\n                                    name_covar = \"fire_year\") %&gt;%\n        extract_covariates_var_time(sm_proj, max_time = days(2),\n                                    name_covar = \"snow_depth\",\n                                    where = \"start\") %&gt;%\n        drop_na(ta_)\n      })\n  )\n\nNext we will collapse each muskox-specific dataset into a combined dataset for each season. We will assign a new ID to each muskox burst and calculate some new covariates for the models. We will also examine the covariates for any correlation.\n\n\nissa_data_summer_comb &lt;- list_rbind(issa_data_summer$data_covs) %&gt;%\n  group_by(id, step_id_) %&gt;%\n  mutate(strat_id = cur_group_id()) %&gt;%\n  ungroup() %&gt;%\n  mutate(log_water_dist = log(layer/30+1),\n         water = ifelse(cover == \"Water\",1,0),\n         open_land = ifelse(cover %in% \n                              c(\"Temperate or sub-polar shrubland\",\n                                \"Temperate or sub-polar grassland\")\n                            ,1,0),\n         forest = ifelse(cover %in% \n                              c(\"Temperate or sub-polar needleleaf forest\",\n                                \"Sub-polar taiga needleleaf forest\",\n                                \"Temperate or sub-polar broadleaf deciduous forest\",\n                                \"Mixed forest\")\n                            ,1,0),\n         nbr = replace_na(nbr,0),\n         nbr_low = ifelse(is.na(nbr)|nbr&lt;=27,1,0),\n         nbr_moderate = ifelse(nbr&gt;27&nbr&lt;=66,1,0),\n         nbr_high = ifelse(nbr&gt;66,1,0),\n         fire_10 = ifelse(fire_year&lt;=10,1,0),\n         fire_20 = ifelse(fire_year&gt;10&fire_year&lt;=20,1,0),\n         fire_30 = ifelse(fire_year&gt;20&fire_year&lt;=30,1,0),\n         fire_40 = ifelse(fire_year&gt;30&fire_year&lt;=40,1,0),\n         fire_10_low = fire_10*nbr_low,\n         fire_10_mod = fire_10*nbr_moderate,\n         fire_10_high = fire_10*nbr_high,\n         fire_20_low = fire_20*nbr_low,\n         fire_20_mod = fire_20*nbr_moderate,\n         fire_20_high = fire_20*nbr_high)\n\nissa_data_summer_comb %&gt;%\n  select(log_sl, cos_ta, scanfi_prcC_end, mrdtm,\n         fire_year, open_land, forest) %&gt;%\n  cor()\n\n                      log_sl       cos_ta scanfi_prcC_end       mrdtm\nlog_sl           1.000000000  0.015039480     0.001566813  0.01450998\ncos_ta           0.015039480  1.000000000     0.003245904  0.02343300\nscanfi_prcC_end  0.001566813  0.003245904     1.000000000  0.04423831\nmrdtm            0.014509977  0.023432998     0.044238310  1.00000000\nfire_year        0.045986113  0.015558266     0.361686670  0.10893975\nopen_land       -0.045049759 -0.012236711    -0.295894068  0.02545177\nforest           0.013036538  0.003690669     0.326216883 -0.14416072\n                  fire_year   open_land       forest\nlog_sl           0.04598611 -0.04504976  0.013036538\ncos_ta           0.01555827 -0.01223671  0.003690669\nscanfi_prcC_end  0.36168667 -0.29589407  0.326216883\nmrdtm            0.10893975  0.02545177 -0.144160721\nfire_year        1.00000000 -0.69815278  0.592775670\nopen_land       -0.69815278  1.00000000 -0.872079248\nforest           0.59277567 -0.87207925  1.000000000\n\nissa_data_winter_comb &lt;- list_rbind(issa_data_winter$data_covs) %&gt;%\n  group_by(id, step_id_) %&gt;%\n  mutate(strat_id = cur_group_id()) %&gt;%\n  ungroup() %&gt;%\n  mutate(log_water_dist = log(layer/100+1),\n         ### only 3-4 potentital steps in fires aged &lt;10 years\n         ### also not enough 1-20 year fires for separate groups based on nbr\n         fire_10_20 = ifelse(fire_year&lt;=20,1,0),\n         fire_30 = ifelse(fire_year&gt;20&fire_year&lt;=30,1,0),\n         fire_40 = ifelse(fire_year&gt;30&fire_year&lt;=40,1,0),\n         dtm_diff = mrdtm_end - mrdtm_start,\n         open_land = ifelse(cover %in% \n                              c(\"Temperate or sub-polar shrubland\",\n                                \"Temperate or sub-polar grassland\")\n                            ,1,0),\n         forest = ifelse(cover %in% \n                              c(\"Temperate or sub-polar needleleaf forest\",\n                                \"Sub-polar taiga needleleaf forest\",\n                                \"Temperate or sub-polar broadleaf deciduous forest\",\n                                \"Mixed forest\")\n                            ,1,0))\n\nissa_data_winter_comb %&gt;%\n  select(log_sl, cos_ta, scanfi_prcC_end, mrdtm, \n         fire_year, open_land, \n         forest, snow_depth) %&gt;%\n  cor()\n\n                      log_sl       cos_ta scanfi_prcC_end       mrdtm\nlog_sl           1.000000000  0.011075010     -0.02030951  0.07092959\ncos_ta           0.011075010  1.000000000      0.01673297  0.01410999\nscanfi_prcC_end -0.020309514  0.016732972      1.00000000  0.08745243\nmrdtm            0.070929595  0.014109988      0.08745243  1.00000000\nfire_year       -0.020095886 -0.022657588     -0.01490196  0.05368443\nopen_land        0.049655154  0.001748410     -0.02722456  0.08505163\nforest          -0.063572861 -0.003636107      0.09606280 -0.10148841\nsnow_depth       0.007521049 -0.001104784      0.17460700  0.23116577\n                  fire_year   open_land       forest   snow_depth\nlog_sl          -0.02009589  0.04965515 -0.063572861  0.007521049\ncos_ta          -0.02265759  0.00174841 -0.003636107 -0.001104784\nscanfi_prcC_end -0.01490196 -0.02722456  0.096062804  0.174607000\nmrdtm            0.05368443  0.08505163 -0.101488413  0.231165772\nfire_year        1.00000000 -0.10915844  0.065584120 -0.053641622\nopen_land       -0.10915844  1.00000000 -0.666750553  0.072652237\nforest           0.06558412 -0.66675055  1.000000000 -0.113143434\nsnow_depth      -0.05364162  0.07265224 -0.113143434  1.000000000\n\n\nLastly, we will fit models for the summer and winter datasets separately. Models are fit using the ISSA method that allows for random effects. This way we can automatically pool estimates across individuals to come up with a population-level estimate for each covariate.\n\n# m0_summer_2step &lt;- Ts.estim(case_ ~ scale(log_sl)*scale(cos_ta) + \n#                               scale(scanfi_prcC_end) +\n#                               scale(mrdtm) +\n#                               # scale(dtm_diff) +\n#                               scale(log_water_dist) +\n#                               open_land + \n#                               scale(log_fire_year) +\n#                               strata(strat_id) +\n#                               cluster(id),\n#                             data = issa_data_summer_comb)\n# m0_summer_2step\n\nm0_summer_glmmfit &lt;- glmmTMB(case_ ~ -1 + scale(log_sl)*scale(cos_ta) + \n                            scale(scanfi_prcC_end) +\n                            scale(mrdtm) +\n                            # scale(dtm_diff) +\n                            scale(log_water_dist) +\n                            water +\n                            fire_10_low +\n                            fire_10_mod +\n                            fire_10_high +\n                            fire_20_low +\n                            fire_20_mod +\n                            fire_20_high +\n                            fire_30 +\n                            fire_40 +\n                            (1|strat_id) +\n                            (0 + scale(log_sl)|id) +\n                            (0 + scale(cos_ta)|id) +\n                            (0 + scale(log_sl):scale(cos_ta)|id) +\n                            (0 + scale(scanfi_prcC_end)|id) +\n                            (0 + scale(mrdtm)|id) +\n                            # (0 + scale(dtm_diff)|id) +\n                            (0 + scale(log_water_dist)|id) +\n                            (0 + water|id) +\n                            (0 + fire_10_low|id) +\n                            (0 + fire_10_mod|id) +\n                            (0 + fire_10_high|id) +\n                            (0 + fire_20_low|id) +\n                            (0 + fire_20_mod|id) +\n                            (0 + fire_20_high|id) +\n                            (0 + fire_30|id) +\n                            (0 + fire_40|id), \n                          family = poisson,\n                          data = issa_data_summer_comb,\n                          map=list(theta=factor(c(NA,1:15))),\n                          start=list(theta=c(log(1e3),rep(0,15))))\nsummary(m0_summer_glmmfit)\n\n Family: poisson  ( log )\nFormula:          \ncase_ ~ -1 + scale(log_sl) * scale(cos_ta) + scale(scanfi_prcC_end) +  \n    scale(mrdtm) + scale(log_water_dist) + water + fire_10_low +  \n    fire_10_mod + fire_10_high + fire_20_low + fire_20_mod +  \n    fire_20_high + fire_30 + fire_40 + (1 | strat_id) + (0 +  \n    scale(log_sl) | id) + (0 + scale(cos_ta) | id) + (0 + scale(log_sl):scale(cos_ta) |  \n    id) + (0 + scale(scanfi_prcC_end) | id) + (0 + scale(mrdtm) |  \n    id) + (0 + scale(log_water_dist) | id) + (0 + water | id) +  \n    (0 + fire_10_low | id) + (0 + fire_10_mod | id) + (0 + fire_10_high |  \n    id) + (0 + fire_20_low | id) + (0 + fire_20_mod | id) + (0 +  \n    fire_20_high | id) + (0 + fire_30 | id) + (0 + fire_40 |      id)\nData: issa_data_summer_comb\n\n     AIC      BIC   logLik deviance df.resid \n134424.5 134700.1 -67182.2 134364.5    72202 \n\nRandom effects:\n\nConditional model:\n Groups   Name                        Variance  Std.Dev. \n strat_id (Intercept)                 1.000e+06 1.000e+03\n id       scale(log_sl)               2.211e-08 1.487e-04\n id.1     scale(cos_ta)               9.732e-11 9.865e-06\n id.2     scale(log_sl):scale(cos_ta) 7.179e-04 2.679e-02\n id.3     scale(scanfi_prcC_end)      2.401e-10 1.549e-05\n id.4     scale(mrdtm)                1.351e-02 1.162e-01\n id.5     scale(log_water_dist)       3.692e-09 6.076e-05\n id.6     water                       4.162e-08 2.040e-04\n id.7     fire_10_low                 1.334e-06 1.155e-03\n id.8     fire_10_mod                 1.872e-01 4.326e-01\n id.9     fire_10_high                2.676e-02 1.636e-01\n id.10    fire_20_low                 1.108e-09 3.328e-05\n id.11    fire_20_mod                 1.626e-10 1.275e-05\n id.12    fire_20_high                3.375e-02 1.837e-01\n id.13    fire_30                     5.711e-09 7.557e-05\n id.14    fire_40                     5.861e-10 2.421e-05\nNumber of obs: 72232, groups:  strat_id, 6568; id, 7\n\nConditional model:\n                             Estimate Std. Error z value Pr(&gt;|z|)    \nscale(log_sl)                0.042373   0.013434   3.154  0.00161 ** \nscale(cos_ta)                0.008794   0.013245   0.664  0.50673    \nscale(scanfi_prcC_end)      -0.036065   0.017518  -2.059  0.03952 *  \nscale(mrdtm)                -0.108855   0.056756  -1.918  0.05512 .  \nscale(log_water_dist)        0.150706   0.051014   2.954  0.00313 ** \nwater                       -1.331745   0.219542  -6.066 1.31e-09 ***\nfire_10_low                  0.435325   0.178658   2.437  0.01482 *  \nfire_10_mod                  1.002848   0.234900   4.269 1.96e-05 ***\nfire_10_high                 1.294692   0.121281  10.675  &lt; 2e-16 ***\nfire_20_low                  0.563758   0.196579   2.868  0.00413 ** \nfire_20_mod                  0.922816   0.151244   6.102 1.05e-09 ***\nfire_20_high                 1.384242   0.203461   6.803 1.02e-11 ***\nfire_30                      0.062175   0.161876   0.384  0.70091    \nfire_40                     -0.285749   0.136408  -2.095  0.03619 *  \nscale(log_sl):scale(cos_ta)  0.114390   0.017570   6.510 7.49e-11 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nsaveRDS(issa_data_summer_comb, here(\"data/processed/issa_data_summer_comb.rds\"))\nsaveRDS(m0_summer_glmmfit, here(\"output/m0_summer_glmmfit.rds\"))\n\n\n# m0_winter_2step &lt;- Ts.estim(case_ ~ scale(log_sl)*scale(cos_ta) + \n#                               scale(scanfi_prcC_end) +\n#                               scale(mrdtm) +\n#                               scale(dtm_diff) +\n#                               scale(log_water_dist) +\n#                               open_land + \n#                               scale(snow_depth):scale(log_sl) +\n#                               scale(snow_depth):scale(dtm_diff) +\n#                               # scale(log_fire_year) +\n#                               strata(strat_id) +\n#                               cluster(id),\n#                             data = issa_data_winter_comb)\n# m0_winter_2step\n\nm0_winter_glmmfit &lt;- glmmTMB(case_ ~ -1 + scale(log_sl)*scale(cos_ta) + \n                            scale(scanfi_prcC_end) +\n                            scale(mrdtm) +\n                            # scale(dtm_diff) +\n                            scale(log_water_dist) +\n                            # open_land +\n                            fire_10_20 +\n                            fire_30 +\n                            fire_40 +\n                            scale(snow_depth):scale(log_sl) +\n                            (1|strat_id) +\n                            (0 + scale(log_sl)|id) +\n                            (0 + scale(cos_ta)|id) +\n                            (0 + scale(log_sl):scale(cos_ta)|id) +\n                            (0 + scale(scanfi_prcC_end)|id) +\n                            (0 + scale(mrdtm)|id) +\n                            # (0 + scale(dtm_diff)|id) +\n                            (0 + scale(log_water_dist)|id) +\n                            # (0 + open_land|id) +\n                            (0 + scale(snow_depth):scale(log_sl)|id) +\n                            (0 + fire_10_20|id) +\n                            (0 + fire_30|id) +\n                            (0 + fire_40|id), \n                          family = poisson,\n                          data = issa_data_winter_comb,\n                          map=list(theta=factor(c(NA,1:10))),\n                          start=list(theta=c(log(1e3),rep(0,10))))\n\nsummary(m0_winter_glmmfit)\n\n Family: poisson  ( log )\nFormula:          \ncase_ ~ -1 + scale(log_sl) * scale(cos_ta) + scale(scanfi_prcC_end) +  \n    scale(mrdtm) + scale(log_water_dist) + fire_10_20 + fire_30 +  \n    fire_40 + scale(snow_depth):scale(log_sl) + (1 | strat_id) +  \n    (0 + scale(log_sl) | id) + (0 + scale(cos_ta) | id) + (0 +  \n    scale(log_sl):scale(cos_ta) | id) + (0 + scale(scanfi_prcC_end) |  \n    id) + (0 + scale(mrdtm) | id) + (0 + scale(log_water_dist) |  \n    id) + (0 + scale(snow_depth):scale(log_sl) | id) + (0 + fire_10_20 |  \n    id) + (0 + fire_30 | id) + (0 + fire_40 | id)\nData: issa_data_winter_comb\n\n     AIC      BIC   logLik deviance df.resid \n114268.7 114449.5 -57114.4 114228.7    62162 \n\nRandom effects:\n\nConditional model:\n Groups   Name                            Variance  Std.Dev. \n strat_id (Intercept)                     1.000e+06 1.000e+03\n id       scale(log_sl)                   1.836e-02 1.355e-01\n id.1     scale(cos_ta)                   3.722e-03 6.101e-02\n id.2     scale(log_sl):scale(cos_ta)     9.177e-09 9.580e-05\n id.3     scale(scanfi_prcC_end)          1.084e-02 1.041e-01\n id.4     scale(mrdtm)                    1.411e-02 1.188e-01\n id.5     scale(log_water_dist)           3.729e-08 1.931e-04\n id.6     scale(snow_depth):scale(log_sl) 6.840e-02 2.615e-01\n id.7     fire_10_20                      1.592e-07 3.990e-04\n id.8     fire_30                         3.973e-08 1.993e-04\n id.9     fire_40                         1.233e-08 1.111e-04\nNumber of obs: 62182, groups:  strat_id, 5663; id, 10\n\nConditional model:\n                                Estimate Std. Error z value Pr(&gt;|z|)    \nscale(log_sl)                   -0.02598    0.04975  -0.522  0.60147    \nscale(cos_ta)                   -0.04345    0.02579  -1.685  0.09203 .  \nscale(scanfi_prcC_end)          -0.02744    0.05051  -0.543  0.58694    \nscale(mrdtm)                    -0.25857    0.05636  -4.588 4.48e-06 ***\nscale(log_water_dist)            0.30317    0.20744   1.462  0.14387    \nfire_10_20                      -0.77435    0.43035  -1.799  0.07196 .  \nfire_30                         -1.86872    0.80586  -2.319  0.02040 *  \nfire_40                         -0.21342    0.24347  -0.877  0.38072    \nscale(log_sl):scale(cos_ta)      0.11428    0.01436   7.960 1.72e-15 ***\nscale(log_sl):scale(snow_depth) -0.24217    0.08706  -2.782  0.00541 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nsaveRDS(issa_data_winter_comb, here(\"data/processed/issa_data_winter_comb.rds\"))\nsaveRDS(m0_winter_glmmfit, here(\"output/m0_winter_glmmfit.rds\"))",
    "crumbs": [
      "Integrated Step Selection Functions"
    ]
  },
  {
    "objectID": "quarto/02_movement_patterns.html",
    "href": "quarto/02_movement_patterns.html",
    "title": "Movement Patterns",
    "section": "",
    "text": "In this document, we will examine patterns in the movement behaviours of collared muskoxen. We will use muskox speed and turning angles to explore behaviour.",
    "crumbs": [
      "Movement Patterns"
    ]
  },
  {
    "objectID": "quarto/02_movement_patterns.html#movement-trends",
    "href": "quarto/02_movement_patterns.html#movement-trends",
    "title": "Movement Patterns",
    "section": "Movement Trends",
    "text": "Movement Trends\n\n\n\n\n\n\n\n\n\nBased on the time series above, movement tends to be highest in the summer (June, July, August), gradually decrease during autumn (September, October, November) and winter (December, January, February) and experience a sharp increase in the late spring (May). Perhaps this increase is timed with parturition, which has been found to start in April/May (Adamczewski 1997). Alternatively, this could be tied to the timing of snowmelt. We can explore this further by looking at average seasonal step lengths for each muskox:\n\n\n\n\n\n\n\n\n\nStep lengths in the winter and spring are similar, whereas autumn step lengths are intermediate between winter and summer. This again highlights the discrepancy between the gradual decrease in step lengths from summer to winter compared with the sharper increase from winter to summer.\nFor the most part, average seasonal step lengths are consistent between muskoxen, though there appear to be greater variation in the spring and autumn. To examine this further, let’s plot smoothed curves of step lengths against day of year for different years. We’ll restrict this plot to muskoxen-year combinations with more than half a year’s worth of data:\n\n\n\n\n\n\n\n\n\nThe curves of step lengths follow similar trajectories but there is still considerable variation across years and among muskoxen. This suggests weather, landscape, and muskox characteristics may play a part in influencing movement behaviour.",
    "crumbs": [
      "Movement Patterns"
    ]
  },
  {
    "objectID": "quarto/02_movement_patterns.html#defining-seasons",
    "href": "quarto/02_movement_patterns.html#defining-seasons",
    "title": "Movement Patterns",
    "section": "Defining Seasons",
    "text": "Defining Seasons\nWe can use snow depth data from the SnowModel project to look at how snow depth impacts step lengths\n\nsnowdepth_mean %&gt;%  \n  mutate(month = month(date)) %&gt;%\n  ggplot(aes(x=date, y=snow_depth, colour = factor(month), group = 1)) + \n  geom_line(linewidth = 2) +  \n  ylab(\"Average snow depth (m)\") +  \n  xlab(\"Date\") +   \n  theme_bw() \n\n\n\n\n\n\n\n\nClearly there are large changes in snow depth across seasons. Let’s plot snow depth against step lengths to see how they match up.\n\nmusk_snow &lt;- musk_collar_filt %&gt;%\n  mutate(date = as.Date(datetime)) %&gt;%\n  left_join(snowdepth_mean)\n\nmusk_snow %&gt;%\n  filter(pTime == 8, !is.na(snow_depth)) %&gt;%\n  group_by(snow_depth) %&gt;%\n  summarise(mean = mean(pDist),\n            lower = quantile(pDist,0.05),\n            upper = quantile(pDist,0.95)) %&gt;%\n  ggplot(aes(x=snow_depth, y = mean)) +\n  geom_pointrange(aes(ymin=lower, ymax=upper)) +\n  ylab(\"Step length (km)\") +\n  xlab(\"Snow depth (m)\") +\n  theme_bw()\n\n\n\n\n\n\n\n\nBased on this graph, step lengths decrease with increasing snow depth, as expected. The relationship appears to be exponential as well, with changes in step length becoming smaller as step length becomes smaller. Let’s plot our step length time series again but with colours representing 0.05 m bins of snow depth.\n\n\n\n\n\n\n\n\n\nIt looks like once snow is deeper than ~0.1 m on average, muskox movement decreases well beyond the typical summer step lengths. Of note in the winter of 2010-2011, the snow is especially deep for an extended period of time and step lengths are at their lowest.\nTo define seasons, let’s use a cut-off of 0.1 m snow depth. We’ll define the start of winter as the first three successive days with snow depth &gt;=0.1 m and the end of winter as the first three successive days with snow depth &lt;=0.1 m.\n\n\n\n\n\nyear\nstart_summer\nstart_winter\nlength_summer\nlength_winter\n\n\n\n\n2007\n2007-05-20\n2007-10-11\n144\n214\n\n\n2008\n2008-05-12\n2008-10-25\n166\n193\n\n\n2009\n2009-05-06\n2009-11-18\n196\n159\n\n\n2010\n2010-04-26\n2010-11-04\n192\n199\n\n\n2011\n2011-05-22\n2011-10-19\n150\n217\n\n\n2012\n2012-05-23\n2012-09-11\n111\nNA\n\n\n\n\n\nWe could also look at the movement trajectories of muskoxen at the transitions between seasons to decide on cutoffs specific to each individual. Let’s plot the locations of individual muskoxen for each winter, including the transition months of Sept/Oct and Apr/May\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIt is clear from these plots that muskoxen tend to head to their winter range once snow starts to accumulate on the ground and leave that range when the snow melts. We can use interactive maps to pinpoint the dates when individuals arrive and leave their winter range. The winter season, along with the transition fall and spring seasons are indicated with different colours.\n\n\nNULL",
    "crumbs": [
      "Movement Patterns"
    ]
  },
  {
    "objectID": "quarto/02_movement_patterns.html#muskox-calving",
    "href": "quarto/02_movement_patterns.html#muskox-calving",
    "title": "Movement Patterns",
    "section": "Muskox Calving",
    "text": "Muskox Calving\nMovement behaviour in spring may be related to calving. Previous studies in Greenland have shown that muskoxen benefit from earlier spring green-up (Eikelenboom et al., 2021), so muskoxen may be able to alter their movement behaviour depending on green-up timing. In 2008 and 2009, surveys were flown to relocate collared muskoxen to see if they were accompanied by calves. We can plot these data on graphs of step lengths in the spring to investigate how approximate calving dates impact movement.\n\n\n\n\n\n\n\n\n\nComparing the graphs of muskoxen that were observed to be accompanied by a calf to those that were not, there does not appear to be a major difference in the general trend for step lengths. 7013 in 2009 is the only trajectory to show a sudden decrease in step lengths that resembles those used to determine calving dates for caribou (Bonar et al., 2018; DeMars et al., 2013), but this signal is not present for any of the other muskoxen. For most muskoxen, there is a marked increase in step length in mid-May, but this does not appear to be related to calving dates. The survey data shows that in almost all spring surveys (April onwards), the collared muskoxen were in groups consisting of other females with calves. Only 7010 in 2009 was in a group that wasn’t observed to contain calves until the June survey. I am not sure if these observations",
    "crumbs": [
      "Movement Patterns"
    ]
  },
  {
    "objectID": "quarto/02_movement_patterns.html#net-squared-displacement",
    "href": "quarto/02_movement_patterns.html#net-squared-displacement",
    "title": "Movement Patterns",
    "section": "Net Squared Displacement",
    "text": "Net Squared Displacement\nWe can also look at net squared displacement curves to investigate movement patterns of muskoxen (i.e. resident, migratory, or nomadic). See Bunnefeld et al. (2011) for examples of how these curves look for different movement classes (i.e. migrant, disperser, resident, nomad).\nTo do this we will use the adehabitatLT package to format our data and the migrateR package to fit different models to the net displacement data. Let’s first get our collar data into the trajectory format used by adehabitatLT. We will also subset our data to one observation per day to improve modelling efficiency.\n\nmusk_collar_sub &lt;- musk_collar_filt %&gt;%\n  filter(lubridate::hour(datetime) == 16)\n\nxy &lt;- musk_collar_sub %&gt;%\n  sf::st_transform(\"+proj=utm +zone=9\") %&gt;%\n  sf::st_coordinates()\nltraj &lt;- adehabitatLT::as.ltraj(xy = xy, date = musk_collar_sub$datetime, id = musk_collar_sub$Id_Number)\n\nadehabitatLT::ld(ltraj) %&gt;%\n  filter(!(id %in% c(707,709,710))) %&gt;%\n  ggplot(aes(x = date, y = R2n)) +\n  geom_point(size = 0.5) +\n  geom_line() +\n  ylab(\"Net squared displacement (km^2)\") +\n  xlab(\"Date\") +\n  facet_wrap(~id) +\n  theme_bw() +\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))\n\n\n\n\n\n\n\n\nThe plot above shows the net squared displacement from the initial location for each collared muskoxen. There does not appear to be a clear movement behaviour shared between all muskoxen. Most appear to have short periods of time during the summer with large net squared displacement, but these are generally followed by longer periods where net squared displacement is much smaller. Muskoxen 7011 and 7012 show a general increasing trend in net squared displacement, but there are still extended periods of smaller displacement throughout the time series. Most of the periods of larger displacement do not appear to be long enough to represent a separate summer range. Examinations of animations of muskox movements generally show that they tend to move between patches of resources during the summer rather than sticking to one specific area.",
    "crumbs": [
      "Movement Patterns"
    ]
  },
  {
    "objectID": "quarto/06_seasonal_range_mod.html",
    "href": "quarto/06_seasonal_range_mod.html",
    "title": "Home Range Modelling",
    "section": "",
    "text": "Now we will look to model variables that are likely to influence the size of home ranges. Since we have few observations per season (sample size 12 - 15), we want 1 - 2 explantory variables per season model. Average snow cover during the winter and calving seasons may impact home range size, with individuals being restricted from moving large distances. During the summer, the percent of landcover suitable for foraging or number of foraging patches may impact the size of home ranges with larger home ranges occurring when individuals need to travel more often or further to get to foraging areas. Other barriers to movement may also affect home range size, including ridges and lakes.",
    "crumbs": [
      "Home Range Modelling"
    ]
  },
  {
    "objectID": "quarto/06_seasonal_range_mod.html#winter-season-model",
    "href": "quarto/06_seasonal_range_mod.html#winter-season-model",
    "title": "Home Range Modelling",
    "section": "Winter Season Model",
    "text": "Winter Season Model\nWe’ll start by estimating average snow depth for winter and running model with muskox ID as a random effect. For this model, we will use the winter home range estimates that were limited to the months January-March to control for season length and to focus on the periods of highest snow depth.\n\nsm_crop &lt;- terra::rast(here(\"data/processed/sm_crop.nc\"), \n                       drivers=\"NETCDF\")\ndaterange &lt;- seq( as.Date(\"2007-01-01\"), as.Date(\"2012-12-31\"), by=\"+1 day\")\n\nsnow_wint_func &lt;- function(id, range){\n  year &lt;- musk_seascontwint %&gt;%\n    filter(range_id == !!id, range == !!range) %&gt;%\n    pull(year_min)\n  zones &lt;- rasterize(musk_seascontwint %&gt;%\n                           filter(range_id == !!id, range == !!range) %&gt;%\n                      sf::st_transform(terra::crs(sm_crop)) %&gt;%\n                        vect(),\n                    sm_crop, touches = TRUE)\n  rowids &lt;- which(month(daterange)&gt;=11&year(daterange)==year|\n          month(daterange)&lt;=3&year(daterange)==(year+1))\n  zonal(sm_crop[[rowids]], zones, \"mean\", wide = FALSE) %&gt;%\n    mutate(date = daterange[rowids], \n           range_id = !!id,\n           range = !!range) %&gt;%\n    select(-layer, -zone)\n}\n\nmusk_wint_home &lt;- musk_seascontwint %&gt;%\n  filter(season == \"Winter\",\n         range == \"home\",\n         seas_length &gt; 115\n         ) %&gt;%\n  pull(range_id) %&gt;%\n  map(function(.x){snow_wint_func(.x, \"home\")}) %&gt;%\n  list_rbind() \nmusk_wint_core &lt;- musk_seascontwint %&gt;%\n  filter(season == \"Winter\",\n         range == \"core\",\n         seas_length &gt; 115\n         ) %&gt;%\n  pull(range_id) %&gt;%\n  map(function(.x){snow_wint_func(.x, \"core\")}) %&gt;%\n  list_rbind() \nmusk_wint &lt;- bind_rows(musk_wint_home, musk_wint_core)\n\n\nmusk_wint_sum &lt;- musk_wint %&gt;%\n  group_by(range_id, range) %&gt;%\n  summarise(snow_depth = mean(value)) %&gt;%\n  left_join(musk_seascontwint %&gt;%\n              select(range_id, range, year_min, seas_length, area, Id_Number))\nsaveRDS(musk_wint_sum, here(\"output/musk_wint_sum.rds\"))\n\nmusk_wint_sum %&gt;%\n  ggplot(aes(x = snow_depth, y = area, colour = Id_Number)) +\n  geom_point(size = 3) +\n  scale_y_log10() +\n  facet_wrap(~range, scales = \"free\")\n\n\n\n\n\n\n\nwint_home_mod &lt;- nlme::lme(log(area)~scale(snow_depth), random=~1|Id_Number,\n                 data = musk_wint_sum %&gt;% filter(range == \"home\"))\nsummary(wint_home_mod)\n\nLinear mixed-effects model fit by REML\n  Data: musk_wint_sum %&gt;% filter(range == \"home\") \n       AIC      BIC    logLik\n  32.09875 32.88765 -12.04938\n\nRandom effects:\n Formula: ~1 | Id_Number\n        (Intercept)  Residual\nStdDev:   0.5483609 0.5315927\n\nFixed effects:  log(area) ~ scale(snow_depth) \n                     Value Std.Error DF   t-value p-value\n(Intercept)        4.81230 0.2770874  5 17.367446  0.0000\nscale(snow_depth) -0.71062 0.1768201  4 -4.018886  0.0159\n Correlation: \n                  (Intr)\nscale(snow_depth) 0.013 \n\nStandardized Within-Group Residuals:\n       Min         Q1        Med         Q3        Max \n-0.8591322 -0.5728005 -0.5153681  0.6586580  1.1206790 \n\nNumber of Observations: 11\nNumber of Groups: 6 \n\nMuMIn::r.squaredGLMM(wint_home_mod)\n\n           R2m       R2c\n[1,] 0.4640211 0.7403306\n\nwint_core_mod &lt;- nlme::lme(log(area)~scale(snow_depth), random=~1|Id_Number, \n                 data = musk_wint_sum %&gt;% filter(range == \"core\"))\nsummary(wint_core_mod)\n\nLinear mixed-effects model fit by REML\n  Data: musk_wint_sum %&gt;% filter(range == \"core\") \n       AIC      BIC    logLik\n  32.34906 33.13796 -12.17453\n\nRandom effects:\n Formula: ~1 | Id_Number\n        (Intercept)  Residual\nStdDev:   0.5501878 0.5434197\n\nFixed effects:  log(area) ~ scale(snow_depth) \n                      Value Std.Error DF   t-value p-value\n(Intercept)        2.357580 0.2798785  5  8.423586  0.0004\nscale(snow_depth) -1.062493 0.1830115  4 -5.805610  0.0044\n Correlation: \n                  (Intr)\nscale(snow_depth) 0.025 \n\nStandardized Within-Group Residuals:\n       Min         Q1        Med         Q3        Max \n-0.9291835 -0.4181924 -0.3645884  0.3755136  1.2743279 \n\nNumber of Observations: 11\nNumber of Groups: 6 \n\nMuMIn::r.squaredGLMM(wint_core_mod)\n\n           R2m       R2c\n[1,] 0.6537087 0.8289974\n\n# set.seed(5)\n# wint_home_brms &lt;- brms::brm(log(area)~scale(snow_depth) + (1|Id_Number), \n#                  data = musk_wint_sum %&gt;% filter(range == \"home\"),\n#                  family = \"gaussian\",\n#                  chains = 3,\n#                  cores = 3,\n#                  iter = 4000,\n#                  control = list(adapt_delta = 0.99))\n# summary(wint_home_brms)\n# set.seed(5)\n# wint_core_brms &lt;- brms::brm(log(area)~scale(snow_depth) + (1|Id_Number), \n#                  data = musk_wint_sum %&gt;% filter(range == \"core\"),\n#                  family = \"gaussian\",\n#                  chains = 3,\n#                  cores = 3,\n#                  iter = 4000,\n#                  control = list(adapt_delta = 0.99))\n# summary(wint_core_brms)\n\nClearly, there is a negative relationship between snow depth and winter range size: as snow depth increases, the size of winter home ranges tends to decrease. In addition, each muskox with multiple years of data had a smaller winter home range in the year with deeper snow.\nIt’s also worth noting that the three instances with the deepest snow all occurred in 2010, but all three home ranges occurred in spatially distinct areas. There could be another weather variable correlated with years that is responsible for the relationship, but snow depth seems the most plausible given previous research. Also, if we include the three winter home ranges that were only calculated for part of the season (due to starting or ending mid winter), they fit the trend as 2007 and 2011 were also years with deeper snow.",
    "crumbs": [
      "Home Range Modelling"
    ]
  },
  {
    "objectID": "quarto/06_seasonal_range_mod.html#calving-season-model",
    "href": "quarto/06_seasonal_range_mod.html#calving-season-model",
    "title": "Home Range Modelling",
    "section": "Calving Season Model",
    "text": "Calving Season Model\nNext we will look at the same relationship for the calving seasons:\n\nsm_crop &lt;- terra::rast(here(\"data/processed/sm_crop.nc\"), \n                       drivers=\"NETCDF\")\ndaterange &lt;- seq( as.Date(\"2007-01-01\"), as.Date(\"2012-12-31\"), by=\"+1 day\")\nsnow_calv_func &lt;- function(id, range){\n  year &lt;- musk_seascont %&gt;%\n    filter(range_id == !!id, range == !!range) %&gt;%\n    pull(year_min)\n  zones &lt;- rasterize(musk_seascont %&gt;%\n                           filter(range_id == !!id, range == !!range) %&gt;%\n                      sf::st_transform(terra::crs(sm_crop)) %&gt;%\n                        terra::vect(),\n                    sm_crop, touches = TRUE)\n  rowids &lt;- which(month(daterange)==4&year(daterange)==year)\n  zonal(sm_crop[[rowids]], zones, \"mean\", wide = FALSE) %&gt;%\n    mutate(date = daterange[rowids], \n           range_id = !!id,\n           range = !!range) %&gt;%\n    select(-layer, -zone)\n}\n\nmusk_calv_home &lt;- musk_seascont %&gt;%\n  filter(season == \"Calving\",\n         range == \"home\"\n         ) %&gt;%\n  pull(range_id) %&gt;%\n  map(function(.x){snow_calv_func(.x, \"home\")}) %&gt;%\n  list_rbind() \nmusk_calv_core &lt;- musk_seascont %&gt;%\n  filter(season == \"Calving\",\n         range == \"core\"\n         ) %&gt;%\n  pull(range_id) %&gt;%\n  map(function(.x){snow_calv_func(.x, \"core\")}) %&gt;%\n  list_rbind() \nmusk_calv &lt;- bind_rows(musk_calv_home, musk_calv_core)\n\n\nmusk_calv_sum &lt;- musk_calv %&gt;%\n  group_by(range_id, range) %&gt;%\n  summarise(snow_depth = mean(value)) %&gt;%\n  left_join(musk_seascont %&gt;%\n              select(range_id, range, year_min, seas_length, area, Id_Number)) \n\nmusk_calv_sum %&gt;%\n  ggplot(aes(x = snow_depth, y = log(area), colour = Id_Number)) +\n  geom_point(size = 3) +\n  facet_wrap(~range, scales = \"free\")\n\n\n\n\n\n\n\ncalv_home_mod &lt;- lme4::lmer(log(area)~scale(snow_depth) + (1|Id_Number), \n                 data = musk_calv_sum %&gt;% filter(range == \"home\"))\nsummary(calv_home_mod)\n\nLinear mixed model fit by REML ['lmerMod']\nFormula: log(area) ~ scale(snow_depth) + (1 | Id_Number)\n   Data: musk_calv_sum %&gt;% filter(range == \"home\")\n\nREML criterion at convergence: 46.4\n\nScaled residuals: \n     Min       1Q   Median       3Q      Max \n-1.57913 -0.61756  0.05808  0.28342  1.99584 \n\nRandom effects:\n Groups    Name        Variance Std.Dev.\n Id_Number (Intercept) 0.000    0.000   \n Residual              1.375    1.172   \nNumber of obs: 15, groups:  Id_Number, 7\n\nFixed effects:\n                  Estimate Std. Error t value\n(Intercept)         3.5817     0.3027  11.831\nscale(snow_depth)  -0.3279     0.3134  -1.046\n\nCorrelation of Fixed Effects:\n            (Intr)\nscl(snw_dp) 0.000 \noptimizer (nloptwrap) convergence code: 0 (OK)\nboundary (singular) fit: see help('isSingular')\n\nMuMIn::r.squaredGLMM(calv_home_mod)\n\n            R2m        R2c\n[1,] 0.07252154 0.07252154\n\ncalv_core_mod &lt;- lme4::lmer(log(area)~scale(snow_depth)+(1|Id_Number), \n                 data = musk_calv_sum %&gt;% filter(range == \"core\"))\nsummary(calv_core_mod)\n\nLinear mixed model fit by REML ['lmerMod']\nFormula: log(area) ~ scale(snow_depth) + (1 | Id_Number)\n   Data: musk_calv_sum %&gt;% filter(range == \"core\")\n\nREML criterion at convergence: 63.9\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-2.2820 -0.4284  0.3189  0.4718  1.4036 \n\nRandom effects:\n Groups    Name        Variance Std.Dev.\n Id_Number (Intercept) 0.000    0.000   \n Residual              5.277    2.297   \nNumber of obs: 15, groups:  Id_Number, 7\n\nFixed effects:\n                  Estimate Std. Error t value\n(Intercept)        0.59722    0.59314   1.007\nscale(snow_depth) -0.07815    0.61396  -0.127\n\nCorrelation of Fixed Effects:\n            (Intr)\nscl(snw_dp) 0.000 \noptimizer (nloptwrap) convergence code: 0 (OK)\nboundary (singular) fit: see help('isSingular')\n\n\nThere is still a negative relationship present between snow depth and calving home range size, but it is no longer significant. Given that we do not actually know which females had calves every year, the presence/absence of calves could have a large impact on the area traversed during this time. For instance, we know that muskox 7010 in 2009 was not seen with a calf during any of the surveys and happens to have the largest home range size during the calving season. Similarly, muskox 7012 in 2009, which had the second largest home range, was not with a calf until May at the earliest. This means 7012 was not restricted from moving around during the deepest parts of the calving season. Removing these two points makes for a much stronger relationship; however this pattern is not universal as there were other muskoxen in 2008 and 2009 that were without calves during April and still had small home ranges. The fact that these muskoxen travel in groups needs to be taken into consideration as well because even if the collared muskoxen does not have a calf, its movements may still be restricted by the movements of the group. Most groups observed in 2008 and 2009 had at least one calf during the calving season. One exception was 7010 in 2009, which was observed to be in a group with a calf at the beginning of April but not in May.",
    "crumbs": [
      "Home Range Modelling"
    ]
  },
  {
    "objectID": "quarto/06_seasonal_range_mod.html#summer-season-model",
    "href": "quarto/06_seasonal_range_mod.html#summer-season-model",
    "title": "Home Range Modelling",
    "section": "Summer Season Model",
    "text": "Summer Season Model\nFor the summer season, length of season and forage availability are likely to be more important for determining home range size than weather conditions (though extreme heat and bugs in the summer could impact movement as well). Like winter and calving season models, we will stick with one predictor variable to avoid issues with overfitting. In this case, we will look at the percentage of shrubland and grassland within each home range, with the hypothesis that areas with less shrubland/grassland will mean muskoxen will need to travel further to meet their energy demands and consequently have larger home ranges.\nWe’ll start by loading the land cover data and calculating percent cover.\n\nlc_2010_crop &lt;- terra::rast(here(\"data/processed/lc_2010_crop.tif\"))\nlc_atts &lt;- readRDS(here(\"data/processed/lc_atts.rds\"))\n### land cover ids 8 and 10 coorespond to the land covers of interest\nlcc_func &lt;- function(id, range){\n  points &lt;- musk_seascont %&gt;%\n    filter(range_id == !!id, range == !!range) %&gt;%\n    sf::st_transform(terra::crs(lc_2010_crop))\n  lc_2010_crop2 &lt;- terra::crop(lc_2010_crop, points)\n  zones &lt;- rasterize(points %&gt;%\n                        terra::vect(),\n                    lc_2010_crop2, touches = TRUE)\n  ct &lt;- crosstab(c(zones, lc_2010_crop2)) %&gt;%\n    as_tibble() %&gt;%\n    mutate(range_id = !!id,\n           range = !!range)\n}\n\nmusk_sum_home &lt;- musk_seascont %&gt;%\n  filter(season == \"Summer\",\n         range == \"home\") %&gt;%\n  pull(range_id) %&gt;%\n  map(function(.x){lcc_func(.x, \"home\")}) %&gt;%\n  list_rbind() \nmusk_sum_core &lt;- musk_seascont %&gt;%\n  filter(season == \"Summer\",\n         range == \"core\") %&gt;%\n  pull(range_id) %&gt;%\n  map(function(.x){lcc_func(.x, \"core\")}) %&gt;%\n  list_rbind() \nmusk_sum &lt;- bind_rows(musk_sum_home, musk_sum_core)\n\n\nmusk_sum_sum &lt;- musk_sum %&gt;%\n  mutate(for_lc = ifelse(cover%in%c(\"Temperate or sub-polar shrubland\",\n                                    \"Temperate or sub-polar grassland\",\n                                    \"Sub-polar or polar shrubland-lichen-moss\",\n                                    \"Sub-polar or polar grassland-lichen-moss\",\n                                    \"Sub-polar or polar barren-lichen-moss\"),1,0)) %&gt;%\n  group_by(range_id, range) %&gt;%\n  summarise(total = sum(n),\n            for_tot = sum(n*for_lc),\n            for_per = for_tot/total) %&gt;%\n  left_join(musk_seascont %&gt;%\n              select(range_id, range, year_min, seas_length, area, Id_Number)) \n\nmusk_sum_sum %&gt;%\n  ggplot(aes(x = for_per, y = log(area), colour = Id_Number)) +\n  geom_point(size = 3) +\n  facet_wrap(~range, scales = \"free\")\n\n\n\n\n\n\n\nsum_home_mod &lt;- nlme::lme(log(area)~scale(for_per), random=~1|Id_Number, \n                 data = musk_sum_sum %&gt;% filter(range == \"home\"))\nsummary(sum_home_mod)\n\nLinear mixed-effects model fit by REML\n  Data: musk_sum_sum %&gt;% filter(range == \"home\") \n       AIC      BIC   logLik\n  14.21694 15.80852 -3.10847\n\nRandom effects:\n Formula: ~1 | Id_Number\n        (Intercept)   Residual\nStdDev:   0.5533838 0.09158007\n\nFixed effects:  log(area) ~ scale(for_per) \n                  Value  Std.Error DF  t-value p-value\n(Intercept)    9.690539 0.21127654  6 45.86661  0.0000\nscale(for_per) 0.154817 0.07617671  5  2.03235  0.0978\n Correlation: \n               (Intr)\nscale(for_per) 0.046 \n\nStandardized Within-Group Residuals:\n        Min          Q1         Med          Q3         Max \n-1.48503085 -0.29697479  0.01338312  0.29728898  1.44623295 \n\nNumber of Observations: 13\nNumber of Groups: 7 \n\nsum_core_mod &lt;- nlme::lme(log(area)~scale(for_per), random=~1|Id_Number, \n                 data = musk_sum_sum %&gt;% filter(range == \"core\"))\nsummary(sum_core_mod)\n\nLinear mixed-effects model fit by REML\n  Data: musk_sum_sum %&gt;% filter(range == \"core\") \n      AIC      BIC    logLik\n  28.5491 30.14068 -10.27455\n\nRandom effects:\n Formula: ~1 | Id_Number\n        (Intercept) Residual\nStdDev:   0.4624548 0.344547\n\nFixed effects:  log(area) ~ scale(for_per) \n                   Value Std.Error DF  t-value p-value\n(Intercept)     7.475775 0.2033897  6 36.75592  0.0000\nscale(for_per) -0.041506 0.1359836  5 -0.30523  0.7725\n Correlation: \n               (Intr)\nscale(for_per) 0.049 \n\nStandardized Within-Group Residuals:\n       Min         Q1        Med         Q3        Max \n-1.2452052 -0.3128850 -0.1099126  0.3078064  1.3706162 \n\nNumber of Observations: 13\nNumber of Groups: 7 \n\n\nA lot of the variation in home range size is explained by differences in individual muskoxen; i.e. summer home ranges are similar in size across seasons, and we already know that they share high overlap across years.\nThe relationship with forage percent cover is in opposition to the original hypothesis. Larger home ranges appear to be correlated with a larger percent of forage land cover, though not significant. Maybe if there is a high density of foraging areas, it makes sense to target foraging areas that haven’t been visited lately so there is a maximal amount of forage. For individuals in areas with low density of foraging areas, maybe it makes more sense to not travel long distances to new foraging patches and just stay with the ones that are nearby. By this logic, we might expect the area immediately surrounding home ranges to have a low density of forage areas.\nBefore we compare the areas inside and outside of summer home ranges lets look to see if season length has any effect on summer season size.\n\nmusk_seascont %&gt;%\n  filter(season == \"Summer\") %&gt;%\n  ggplot(aes(x = seas_length, y = log(area), colour = Id_Number)) +\n  geom_point(size = 3) +\n  facet_wrap(~range, scales = \"free\")\n\n\n\n\n\n\n\nsum_home_length_mod &lt;- nlme::lme(log(area)~scale(seas_length), \n                                 random=~1|Id_Number, \n                                 data = musk_seascont %&gt;%\n                                   filter(season == \"Summer\",\n                                          range == \"home\"))\nsummary(sum_home_length_mod)\n\nLinear mixed-effects model fit by REML\n  Data: musk_seascont %&gt;% filter(season == \"Summer\", range == \"home\") \n       AIC     BIC   logLik\n  19.28732 20.8789 -5.64366\n\nRandom effects:\n Formula: ~1 | Id_Number\n        (Intercept)  Residual\nStdDev:     0.57154 0.1183247\n\nFixed effects:  log(area) ~ scale(seas_length) \n                       Value  Std.Error DF  t-value p-value\n(Intercept)         9.667986 0.21908537  6 44.12885  0.0000\nscale(seas_length) -0.016793 0.03512815  5 -0.47806  0.6528\n Correlation: \n                   (Intr)\nscale(seas_length) 0.012 \n\nStandardized Within-Group Residuals:\n        Min          Q1         Med          Q3         Max \n-0.92448826 -0.44761859 -0.04991734  0.37512118  1.36661453 \n\nNumber of Observations: 13\nNumber of Groups: 7 \n\nsum_core_length_mod &lt;- nlme::lme(log(area)~scale(seas_length), \n                                 random=~1|Id_Number, \n                                 data = musk_seascont %&gt;%\n                                   filter(season == \"Summer\",\n                                          range == \"core\"))\nsummary(sum_core_length_mod)\n\nLinear mixed-effects model fit by REML\n  Data: musk_seascont %&gt;% filter(season == \"Summer\", range == \"core\") \n       AIC      BIC    logLik\n  28.99783 30.58941 -10.49892\n\nRandom effects:\n Formula: ~1 | Id_Number\n        (Intercept)  Residual\nStdDev:   0.4396887 0.3524217\n\nFixed effects:  log(area) ~ scale(seas_length) \n                      Value Std.Error DF  t-value p-value\n(Intercept)        7.478075 0.1969522  6 37.96899  0.0000\nscale(seas_length) 0.044618 0.1037080  5  0.43022  0.6849\n Correlation: \n                   (Intr)\nscale(seas_length) 0.027 \n\nStandardized Within-Group Residuals:\n       Min         Q1        Med         Q3        Max \n-1.3382618 -0.3794572 -0.1413570  0.3749665  1.2782830 \n\nNumber of Observations: 13\nNumber of Groups: 7 \n\n\nThere is no significant relationship. If anything, there is a slight negative trend with season length. In fact, as we observed previously, summer home ranges are fairly consistent in size within individuals despite differences in season length across years (see 7011, 7012, 7013, and 708 in graph above), meaning our previous finding of the availability of foraging patches is probably more important.",
    "crumbs": [
      "Home Range Modelling"
    ]
  },
  {
    "objectID": "quarto/06_seasonal_range_mod.html#summer-season-model-1",
    "href": "quarto/06_seasonal_range_mod.html#summer-season-model-1",
    "title": "Home Range Modelling",
    "section": "Summer Season Model",
    "text": "Summer Season Model\nThis part of the Sahtu region is quite rough terrain with prominent mountains. If muskox home ranges are limited in size by topography, it would be more difficult to test for it. It might be more informational to compare topography or land cover within the home range with topography and land cover immediately surrounding the home range. If land cover has a lower proportion of foraging areas or topography is rougher outside of the home range, then maybe these factors are responsible for the size of the home ranges.\nWe will use a buffer of 7 km to start. This buffer represents the average distance that muskoxen travel between foraging patches, so it is expected that muskoxen could realistically travel to these areas.\n\nmusk_sum_sum3 &lt;- musk_sum_buf %&gt;%\n  mutate(for_lc = ifelse(cover%in%c(\"Temperate or sub-polar shrubland\",\n                                    \"Temperate or sub-polar grassland\",\n                                    \"Sub-polar or polar shrubland-lichen-moss\",\n                                    \"Sub-polar or polar grassland-lichen-moss\",\n                                    \"Sub-polar or polar barren-lichen-moss\"),1,0)) %&gt;%\n  # ### remove water land cover from calculation of total land cover\n  # filter(Canada2010 != 18) %&gt;%\n  group_by(range_id, group, buffer) %&gt;%\n  summarise(total = sum(n),\n            for_tot = sum(n*for_lc),\n            for_per = for_tot/total) %&gt;%\n  left_join(musk_seascont %&gt;%\n              filter(range == \"home\") %&gt;%\n              select(range_id, year_min, seas_length, area, Id_Number)) %&gt;%\n  mutate(group = factor(group, levels = c(\"home range\", \"buffer\")))\n\nmusk_sum_sum3 %&gt;%\n  filter(buffer == 7000|group!=\"home range\") %&gt;%\n  mutate(group2 = str_c(buffer/1000,\" km \",group),\n         group2 = ifelse(group == \"home range\",as.character(group),group2),\n         group2 = factor(group2, \n                         levels = c(\"home range\",\"3.5 km buffer\",\n                                    \"7 km buffer\", \"14 km buffer\"))) %&gt;%\n  ggplot(aes(x = group2, y = for_per)) +\n  geom_boxplot() \n\n\n\n\n\n\n\nsum_mod1 &lt;- lme4::glmer(cbind(for_tot, total-for_tot)~ group + \n                         (1|Id_Number/year_min), family = \"binomial\",\n                       data = musk_sum_sum3 %&gt;% filter(buffer == 7000))\nsum_mod2 &lt;- lme4::glmer(cbind(for_tot, total-for_tot)~ group + \n                         (1|Id_Number/year_min), family = \"binomial\",\n                       data = musk_sum_sum3 %&gt;% filter(buffer == 7000/2))\nsum_mod3 &lt;- lme4::glmer(cbind(for_tot, total-for_tot)~ group + \n                         (1|Id_Number/year_min), family = \"binomial\",\n                       data = musk_sum_sum3 %&gt;% filter(buffer == 7000*2))\nsummary(sum_mod1)\n\nGeneralized linear mixed model fit by maximum likelihood (Laplace\n  Approximation) [glmerMod]\n Family: binomial  ( logit )\nFormula: cbind(for_tot, total - for_tot) ~ group + (1 | Id_Number/year_min)\n   Data: musk_sum_sum3 %&gt;% filter(buffer == 7000)\n\n     AIC      BIC   logLik deviance df.resid \n 56585.8  56590.8 -28288.9  56577.8       22 \n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-97.221 -18.017   0.315  21.160  97.230 \n\nRandom effects:\n Groups             Name        Variance Std.Dev.\n year_min:Id_Number (Intercept) 0.02056  0.1434  \n Id_Number          (Intercept) 0.23611  0.4859  \nNumber of obs: 26, groups:  year_min:Id_Number, 13; Id_Number, 7\n\nFixed effects:\n             Estimate Std. Error z value Pr(&gt;|z|)    \n(Intercept) -1.380799   0.188899   -7.31 2.68e-13 ***\ngroupbuffer -0.761268   0.001873 -406.41  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nCorrelation of Fixed Effects:\n            (Intr)\ngroupbuffer -0.008\n\n\nThis result agrees with our hypothesis; the percent cover of foraging areas inside the home range is nearly double the percent cover in the immediate area surrounding the home range. This suggests that forage availability may limit muskox. Using smaller buffers of 2km and 5 km produced the same result. Given that many summer home ranges are bordered by lakes, the percent cover of lakes in the surrounding area could be responsible for some differences in forage cover, but even if we remove lakes from the calculation (not shown here), we still get a significant difference.\nLet’s do the same test but with terrain ruggedness index to assess if the terrain surrounding home ranges is more rough than the terrain within home ranges. We would expect that muskoxen would be less likely to travel through rough terrain\n\nmusk_ter %&gt;%\n  ggplot(aes(x = group, y = value)) +\n  geom_boxplot() \n\n\n\n\n\n\n\nsum_mod &lt;- nlme::lme(value~group, random=~1|Id_Number/year_min, \n                 data = musk_ter)\nsummary(sum_mod)\n\nLinear mixed-effects model fit by REML\n  Data: musk_ter \n       AIC      BIC    logLik\n  58.06474 63.95501 -24.03237\n\nRandom effects:\n Formula: ~1 | Id_Number\n        (Intercept)\nStdDev:    1.321859\n\n Formula: ~1 | year_min %in% Id_Number\n         (Intercept)  Residual\nStdDev: 9.240511e-06 0.3699254\n\nFixed effects:  value ~ group \n                    Value Std.Error DF  t-value p-value\n(Intercept)     2.0852115 0.5112368 12 4.078759  0.0015\ngrouphome range 0.4055481 0.1450967 12 2.795020  0.0162\n Correlation: \n                (Intr)\ngrouphome range -0.142\n\nStandardized Within-Group Residuals:\n        Min          Q1         Med          Q3         Max \n-1.73036205 -0.59522723 -0.01339007  0.61749071  1.74135855 \n\nNumber of Observations: 26\nNumber of Groups: \n              Id_Number year_min %in% Id_Number \n                      7                      13 \n\n\nIf anything, it appears that the terrain is more rugged within home ranges though the difference is not huge (20% increase on average). Maybe the land cover they are interested in is more associated with rough terrain such as that close to the mountains.",
    "crumbs": [
      "Home Range Modelling"
    ]
  },
  {
    "objectID": "quarto/06_seasonal_range_mod.html#winter-season-model-1",
    "href": "quarto/06_seasonal_range_mod.html#winter-season-model-1",
    "title": "Home Range Modelling",
    "section": "Winter Season Model",
    "text": "Winter Season Model\nFor the winter season model, we will compare snow depth. We’ll use a buffer size equal to the average distance between the home range center and edges.\n\ndist_func &lt;- function(id){\n  poly &lt;- musk_seascont %&gt;%\n    filter(range_id == !!id,\n           range == \"home\") %&gt;%\n    select(geometry)\n  distances &lt;- poly %&gt;% \n    st_cast(\"POINT\") %&gt;% \n    st_distance(st_centroid(poly)) %&gt;%\n    mean()\n}\ndist &lt;- musk_seascont %&gt;%\n  filter(season == \"Winter\",\n         range == \"home\") %&gt;%\n  pull(range_id) %&gt;%\n  map(function(.x){dist_func(.x)}) %&gt;%\n  unlist() %&gt;%\n  mean()\n\nsm_crop &lt;- terra::rast(here(\"data/processed/sm_crop.nc\"), \n                       drivers=\"NETCDF\")\ndaterange &lt;- seq( as.Date(\"2007-01-01\"), as.Date(\"2012-12-31\"), by=\"+1 day\")\nsnow_func &lt;- function(id){\n  year &lt;- musk_seascont %&gt;%\n    filter(range_id == !!id) %&gt;%\n    pull(year_min)\n  ### creating separate polygons because home ranges are small compared to raster\n  ### resolution and so we need to use proportion of cell overlap in our\n  ### calculation\n  points_home &lt;- musk_seascont %&gt;%\n               filter(range_id == !!id, range == \"home\") %&gt;%\n               mutate(group = \"home range\") %&gt;%\n              sf::st_transform(terra::crs(sm_crop))\n  points_buff &lt;- musk_seascont %&gt;%\n               filter(range_id == !!id, range == \"home\") %&gt;%\n               st_buffer(dist) %&gt;%\n               st_difference(musk_seascont %&gt;%\n                               filter(range_id == !!id, range == \"home\")) %&gt;%\n               mutate(group = \"buffer\") %&gt;%\n              sf::st_transform(terra::crs(sm_crop))\n  zones_home &lt;- rasterize(points_home %&gt;%\n                        terra::vect(),\n                    sm_crop, cover = TRUE)\n  sum_home &lt;- global(zones_home, \"sum\", na.rm = TRUE)[,1]\n  zones_buff &lt;- rasterize(points_buff %&gt;%\n                        terra::vect(),\n                    sm_crop, cover = TRUE)\n  sum_buff &lt;- global(zones_buff, \"sum\", na.rm = TRUE)[,1]\n  rowids &lt;- which(month(daterange)&gt;=11&year(daterange)==year|\n          month(daterange)&lt;=3&year(daterange)==(year+1))\n  temp &lt;- global(sm_crop[[rowids]]*zones_home/sum_home,\"sum\",na.rm = TRUE)[,1]\n  temp &lt;- global(sm_crop[[rowids]]*zones_buff/sum_buff,\"sum\",na.rm = TRUE)[,1]\n  tibble(\n    snow_depth = global(sm_crop[[rowids]]*zones_home/sum_home,\n                        \"sum\",na.rm = TRUE)[,1],\n    date = daterange[rowids], \n    range_id = !!id,\n    group = \"home range\") %&gt;%\n    bind_rows(\n      tibble(\n          snow_depth = global(sm_crop[[rowids]]*zones_buff/sum_buff,\n                              \"sum\",na.rm = TRUE)[,1],\n          date = daterange[rowids], \n          range_id = !!id,\n          group = \"buffer\")\n          )\n}\n\nmusk_snow &lt;- musk_seascont %&gt;%\n  filter(season == \"Winter\", range == \"home\", seas_length&gt;115) %&gt;%\n  pull(range_id) %&gt;%\n  map(function(.x){snow_func(.x)}) %&gt;%\n  list_rbind() \n\n\nmusk_snow2 &lt;- musk_snow %&gt;%\n  group_by(range_id, group) %&gt;%\n  summarise(snow_depth = mean(snow_depth)) %&gt;%\n  left_join(musk_seascont %&gt;%\n              filter(range == \"home\") %&gt;%\n              select(range_id, year_min, seas_length, area, Id_Number))\n\nmusk_snow2 %&gt;%\n  ggplot(aes(x = group, y = snow_depth)) +\n  geom_boxplot() \n\n\n\n\n\n\n\nwint_mod &lt;- nlme::lme(snow_depth~group, random=~1|Id_Number/year_min, \n                 data = musk_snow2)\nsummary(wint_mod)\n\nLinear mixed-effects model fit by REML\n  Data: musk_snow2 \n        AIC       BIC   logLik\n  -57.31365 -52.33499 33.65683\n\nRandom effects:\n Formula: ~1 | Id_Number\n         (Intercept)\nStdDev: 1.795728e-06\n\n Formula: ~1 | year_min %in% Id_Number\n        (Intercept)   Residual\nStdDev:   0.0587992 0.01866914\n\nFixed effects:  snow_depth ~ group \n                     Value   Std.Error DF  t-value p-value\n(Intercept)     0.18164546 0.018600787 10 9.765472   0.000\ngrouphome range 0.01414474 0.007960546 10 1.776855   0.106\n Correlation: \n                (Intr)\ngrouphome range -0.214\n\nStandardized Within-Group Residuals:\n        Min          Q1         Med          Q3         Max \n-1.43945096 -0.55824709  0.02055434  0.42290962  1.64777018 \n\nNumber of Observations: 22\nNumber of Groups: \n              Id_Number year_min %in% Id_Number \n                      6                      11 \n\n\nPerhaps the snow cover data is too coarse resolution for this analysis. Some of the winter home ranges only take up less than 10% of a pixel in area so the calculation of snow depth inside and outside of the home ranges is based on a lot fo the same data. We can try to use elevation as a proxy instead.\n\nmrdtm_crop &lt;- terra::rast(here(\"data/processed/mrdtm_crop.tif\"))\nelev_func &lt;- function(id, buff){\n  points &lt;- musk_seascont %&gt;%\n    filter(range_id == !!id, range == \"home\") %&gt;%\n    st_buffer(buff) %&gt;%\n    st_difference(musk_seascont %&gt;%\n                    filter(range_id == !!id, range == \"home\")) %&gt;%\n    mutate(group = \"buffer\") %&gt;%\n    bind_rows(musk_seascont %&gt;%\n                filter(range_id == !!id, range == \"home\") %&gt;%\n                mutate(group = \"home range\")) %&gt;%\n    sf::st_transform(terra::crs(mrdtm_crop))\n  mrdtm_crop2 &lt;- terra::crop(mrdtm_crop, points)\n  zones &lt;- rasterize(points %&gt;%\n                       terra::vect(),\n                     mrdtm_crop2, field = \"group\", touches = TRUE)\n  zonal(mrdtm_crop2, zones, \"mean\", wide = FALSE, na.rm = TRUE) %&gt;%\n    mutate(range_id = !!id, \n           buffer = buff) %&gt;%\n    select(-layer)\n}\n\n\nmusk_elev &lt;- musk_seascont %&gt;%\n  filter(season == \"Winter\", range == \"home\", seas_length&gt;115) %&gt;%\n  pull(range_id) %&gt;%\n  map(function(.x){bind_rows(elev_func(.x, dist),\n                             elev_func(.x, dist/2),\n                             elev_func(.x, dist*2))}) %&gt;%\n  list_rbind() %&gt;%\n  left_join(musk_seascont %&gt;%\n              filter(range == \"home\") %&gt;%\n              st_drop_geometry() %&gt;%\n              select(range_id, Id_Number, year_min)) %&gt;%\n  mutate(group = factor(group, levels = c(\"home range\", \"buffer\")))\n\n\nmusk_elev %&gt;%\n  ggplot(aes(x = group, y = value, group = interaction(Id_Number, year_min),\n             colour = interaction(Id_Number, year_min))) +\n  facet_wrap(~round(buffer/1000,1)) +\n  geom_line()  \n\n\n\n\n\n\n\nelev_mod &lt;- nlme::lme(value~group, random=~1|Id_Number/year_min, \n                 data = musk_elev %&gt;% filter(buffer == dist))\nsummary(elev_mod)\n\nLinear mixed-effects model fit by REML\n  Data: musk_elev %&gt;% filter(buffer == dist) \n       AIC      BIC   logLik\n  229.1239 234.1026 -109.562\n\nRandom effects:\n Formula: ~1 | Id_Number\n        (Intercept)\nStdDev:    120.3712\n\n Formula: ~1 | year_min %in% Id_Number\n        (Intercept) Residual\nStdDev:    37.26204 22.77926\n\nFixed effects:  value ~ group \n             Value Std.Error DF   t-value p-value\n(Intercept) 375.31  50.96750 10  7.363712  0.0000\ngroupbuffer -24.00   9.71311 10 -2.470883  0.0331\n Correlation: \n            (Intr)\ngroupbuffer -0.095\n\nStandardized Within-Group Residuals:\n       Min         Q1        Med         Q3        Max \n-1.2815564 -0.5939720  0.1498558  0.4710288  1.2054520 \n\nNumber of Observations: 22\nNumber of Groups: \n              Id_Number year_min %in% Id_Number \n                      6                      11 \n\n\nHome range are on average higher elevation than the adjacent land, though this difference in elevation is small, around 24 m on average. However, this difference appears to increase as you increase the buffer size, going to 31 m when the buffer size is doubled and 51 m when the buffer size is quadrupled. It’s also worth noting that there is a positive increase in elevation in all but two instances and the largest increases happen at higher elevations. Given previous discussions, there may be two main areas that muskoxen go to during the winter: steep cliffs at high elevations and lake shores at lower elevations.\nLet’s calculate topographic position index to see if winter home ranges would be classified as hilltops\n\nmrdtm_crop &lt;- terra::rast(here(\"data/processed/mrdtm_crop.tif\"))\ntpi_crop &lt;- terra::terrain(mrdtm_crop, \"TPI\")\ntpi_func &lt;- function(id){\n  points &lt;- musk_seascont %&gt;%\n    filter(range_id == !!id, range == \"home\") %&gt;%\n    st_buffer(dist) %&gt;%\n    st_difference(musk_seascont %&gt;%\n                    filter(range_id == !!id, range == \"home\")) %&gt;%\n    mutate(group = \"buffer\") %&gt;%\n    bind_rows(musk_seascont %&gt;%\n                filter(range_id == !!id, range == \"home\") %&gt;%\n                mutate(group = \"home range\")) %&gt;%\n    sf::st_transform(terra::crs(tpi_crop))\n  tpi_crop2 &lt;- terra::crop(tpi_crop, points)\n  zones &lt;- rasterize(points %&gt;%\n                       terra::vect(),\n                     tpi_crop2, field = \"group\", touches = TRUE)\n  zonal(tpi_crop2, zones, \"mean\", wide = FALSE, na.rm = TRUE) %&gt;%\n    mutate(range_id = !!id) %&gt;%\n    select(-layer)\n}\n\n\nmusk_tpi &lt;- musk_seascont %&gt;%\n  filter(season == \"Winter\", range == \"home\", seas_length&gt;115) %&gt;%\n  pull(range_id) %&gt;%\n  map(function(.x){tpi_func(.x)}) %&gt;%\n  list_rbind() %&gt;%\n  left_join(musk_seascont %&gt;%\n              filter(range == \"home\") %&gt;%\n              st_drop_geometry() %&gt;%\n              select(range_id, Id_Number, year_min))\n\nmusk_tpi %&gt;%\n  ggplot(aes(x = group, y = value)) +\n  geom_boxplot() \n\n\n\n\n\n\n\n\nWinter home ranges appear to have a high topographic position index than the adjacent area, meaning they are more likely to be on hill tops. This TPI index uses the default neighborhood size and would likely need to be calibrated to this region to get better estimates of topographic features.",
    "crumbs": [
      "Home Range Modelling"
    ]
  },
  {
    "objectID": "quarto/06_seasonal_range_mod.html#calving-season-model-1",
    "href": "quarto/06_seasonal_range_mod.html#calving-season-model-1",
    "title": "Home Range Modelling",
    "section": "Calving Season Model",
    "text": "Calving Season Model\n\ndist_calv &lt;- musk_seascont %&gt;%\n  filter(season == \"Calving\",\n         range == \"home\") %&gt;%\n  pull(range_id) %&gt;%\n  map(function(.x){dist_func(.x)}) %&gt;%\n  unlist() %&gt;%\n  mean()\n\nmrdtm_crop &lt;- terra::rast(here(\"data/processed/mrdtm_crop.tif\"))\n\nmusk_elev_calv &lt;- musk_seascont %&gt;%\n  filter(season == \"Calving\", range == \"home\") %&gt;%\n  pull(range_id) %&gt;%\n  map(function(.x){bind_rows(elev_func(.x, dist_calv),\n                             elev_func(.x, dist_calv/2),\n                             elev_func(.x, dist_calv*2))}) %&gt;%\n  list_rbind() %&gt;%\n  left_join(musk_seascont %&gt;%\n              filter(range == \"home\") %&gt;%\n              st_drop_geometry() %&gt;%\n              select(range_id, Id_Number, year_min))%&gt;%\n  mutate(group = factor(group, levels = c(\"home range\", \"buffer\")))\n\n\nmusk_elev_calv %&gt;%\n  ggplot(aes(x = group, y = value, group = interaction(Id_Number, year_min),\n             colour = interaction(Id_Number, year_min))) +\n  geom_line() +\n  facet_wrap(~round(buffer/1000,1))\n\n\n\n\n\n\n\ncelev_mod &lt;- nlme::lme(value~group, random=~1|Id_Number/year_min, \n                 data = musk_elev_calv %&gt;% filter(buffer == dist_calv))\n\nsummary(celev_mod)\n\nLinear mixed-effects model fit by REML\n  Data: musk_elev_calv %&gt;% filter(buffer == dist_calv) \n       AIC      BIC    logLik\n  315.8498 322.5108 -152.9249\n\nRandom effects:\n Formula: ~1 | Id_Number\n        (Intercept)\nStdDev:    137.7349\n\n Formula: ~1 | year_min %in% Id_Number\n        (Intercept) Residual\nStdDev:    76.68616 16.01151\n\nFixed effects:  value ~ group \n               Value Std.Error DF   t-value p-value\n(Intercept) 414.4496  56.49903 14  7.335518  0.0000\ngroupbuffer -16.0509   5.84658 14 -2.745352  0.0158\n Correlation: \n            (Intr)\ngroupbuffer -0.052\n\nStandardized Within-Group Residuals:\n        Min          Q1         Med          Q3         Max \n-1.63361557 -0.49785914  0.06252395  0.42721880  1.78278772 \n\nNumber of Observations: 30\nNumber of Groups: \n              Id_Number year_min %in% Id_Number \n                      7                      15 \n\n\nThe same relationship with elevation appears to hold for the calving areas as well, suggesting again that relief from deep snow may be the most important thing in the snowy months. The difference is not as large which likely reflects that fact that calving ranges tend to only cover a portion of the total winter range. Again, the difference in elevations increases with larger buffers.",
    "crumbs": [
      "Home Range Modelling"
    ]
  },
  {
    "objectID": "quarto/06_seasonal_range_mod.html#summer-model",
    "href": "quarto/06_seasonal_range_mod.html#summer-model",
    "title": "Home Range Modelling",
    "section": "Summer Model",
    "text": "Summer Model\nLet’s look at the proportion of forage land cover again. This time, we will use a logistic model to compare used vs available home ranges (real vs. pseudo) to see if there is a significant difference. We will use a random effect of muskox ID for the slope term, as we do not expect the intercepts to vary across individuals because they have the same proportion of success and failures\n\nmusk_sum_lc &lt;- sum_pseudo %&gt;%\n  mutate(for_lc = ifelse(cover%in%c(\"Temperate or sub-polar shrubland\",\n                                    \"Temperate or sub-polar grassland\",\n                                    \"Sub-polar or polar shrubland-lichen-moss\",\n                                    \"Sub-polar or polar grassland-lichen-moss\",\n                                    \"Sub-polar or polar barren-lichen-moss\"),1,0)) %&gt;%\n  group_by(range_id, group) %&gt;%\n  summarise(total = sum(n),\n            for_tot = sum(n*for_lc),\n            for_per = for_tot/total) %&gt;%\n  left_join(musk_pseudohr %&gt;%\n              select(range_id, year_min, area, Id_Number)) %&gt;%\n  mutate(true_range = ifelse(group == \"true\",1,0)) \nsaveRDS(musk_sum_lc, here(\"output/musk_sum_lc.rds\"))\n\n\nmusk_sum_lc %&gt;%\n  ggplot(aes(x = group, y = for_per)) +\n  geom_boxplot() \n\n\n\n\n\n\n\nset.seed(5)\nsum_pseudo_brm &lt;- brms::brm(true_range ~ scale(for_per) + \n                         (1|Id_Number), family = \"bernoulli\",\n                       data = musk_sum_lc,\n                 chains = 3,\n                 cores = 3,\n                 iter = 10000,\n                 control = list(adapt_delta=0.9))\n\nsummary(sum_pseudo_brm)\n\n Family: bernoulli \n  Links: mu = logit \nFormula: true_range ~ scale(for_per) + (1 | Id_Number) \n   Data: musk_sum_lc (Number of observations: 26) \n  Draws: 3 chains, each with iter = 10000; warmup = 5000; thin = 1;\n         total post-warmup draws = 15000\n\nMultilevel Hyperparameters:\n~Id_Number (Number of levels: 7) \n              Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsd(Intercept)     2.17      1.73     0.09     6.47 1.00     2523     3029\n\nRegression Coefficients:\n             Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nIntercept        0.15      1.01    -1.80     2.29 1.00     4438     3429\nscalefor_per     3.47      2.01     0.98     8.48 1.00     3104     2651\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n\n\nIt looks like, as with the buffer approach, home ranges are selected for their proportion of foraging area. We needed to use a Bayesian approach though, because the lme4 models were having a difficult time estimating the variance of the random effect, possibly a result of the small sample size.",
    "crumbs": [
      "Home Range Modelling"
    ]
  },
  {
    "objectID": "quarto/06_seasonal_range_mod.html#winter-model",
    "href": "quarto/06_seasonal_range_mod.html#winter-model",
    "title": "Home Range Modelling",
    "section": "Winter Model",
    "text": "Winter Model\n\n\n\n|---------|---------|---------|---------|\n=========================================\n                                          \n\n\n\nmusk_wint_tpi %&gt;%\n  ggplot(aes(x = group, y = value)) +\n  geom_boxplot() \n\n\n\n\n\n\n\nset.seed(5)\nwint_pseudo_brm &lt;- brms::brm(true_range ~ scale(value) + \n                         (1|Id_Number), family = \"bernoulli\",\n                       data = musk_wint_tpi,\n                 chains = 3,\n                 cores = 3,\n                 iter = 10000,\n                 control = list(adapt_delta =0.9))\n\nsummary(wint_pseudo_brm)\n\n Family: bernoulli \n  Links: mu = logit \nFormula: true_range ~ scale(value) + (1 | Id_Number) \n   Data: musk_wint_tpi (Number of observations: 24) \n  Draws: 3 chains, each with iter = 10000; warmup = 5000; thin = 1;\n         total post-warmup draws = 15000\n\nMultilevel Hyperparameters:\n~Id_Number (Number of levels: 6) \n              Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsd(Intercept)     0.71      0.63     0.03     2.38 1.00     7499     6224\n\nRegression Coefficients:\n           Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nIntercept      0.51      0.72    -0.82     2.04 1.00     9540     7689\nscalevalue     2.61      1.23     0.71     5.45 1.00    10251     7281\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n\n\nHome ranges are associated with higher topographic position indices indicating winter home ranges are more often elevated relative to their surroundings. Let’s plot the winter home ranges on the TPI raster to better visualize it:",
    "crumbs": [
      "Home Range Modelling"
    ]
  },
  {
    "objectID": "quarto/06_seasonal_range_mod.html#calving-model",
    "href": "quarto/06_seasonal_range_mod.html#calving-model",
    "title": "Home Range Modelling",
    "section": "Calving Model",
    "text": "Calving Model\n\n\n\n|---------|---------|---------|---------|\n=========================================\n                                          \n\n\n\nmusk_calv_tpi %&gt;%\n  ggplot(aes(x = group, y = value)) +\n  geom_boxplot() \n\n\n\n\n\n\n\ncalv_pseudo_mod &lt;- lme4::glmer(true_range ~ scale(value) + \n                         (1|Id_Number), family = \"binomial\",\n                       data = musk_calv_tpi)\nsummary(calv_pseudo_mod)\n\nGeneralized linear mixed model fit by maximum likelihood (Laplace\n  Approximation) [glmerMod]\n Family: binomial  ( logit )\nFormula: true_range ~ scale(value) + (1 | Id_Number)\n   Data: musk_calv_tpi\n\n     AIC      BIC   logLik deviance df.resid \n    46.1     50.3    -20.1     40.1       27 \n\nScaled residuals: \n     Min       1Q   Median       3Q      Max \n-1.46760 -0.93551  0.00656  0.94115  1.24086 \n\nRandom effects:\n Groups    Name        Variance Std.Dev.\n Id_Number (Intercept) 0        0       \nNumber of obs: 30, groups:  Id_Number, 7\n\nFixed effects:\n             Estimate Std. Error z value Pr(&gt;|z|)\n(Intercept)  0.001811   0.374016   0.005    0.996\nscale(value) 0.472654   0.414296   1.141    0.254\n\nCorrelation of Fixed Effects:\n            (Intr)\nscale(valu) 0.013 \noptimizer (Nelder_Mead) convergence code: 0 (OK)\nboundary (singular) fit: see help('isSingular')\n\nset.seed(5)\ncalv_pseudo_brm &lt;- brms::brm(true_range ~ scale(value) + \n                         (1|Id_Number), family = \"bernoulli\",\n                       data = musk_calv_tpi,\n                 chains = 3,\n                 cores = 3,\n                 iter = 10000,\n                 control = list(adapt_delta =0.9))\n\nsummary(calv_pseudo_brm)\n\n Family: bernoulli \n  Links: mu = logit \nFormula: true_range ~ scale(value) + (1 | Id_Number) \n   Data: musk_calv_tpi (Number of observations: 30) \n  Draws: 3 chains, each with iter = 10000; warmup = 5000; thin = 1;\n         total post-warmup draws = 15000\n\nMultilevel Hyperparameters:\n~Id_Number (Number of levels: 7) \n              Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsd(Intercept)     0.44      0.38     0.01     1.41 1.00     8617     7397\n\nRegression Coefficients:\n           Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nIntercept      0.00      0.45    -0.88     0.89 1.00    11825     8668\nscalevalue     0.58      0.45    -0.25     1.52 1.00    17605     8514\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).",
    "crumbs": [
      "Home Range Modelling"
    ]
  }
]